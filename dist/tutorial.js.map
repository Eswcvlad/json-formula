{"version":3,"file":"tutorial.js","mappings":"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","sources":["webpack://jsonFormula/webpack/bootstrap","webpack://jsonFormula/webpack/runtime/make namespace object","webpack://jsonFormula/./src/dataTypes.js","webpack://jsonFormula/./src/tokenDefinitions.js","webpack://jsonFormula/./src/errors.js","webpack://jsonFormula/./src/utils.js","webpack://jsonFormula/./src/matchType.js","webpack://jsonFormula/./src/TreeInterpreter.js","webpack://jsonFormula/./src/Lexer.js","webpack://jsonFormula/./src/Parser.js","webpack://jsonFormula/./src/functions.js","webpack://jsonFormula/./src/interpreter.js","webpack://jsonFormula/./src/json-formula.js","webpack://jsonFormula/./tutorial/Form.js","webpack://jsonFormula/./src/stringToNumber.js","webpack://jsonFormula/./tutorial/tutorial.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n// Type constants used to define functions.\nexport default {\n  TYPE_NUMBER: 0,\n  TYPE_ANY: 1,\n  TYPE_STRING: 2,\n  TYPE_ARRAY: 3,\n  TYPE_OBJECT: 4,\n  TYPE_BOOLEAN: 5,\n  TYPE_EXPREF: 6,\n  TYPE_NULL: 7,\n  TYPE_ARRAY_NUMBER: 8,\n  TYPE_ARRAY_STRING: 9,\n  TYPE_CLASS: 10,\n  TYPE_ARRAY_ARRAY: 11,\n};\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nexport default {\n  TOK_EOF: 'EOF',\n  TOK_IDENTIFIER: 'Identifier',\n  TOK_QUOTEDIDENTIFIER: 'QuotedIdentifier',\n  TOK_RBRACKET: 'Rbracket',\n  TOK_RPAREN: 'Rparen',\n  TOK_COMMA: 'Comma',\n  TOK_COLON: 'Colon',\n  TOK_CONCATENATE: 'Concatenate',\n  TOK_RBRACE: 'Rbrace',\n  TOK_NUMBER: 'Number',\n  TOK_CURRENT: 'Current',\n  TOK_GLOBAL: 'Global',\n  TOK_EXPREF: 'Expref',\n  TOK_PIPE: 'Pipe',\n  TOK_OR: 'Or',\n  TOK_AND: 'And',\n  TOK_ADD: 'Add',\n  TOK_SUBTRACT: 'Subtract',\n  TOK_UNARY_MINUS: 'UnaryMinus',\n  TOK_MULTIPLY: 'Multiply',\n  TOK_UNION: 'Union',\n  TOK_DIVIDE: 'Divide',\n  TOK_COMPARATOR: 'Comparator',\n  TOK_FLATTEN: 'Flatten',\n  TOK_STAR: 'Star',\n  TOK_FILTER: 'Filter',\n  TOK_DOT: 'Dot',\n  TOK_NOT: 'Not',\n  TOK_LBRACE: 'Lbrace',\n  TOK_LBRACKET: 'Lbracket',\n  TOK_LPAREN: 'Lparen',\n  TOK_JSON: 'Literal',\n  TOK_STRING: 'String',\n  TOK_INT: 'Integer',\n};\n","/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nexport function typeError(desc) {\n  return new TypeError(desc);\n}\n\nexport function syntaxError(desc) {\n  const e = new Error(desc);\n  e.name = 'SyntaxError';\n  return e;\n}\n\nexport function functionError(desc) {\n  const e = new Error(desc);\n  e.name = 'FunctionError';\n  return e;\n}\n\nexport function evaluationError(desc) {\n  const e = new Error(desc);\n  e.name = 'EvaluationError';\n  return e;\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nexport function isArray(obj) {\n  return Array.isArray(obj);\n}\n\nexport function isObject(obj) {\n  if (obj !== null) {\n    return Object.prototype.toString.call(obj) === '[object Object]';\n  }\n  return false;\n}\n\nexport function getValueOf(a) {\n  if (a === null || a === undefined) return a;\n  if (isArray(a)) {\n    return a.map(i => getValueOf(i));\n  }\n  // if we have a child named 'valueOf' then we're an object,\n  // and just return the object.\n  if (typeof (a.valueOf) !== 'function') return a;\n  return a.valueOf();\n}\n\nexport function toBoolean(param) {\n  if (param === null) return false;\n  // in case it's an object with a valueOf defined\n  const val = getValueOf(param);\n\n  // empty arrays are false\n  if (Array.isArray(val)) return val.length > 0;\n  // empty objects are false\n  if (isObject(val)) return Object.keys(val).length > 0;\n  return !!val;\n}\n\nexport function strictDeepEqual(lhs, rhs) {\n  const first = getValueOf(lhs);\n  const second = getValueOf(rhs);\n  // Check the scalar case first.\n  if (first === second) {\n    return true;\n  }\n\n  // Check if they are the same type.\n  const firstType = Object.prototype.toString.call(first);\n  if (firstType !== Object.prototype.toString.call(second)) {\n    return false;\n  }\n  // We know that first and second have the same type so we can just check the\n  // first type from now on.\n  if (isArray(first) === true) {\n    // Short circuit if they're not the same length;\n    if (first.length !== second.length) {\n      return false;\n    }\n    for (let i = 0; i < first.length; i += 1) {\n      if (strictDeepEqual(first[i], second[i]) === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n  if (isObject(first) === true) {\n    // An object is equal if it has the same key/value pairs.\n    const keysSeen = {};\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key in first) {\n      if (hasOwnProperty.call(first, key)) {\n        if (strictDeepEqual(first[key], second[key]) === false) {\n          return false;\n        }\n        keysSeen[key] = true;\n      }\n    }\n    // Now check that there aren't any keys in second that weren't\n    // in first.\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key2 in second) {\n      if (hasOwnProperty.call(second, key2)) {\n        if (keysSeen[key2] !== true) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nexport function getProperty(obj, key) {\n  const desc = Object.getOwnPropertyDescriptor(obj, key);\n  // if it's a regular enumerable property or if it's configured with a getter,\n  // then return it.\n  // if it's a built-in property such as length or toString etc. we'll want to ignore it.\n  if (desc?.enumerable || !!desc?.get) {\n    // for applications that want to track which properties are accessed, allow for a special\n    // hook to callback and register this key/value accessor.\n    obj[key]?.[Symbol.for('track')]?.(obj, key);\n    return obj[key];\n  }\n  return undefined;\n}\n\nexport function debugAvailable(debug, obj, key) {\n  try {\n    debug.push(`Failed to find: '${key}'`);\n    let available = [];\n    if (isArray(obj) && obj.length > 0) {\n      available.push(`${0}..${obj.length - 1}`);\n    }\n    if (obj !== null) {\n      available = [...available, ...Object.entries(Object.getOwnPropertyDescriptors(obj, key))\n        .filter(([k, desc]) => (desc?.enumerable || !!desc?.get) && !/^[0-9]+$/.test(k) && (!k.startsWith('$') || key.startsWith('$')))\n        .map(([k]) => `'${k}'`)];\n    }\n    if (available.length) debug.push(`Available fields: ${available}`);\n  // eslint-disable-next-line no-empty\n  } catch (e) {}\n}\n\nexport function isClass(obj) {\n  if (obj === null) return false;\n  if (Array.isArray(obj)) return false;\n  return !['Object', 'Boolean', 'Number', 'String'].includes(obj.constructor.name);\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport dataTypes from './dataTypes.js';\nimport tokenDefinitions from './tokenDefinitions.js';\nimport { typeError } from './errors.js';\nimport { isClass } from './utils.js';\n\nconst {\n  TYPE_NUMBER,\n  TYPE_ANY,\n  TYPE_STRING,\n  TYPE_ARRAY,\n  TYPE_OBJECT,\n  TYPE_BOOLEAN,\n  TYPE_EXPREF,\n  TYPE_NULL,\n  TYPE_ARRAY_NUMBER,\n  TYPE_ARRAY_STRING,\n  TYPE_CLASS,\n  TYPE_ARRAY_ARRAY,\n} = dataTypes;\n\nconst {\n  TOK_EXPREF,\n} = tokenDefinitions;\n\nconst TYPE_NAME_TABLE = {\n  [TYPE_NUMBER]: 'number',\n  [TYPE_ANY]: 'any',\n  [TYPE_STRING]: 'string',\n  [TYPE_ARRAY]: 'array',\n  [TYPE_OBJECT]: 'object',\n  [TYPE_BOOLEAN]: 'boolean',\n  [TYPE_EXPREF]: 'expression',\n  [TYPE_NULL]: 'null',\n  [TYPE_ARRAY_NUMBER]: 'Array<number>',\n  [TYPE_ARRAY_STRING]: 'Array<string>',\n  [TYPE_CLASS]: 'class',\n  [TYPE_ARRAY_ARRAY]: 'Array<array>',\n};\n\nexport function getType(inputObj, useValueOf = true) {\n  if (inputObj === null) return TYPE_NULL;\n  let obj = inputObj;\n  if (useValueOf) {\n    // check for the case where there's a child named 'valueOf' that's not a function\n    // if so, then it's an object...\n    if (typeof inputObj.valueOf === 'function') obj = inputObj.valueOf();\n    else return TYPE_OBJECT;\n  }\n  if (isClass(obj)) return TYPE_CLASS;\n  switch (Object.prototype.toString.call(obj)) {\n    case '[object String]':\n      return TYPE_STRING;\n    case '[object Number]':\n      return TYPE_NUMBER;\n    case '[object Array]':\n      return TYPE_ARRAY;\n    case '[object Boolean]':\n      return TYPE_BOOLEAN;\n    case '[object Null]':\n      return TYPE_NULL;\n    case '[object Object]':\n      // Check if it's an expref.  If it has, it's been\n      // tagged with a jmespathType attr of 'Expref';\n      if (obj.jmespathType === TOK_EXPREF) {\n        return TYPE_EXPREF;\n      }\n      return TYPE_OBJECT;\n    default:\n      return TYPE_OBJECT;\n  }\n}\n\nexport function getTypeName(arg) {\n  return TYPE_NAME_TABLE[getType(arg)];\n}\n\nexport function getTypes(inputObj) {\n  // return the types with and without using valueOf\n  // needed for the cases where we really need an object passed to a function -- not it's value\n  const type1 = getType(inputObj);\n  const type2 = getType(inputObj, false);\n  return [type1, type2];\n}\n\nexport function matchType(actuals, expectedList, argValue, context, toNumber, toString) {\n  const actual = actuals[0];\n  if (argValue?.jmespathType === TOK_EXPREF && expectedList[0] !== TYPE_EXPREF) {\n    throw typeError(`${context} does not accept an expression reference argument.`);\n  }\n\n  if (expectedList.findIndex(\n    type => type === TYPE_ANY || actual === type,\n  ) !== -1\n  ) return argValue;\n  // Can't coerce Objects to any other type,\n  // and cannot coerce anything to a Class\n  let wrongType = false;\n  if (actual === TYPE_OBJECT || (expectedList.length === 1 && expectedList[0] === TYPE_CLASS)) {\n    wrongType = true;\n  }\n  if (actual === TYPE_ARRAY && (expectedList.length === 1 && expectedList[0] === TYPE_OBJECT)) {\n    wrongType = true;\n  }\n  if (expectedList.includes(TYPE_ARRAY_ARRAY)) {\n    if (actual === TYPE_ARRAY) {\n      argValue.forEach(a => {\n        if (!(a instanceof Array)) wrongType = true;\n      });\n      if (!wrongType) return argValue;\n    }\n    wrongType = true;\n  }\n  if (wrongType) {\n    throw typeError(`${context} expected argument to be type ${TYPE_NAME_TABLE[expectedList[0]]} but received type ${TYPE_NAME_TABLE[actual]} instead.`);\n  }\n  // no exact match in the list of possible types, see if we can coerce an array type\n  let expected = -1;\n  if (actual === TYPE_ARRAY) {\n    if (expectedList.includes(TYPE_ARRAY_STRING) && expectedList.includes(TYPE_ARRAY_NUMBER)) {\n      // choose the array type based on the first element\n      if (argValue.length > 0 && typeof argValue[0] === 'string') expected = TYPE_ARRAY_STRING;\n      else expected = TYPE_ARRAY_NUMBER;\n    }\n  }\n  if (expected === -1 && [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(actual)) {\n    expected = expectedList.find(\n      e => [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER, TYPE_ARRAY].includes(e),\n    );\n  }\n  // no match, just take the first type\n  if (expected === -1) [expected] = expectedList;\n  if (expected === TYPE_ANY) return argValue;\n  if (expected === TYPE_ARRAY_STRING\n      || expected === TYPE_ARRAY_NUMBER\n      || expected === TYPE_ARRAY) {\n    if (expected === TYPE_ARRAY) {\n      if (actual === TYPE_ARRAY_NUMBER || actual === TYPE_ARRAY_STRING) return argValue;\n      return argValue === null ? [] : [argValue];\n    }\n    // The expected type can either just be array,\n    // or it can require a specific subtype (array of numbers).\n    const subtype = expected === TYPE_ARRAY_NUMBER ? TYPE_NUMBER : TYPE_STRING;\n    if (actual === TYPE_ARRAY) {\n      // Otherwise we need to check subtypes.\n      // We're going to modify the array, so take a copy\n      const returnArray = argValue.slice();\n      for (let i = 0; i < returnArray.length; i += 1) {\n        const indexType = getTypes(returnArray[i]);\n        returnArray[i] = matchType(\n          indexType,\n          [subtype],\n          returnArray[i],\n          context,\n          toNumber,\n          toString,\n        );\n      }\n      return returnArray;\n    }\n    if ([TYPE_NUMBER, TYPE_STRING, TYPE_NULL, TYPE_BOOLEAN].includes(subtype)) {\n      if (argValue === null) return [];\n      return [matchType(actuals, [subtype], argValue, context, toNumber, toString)];\n    }\n  } else {\n    if (expected === TYPE_NUMBER) {\n      if ([TYPE_STRING, TYPE_BOOLEAN, TYPE_NULL].includes(actual)) return toNumber(argValue);\n      /* TYPE_ARRAY, TYPE_EXPREF, TYPE_OBJECT, TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING */\n      return 0;\n    }\n    if (expected === TYPE_STRING) {\n      if (actual === TYPE_NULL || actual === TYPE_OBJECT) return '';\n      return toString(argValue);\n    }\n    if (expected === TYPE_BOOLEAN) {\n      return !!argValue;\n    }\n    if (expected === TYPE_OBJECT && actuals[1] === TYPE_OBJECT) {\n      return argValue;\n    }\n    if (expected === TYPE_OBJECT && actual === TYPE_NULL) {\n      return {};\n    }\n  }\n  throw typeError(`${context} expected argument to be type ${TYPE_NAME_TABLE[expectedList[0]]} but received type ${TYPE_NAME_TABLE[actual]} instead.`);\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n  matchType, getTypeName, getTypes, getType,\n} from './matchType.js';\nimport dataTypes from './dataTypes.js';\nimport tokenDefinitions from './tokenDefinitions.js';\nimport {\n  isArray, isObject, strictDeepEqual, getValueOf, getProperty, debugAvailable, toBoolean,\n} from './utils.js';\nimport { evaluationError } from './errors.js';\n\nconst {\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_FLATTEN,\n} = tokenDefinitions;\n\nconst {\n  TYPE_STRING,\n  TYPE_ARRAY_STRING,\n  TYPE_ARRAY,\n  TYPE_NUMBER,\n} = dataTypes;\n\nfunction objValues(obj) {\n  return Object.values(obj);\n}\n\nfunction balanceArrayOperands(opLeft, opRight) {\n  if (isArray(opLeft) && isArray(opRight)) {\n    // balance the size of the arrays by padding with nulls\n    const shorter = opLeft.length < opRight.length ? opLeft : opRight;\n    const diff = Math.abs(opLeft.length - opRight.length);\n    shorter.length += diff;\n    shorter.fill(null, shorter.length - diff);\n  }\n}\n\nexport default class TreeInterpreter {\n  constructor(runtime, globals, toNumber, toString, debug, language) {\n    this.runtime = runtime;\n    this.globals = globals;\n    this.toNumber = toNumber;\n    this.toString = toString;\n    this.debug = debug;\n    this.language = language;\n  }\n\n  search(node, value) {\n    return this.visit(node, value);\n  }\n\n  field(node, value) {\n    // we used to check isObject(value) here -- but it is possible for an array-based\n    // object to have properties.  So we'll allow the child check on objects and arrays.\n    if (value !== null && (isObject(value) || isArray(value))) {\n      const field = getProperty(value, node.name);\n      if (field === undefined) {\n        debugAvailable(this.debug, value, node.name);\n        return null;\n      }\n      return field;\n    }\n    debugAvailable(this.debug, value, node.name);\n    return null;\n  }\n\n  visit(n, v) {\n    const visitFunctions = {\n      Identifier: this.field.bind(this),\n      QuotedIdentifier: this.field.bind(this),\n\n      ChainedExpression: (node, value) => {\n        let result = this.visit(node.children[0], value);\n        for (let i = 1; i < node.children.length; i += 1) {\n          result = this.visit(node.children[1], result);\n          if (result === null) return null;\n        }\n        return result;\n      },\n\n      BracketExpression: (node, value) => {\n        const left = this.visit(node.children[0], value);\n        return this.visit(node.children[1], left);\n      },\n\n      Index: (node, value) => {\n        if (isArray(value)) {\n          let index = node.value.value;\n          if (index < 0) {\n            index = value.length + index;\n          }\n          const result = value[index];\n          if (result === undefined) {\n            this.debug.push(`Index: ${index} out of range for array size: ${value.length}`);\n            return null;\n          }\n          return result;\n        }\n        this.debug.push('Left side of index expression must be an array');\n        this.debug.push(`Did you intend a single-element array? if so, use a JSON literal: \\`[${node.value.value}]\\``);\n        return null;\n      },\n\n      Slice: (node, value) => {\n        if (!isArray(value)) {\n          this.debug.push('Slices apply to arrays only');\n          return null;\n        }\n        const sliceParams = node.children.map(param => (param === null ? null : param.value));\n        const [start, stop, step] = this.computeSliceParams(value.length, sliceParams);\n        const result = [];\n        if (step > 0) {\n          for (let i = start; i < stop; i += step) {\n            result.push(value[i]);\n          }\n        } else {\n          for (let i = start; i > stop; i += step) {\n            result.push(value[i]);\n          }\n        }\n        return result;\n      },\n\n      Projection: (node, value) => {\n      // Evaluate left child.\n        const base = this.visit(node.children[0], value);\n        if (!isArray(base)) {\n          if (node.debug === 'Wildcard') {\n            this.debug.push('Bracketed wildcards apply to arrays only');\n          }\n          return null;\n        }\n        const collected = [];\n        base.forEach(b => {\n          const current = this.visit(node.children[1], b);\n          collected.push(current);\n        });\n        return collected;\n      },\n\n      // wildcard: \".*\"\n      ValueProjection: (node, value) => {\n      // Evaluate left child.\n        const projection = this.visit(node.children[0], value);\n        if (!isObject(getValueOf(projection))) {\n          this.debug.push('Chained wildcards apply to objects only');\n          return null;\n        }\n        const collected = [];\n        const values = objValues(projection);\n        values.forEach(val => {\n          const current = this.visit(node.children[1], val);\n          collected.push(current);\n        });\n        return collected;\n      },\n\n      FilterProjection: (node, value) => {\n        const base = this.visit(node.children[0], value);\n        if (!isArray(base)) {\n          this.debug.push('Filter expressions apply to arrays only');\n          return null;\n        }\n        const filtered = base.filter(b => {\n          const matched = this.visit(node.children[2], b);\n          return toBoolean(matched);\n        });\n\n        const finalResults = [];\n        filtered.forEach(f => {\n          const current = this.visit(node.children[1], f);\n          finalResults.push(current);\n        });\n        return finalResults;\n      },\n\n      Comparator: (node, value) => {\n        let first = getValueOf(this.visit(node.children[0], value));\n        let second = getValueOf(this.visit(node.children[1], value));\n\n        if (node.value === '==') return strictDeepEqual(first, second);\n        if (node.value === '!=') return !strictDeepEqual(first, second);\n        if (isObject(first) || isArray(first)) {\n          this.debug.push(`Cannot use comparators with ${getTypeName(first)}`);\n          return false;\n        }\n        if (isObject(second) || isArray(second)) {\n          this.debug.push(`Cannot use comparators with ${getTypeName(second)}`);\n          return false;\n        }\n        const type1 = getType(first);\n        const type2 = getType(second);\n        // if either parameter is a number, we need to do a numeric comparison\n        // javascript will compare this way automatically, but if we explicitly convert\n        // to numbers, we will get debug warnings for non-numeric strings\n        if (type1 === TYPE_NUMBER || type2 === TYPE_NUMBER) {\n          // if toNumber fails, it will populate the debug array\n          // with an appropriate warning\n          first = this.toNumber(first);\n          second = this.toNumber(second);\n          if (first === null || second === null) return false;\n        }\n        if (node.value === '>') return first > second;\n        if (node.value === '>=') return first >= second;\n        if (node.value === '<') return first < second;\n        // if (node.value === '<=)\n        // must be LTE\n        return first <= second;\n      },\n\n      [TOK_FLATTEN]: (node, value) => {\n        const original = this.visit(node.children[0], value);\n        if (!isArray(original)) {\n          this.debug.push('Flatten expressions apply to arrays only. If you want an empty array, use a JSON literal: `[]`');\n          return null;\n        }\n        const merged = [];\n        original.forEach(current => {\n          if (isArray(current)) {\n            merged.push(...current);\n          } else {\n            merged.push(current);\n          }\n        });\n        return merged;\n      },\n\n      Identity: (_node, value) => value,\n\n      ArrayExpression: (node, value) => node.children.map(child => this.visit(child, value)),\n\n      ObjectExpression: (node, value) => {\n        // at one time we used to have this:\n        // if (value === null) return null;\n        // BUT then an expression such as:\n        // values({a: 'aa'})\n        // would return null if the document were `null`\n        // Removing the check means that:\n        // `null`.{a: 'aa'}\n        // returns: {a: 'aa'}\n        // which is a bit odd, but seems correct.\n        const collected = {};\n        node.children.forEach(child => {\n          if (collected[child.name] !== undefined) this.debug.push(`Duplicate key: '${child.name}'`);\n          collected[child.name] = this.visit(child.value, value);\n        });\n        return collected;\n      },\n\n      OrExpression: (node, value) => {\n        let matched = this.visit(node.children[0], value);\n        if (!toBoolean(matched)) matched = this.visit(node.children[1], value);\n        return matched;\n      },\n\n      AndExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n\n        if (!toBoolean(first)) return first;\n        return this.visit(node.children[1], value);\n      },\n\n      AddExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        balanceArrayOperands(first, second);\n        return this.applyOperator(first, second, '+');\n      },\n\n      ConcatenateExpression: (node, value) => {\n        let first = this.visit(node.children[0], value);\n        let second = this.visit(node.children[1], value);\n        balanceArrayOperands(first, second);\n        first = matchType(getTypes(first), [TYPE_STRING, TYPE_ARRAY_STRING], first, 'concatenate', this.toNumber, this.toString);\n        second = matchType(getTypes(second), [TYPE_STRING, TYPE_ARRAY_STRING], second, 'concatenate', this.toNumber, this.toString);\n        return this.applyOperator(first, second, '&');\n      },\n\n      UnionExpression: (node, value) => {\n        let first = this.visit(node.children[0], value);\n        let second = this.visit(node.children[1], value);\n        first = matchType(getTypes(first), [TYPE_ARRAY], first, 'union', this.toNumber, this.toString);\n        second = matchType(getTypes(second), [TYPE_ARRAY], second, 'union', this.toNumber, this.toString);\n        return first.concat(second);\n      },\n\n      SubtractExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        balanceArrayOperands(first, second);\n        return this.applyOperator(first, second, '-');\n      },\n\n      MultiplyExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        balanceArrayOperands(first, second);\n        return this.applyOperator(first, second, '*');\n      },\n\n      DivideExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const second = this.visit(node.children[1], value);\n        balanceArrayOperands(first, second);\n        return this.applyOperator(first, second, '/');\n      },\n\n      NotExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        return !toBoolean(first);\n      },\n\n      UnaryMinusExpression: (node, value) => {\n        const first = this.visit(node.children[0], value);\n        const minus = first * -1;\n        if (Number.isNaN(minus)) {\n          this.debug.push(`Failed to convert \"${first}\" to number`);\n          return 0;\n        }\n        return minus;\n      },\n\n      String: node => node.value,\n\n      Literal: node => node.value,\n\n      Number: node => node.value,\n\n      Integer: node => node.value,\n\n      [TOK_PIPE]: (node, value) => {\n        const left = this.visit(node.children[0], value);\n        return this.visit(node.children[1], left);\n      },\n\n      [TOK_CURRENT]: (_node, value) => value,\n\n      [TOK_GLOBAL]: node => {\n        const result = this.globals[node.name];\n        return result === undefined ? null : result;\n      },\n\n      Function: (node, value) => {\n      // Special case for if()\n      // we need to make sure the results are called only after the condition is evaluated\n      // Otherwise we end up with both results invoked -- which could include side effects\n      // For \"if\", the last parameter to callFunction is false (bResolved) to indicate there's\n      // no point in validating the argument type.\n        if (node.name === 'if') return this.runtime.callFunction(node.name, node.children, value, this, false);\n        const resolvedArgs = node.children.map(child => this.visit(child, value));\n        return this.runtime.callFunction(node.name, resolvedArgs, value, this);\n      },\n\n      ExpressionReference: node => {\n        const [refNode] = node.children;\n        // Tag the node with a specific attribute so the type\n        // checker verify the type.\n        refNode.jmespathType = TOK_EXPREF;\n        return refNode;\n      },\n    };\n    const fn = n && visitFunctions[n.type];\n    return fn(n, v);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  computeSliceParams(arrayLength, sliceParams) {\n    function capSliceRange(arrayLen, actual, stp) {\n      let actualValue = actual;\n      if (actualValue < 0) {\n        actualValue += arrayLen;\n        if (actualValue < 0) {\n          actualValue = stp < 0 ? -1 : 0;\n        }\n      } else if (actualValue >= arrayLen) {\n        actualValue = stp < 0 ? arrayLen - 1 : arrayLen;\n      }\n      return actualValue;\n    }\n\n    let [start, stop, step] = sliceParams;\n    if (step === null) {\n      step = 1;\n    } else if (step === 0) {\n      throw evaluationError('Invalid slice, step cannot be 0');\n    }\n    const stepValueNegative = step < 0;\n\n    if (start === null) {\n      start = stepValueNegative ? arrayLength - 1 : 0;\n    } else {\n      start = capSliceRange(arrayLength, start, step);\n    }\n\n    if (stop === null) {\n      stop = stepValueNegative ? -1 : arrayLength;\n    } else {\n      stop = capSliceRange(arrayLength, stop, step);\n    }\n    return [start, stop, step];\n  }\n\n  applyOperator(first, second, operator) {\n    if (isArray(first) && isArray(second)) {\n      const result = [];\n      for (let i = 0; i < first.length; i += 1) {\n        result.push(this.applyOperator(first[i], second[i], operator));\n      }\n      return result;\n    }\n\n    if (isArray(first)) return first.map(a => this.applyOperator(a, second, operator));\n    if (isArray(second)) return second.map(a => this.applyOperator(first, a, operator));\n\n    if (operator === '&') return first + second;\n    if (operator === '*') return this.toNumber(first) * this.toNumber(second);\n    const n1 = this.toNumber(first);\n    const n2 = this.toNumber(second);\n    if (operator === '+') return n1 + n2;\n    if (operator === '-') return n1 - n2;\n    // if (operator === '/') {\n    // Must be division\n    const result = n1 / n2;\n    if (!Number.isFinite(result)) {\n      throw evaluationError(`Division by zero ${first}/${second}`);\n    }\n    return result;\n  }\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\nimport tokenDefinitions from './tokenDefinitions.js';\nimport { syntaxError } from './errors.js';\n\nconst {\n  TOK_IDENTIFIER,\n  TOK_QUOTEDIDENTIFIER,\n  TOK_RBRACKET,\n  TOK_RPAREN,\n  TOK_COMMA,\n  TOK_COLON,\n  TOK_CONCATENATE,\n  TOK_RBRACE,\n  TOK_NUMBER,\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_OR,\n  TOK_COMPARATOR,\n  TOK_AND,\n  TOK_ADD,\n  TOK_SUBTRACT,\n  TOK_UNARY_MINUS,\n  TOK_DIVIDE,\n  TOK_UNION,\n  TOK_FLATTEN,\n  TOK_STAR,\n  TOK_FILTER,\n  TOK_DOT,\n  TOK_NOT,\n  TOK_LBRACE,\n  TOK_LBRACKET,\n  TOK_LPAREN,\n  TOK_JSON,\n  TOK_STRING,\n  TOK_INT,\n} = tokenDefinitions;\n\n// The \"&\", \"[\", \"<\", \">\" tokens\n// are not in basicToken because\n// there are two token variants\n// (\"&&\", \"[?\", \"<=\", \">=\").  This is specially handled\n// below.\n\nconst basicTokens = {\n  '.': TOK_DOT,\n  ',': TOK_COMMA,\n  ':': TOK_COLON,\n  '{': TOK_LBRACE,\n  '}': TOK_RBRACE,\n  ']': TOK_RBRACKET,\n  '(': TOK_LPAREN,\n  ')': TOK_RPAREN,\n  '@': TOK_CURRENT,\n};\n\nconst globalStartToken = '$';\nconst operatorStartToken = {\n  '<': true,\n  '>': true,\n  '=': true,\n  '!': true,\n};\n\nconst skipChars = {\n  ' ': true,\n  '\\t': true,\n  '\\n': true,\n};\n\nfunction isAlphaNum(ch) {\n  return (ch >= 'a' && ch <= 'z')\n    || (ch >= 'A' && ch <= 'Z')\n    || (ch >= '0' && ch <= '9')\n    || ch === '_';\n}\n\nfunction isIdentifier(stream, pos) {\n  const ch = stream[pos];\n  // $ is special -- it's allowed to be part of an identifier if it's the first character\n  // return whether character 'isAlpha'\n  return ch === '$'\n    || (ch >= 'a' && ch <= 'z')\n    || (ch >= 'A' && ch <= 'Z')\n    || ch === '_';\n}\n\nexport default class Lexer {\n  constructor(allowedGlobalNames = [], debug = []) {\n    this._allowedGlobalNames = allowedGlobalNames;\n    this.debug = debug;\n  }\n\n  tokenize(stream) {\n    const tokens = [];\n    this._current = 0;\n    let start;\n    let identifier;\n    let token;\n    while (this._current < stream.length) {\n      const prev = tokens.length ? tokens.slice(-1)[0].type : null;\n\n      if (this._isGlobal(prev, stream, this._current)) {\n        tokens.push(this._consumeGlobal(stream));\n      } else if (isIdentifier(stream, this._current)) {\n        start = this._current;\n        identifier = this._consumeUnquotedIdentifier(stream);\n        tokens.push({\n          type: TOK_IDENTIFIER,\n          value: identifier,\n          start,\n        });\n      } else if (this._isNumber(stream)) {\n        token = this._consumeNumber(stream);\n        tokens.push(token);\n      } else if (basicTokens[stream[this._current]] !== undefined) {\n        tokens.push({\n          type: basicTokens[stream[this._current]],\n          value: stream[this._current],\n          start: this._current,\n        });\n        this._current += 1;\n      } else if (stream[this._current] === '-' && ![TOK_GLOBAL, TOK_CURRENT, TOK_NUMBER, TOK_INT, TOK_RPAREN, TOK_IDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_RBRACKET, TOK_JSON, TOK_STRING].includes(prev)) {\n        token = this._consumeUnaryMinus(stream);\n        tokens.push(token);\n      } else if (stream[this._current] === '[') {\n        // No need to increment this._current.  This happens\n        // in _consumeLBracket\n        token = this._consumeLBracket(stream);\n        tokens.push(token);\n      } else if (stream[this._current] === \"'\") {\n        start = this._current;\n        identifier = this._consumeQuotedIdentifier(stream);\n        tokens.push({\n          type: TOK_QUOTEDIDENTIFIER,\n          value: identifier,\n          start,\n        });\n      } else if (stream[this._current] === '\"') {\n        start = this._current;\n        identifier = this._consumeRawStringLiteral(stream);\n        tokens.push({\n          type: TOK_STRING,\n          value: identifier,\n          start,\n        });\n      } else if (stream[this._current] === '`') {\n        start = this._current;\n        const json = this._consumeJson(stream);\n        tokens.push({\n          type: TOK_JSON,\n          value: json,\n          start,\n        });\n      } else if (operatorStartToken[stream[this._current]] !== undefined) {\n        tokens.push(this._consumeOperator(stream));\n      } else if (skipChars[stream[this._current]] !== undefined) {\n        // Ignore whitespace.\n        this._current += 1;\n      } else if (stream[this._current] === '&') {\n        start = this._current;\n        this._current += 1;\n        if (stream[this._current] === '&') {\n          this._current += 1;\n          tokens.push({ type: TOK_AND, value: '&&', start });\n        } else if (prev === TOK_COMMA || prev === TOK_LPAREN) {\n          // based on previous token we'll know if this & is a JMESPath expression-type\n          // or if it's a concatenation operator\n          // if we're a function arg then it's an expression-type\n          tokens.push({ type: TOK_EXPREF, value: '&', start });\n        } else {\n          tokens.push({ type: TOK_CONCATENATE, value: '&', start });\n        }\n      } else if (stream[this._current] === '~') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_UNION, value: '~', start });\n      } else if (stream[this._current] === '+') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_ADD, value: '+', start });\n      } else if (stream[this._current] === '-') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_SUBTRACT, value: '-', start });\n      } else if (stream[this._current] === '*') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_STAR, value: '*', start });\n      } else if (stream[this._current] === '/') {\n        start = this._current;\n        this._current += 1;\n        tokens.push({ type: TOK_DIVIDE, value: '/', start });\n      } else if (stream[this._current] === '|') {\n        start = this._current;\n        this._current += 1;\n        if (stream[this._current] === '|') {\n          this._current += 1;\n          tokens.push({ type: TOK_OR, value: '||', start });\n        } else {\n          tokens.push({ type: TOK_PIPE, value: '|', start });\n        }\n      } else {\n        throw syntaxError(`Unknown character:${stream[this._current]}`);\n      }\n    }\n    return tokens;\n  }\n\n  _consumeUnquotedIdentifier(stream) {\n    const start = this._current;\n    this._current += 1;\n    while (\n      this._current < stream.length\n      && (stream[this._current] === '$' || isAlphaNum(stream[this._current]))\n    ) {\n      this._current += 1;\n    }\n    return stream.slice(start, this._current);\n  }\n\n  _consumeQuotedIdentifier(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    let foundNonAlpha = !isIdentifier(stream, start + 1);\n    while (stream[this._current] !== \"'\" && this._current < maxLength) {\n      // You can escape a single quote and you can escape an escape.\n      let current = this._current;\n      if (!isAlphaNum(stream[current])) foundNonAlpha = true;\n      if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n        || stream[current + 1] === \"'\")) {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    this._current += 1;\n    const val = stream.slice(start, this._current);\n    // Check for unnecessary single quotes.\n    // json-formula uses single quotes to escape characters that don't belong in names.\n    // e.g. \"purchase-order\".address\n    // If we find a single-quoted entity with spaces or all legal characters, issue a warning\n    try {\n      if (!foundNonAlpha) {\n        this.debug.push(`Suspicious quotes: ${val}`);\n        this.debug.push(`Did you intend a literal? \"${val.replace(/'/g, '')}\"?`);\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) { }\n    // we want to do all the escape-processing that JSON does ...\n    // except that JSON expects to escape double quotes, and our identifiers\n    // escape single quotes.\n    return JSON.parse(`\"${val.substring(1, val.length - 1).replace(/\\\\'/g, \"'\")}\"`);\n  }\n\n  _consumeRawStringLiteral(stream) {\n    const start = this._current;\n    this._current += 1;\n    const maxLength = stream.length;\n    while (stream[this._current] !== '\"' && this._current < maxLength) {\n      // You can escape a double quote and you can escape an escape.\n      let current = this._current;\n      if (stream[current] === '\\\\' && (stream[current + 1] === '\\\\'\n        || stream[current + 1] === '\"')) {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    this._current += 1;\n    const literal = stream.slice(start + 1, this._current - 1);\n    if (this._current > maxLength) {\n      throw syntaxError(`Unterminated string literal at ${start}, \"${literal}`);\n    }\n    try {\n      return JSON.parse(`\"${literal}\"`);\n    } catch (_e) {\n      throw syntaxError(`Invalid string literal: ${literal}`);\n    }\n  }\n\n  _isNumber(stream) {\n    // if we see the first two characters are either a digit or radix, then we have a number\n    let ch = stream[this._current];\n    if (ch >= '0' && ch <= '9') return true;\n    if (ch !== '.') return false;\n    if (this._current === stream.length) return false;\n    ch = stream[this._current + 1];\n    return ch >= '0' && ch <= '9';\n  }\n\n  _consumeNumber(stream) {\n    const start = this._current;\n    const num = stream.slice(start);\n    const match = num.match(/^[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?/);\n    if (!match) throw syntaxError(`Invalid number: ${num}`);\n    const n = match[0];\n    this._current += n.length;\n    let value;\n    if (n.includes('.') || n.toLowerCase().includes('e')) {\n      value = parseFloat(n);\n      return { type: TOK_NUMBER, value, start };\n    }\n    value = parseInt(n, 10);\n    return { type: TOK_INT, value, start };\n  }\n\n  _consumeUnaryMinus() {\n    const start = this._current;\n    this._current += 1;\n    return { type: TOK_UNARY_MINUS, value: '-', start };\n  }\n\n  _consumeLBracket(stream) {\n    const start = this._current;\n    this._current += 1;\n    if (stream[this._current] === '?') {\n      this._current += 1;\n      return { type: TOK_FILTER, value: '[?', start };\n    }\n    if (stream[this._current] === ']') {\n      this._current += 1;\n      return { type: TOK_FLATTEN, value: '[]', start };\n    }\n    return { type: TOK_LBRACKET, value: '[', start };\n  }\n\n  _isGlobal(prev, stream, pos) {\n    // global tokens occur only at the start of an expression\n    if (prev !== null && prev === TOK_DOT) return false;\n    const ch = stream[pos];\n    if (ch !== globalStartToken) return false;\n    // $ is special -- it's allowed to be part of an identifier if it's the first character\n    let i = pos + 1;\n    while (i < stream.length && (stream[i] === '$' || isAlphaNum(stream[i]))) i += 1;\n    const global = stream.slice(pos, i);\n    return this._allowedGlobalNames.includes(global);\n  }\n\n  _consumeGlobal(stream) {\n    const start = this._current;\n    this._current += 1;\n    while (this._current < stream.length\n      && (stream[this._current] === '$' || isAlphaNum(stream[this._current]))) this._current += 1;\n    const global = stream.slice(start, this._current);\n\n    return { type: TOK_GLOBAL, name: global, start };\n  }\n\n  _consumeOperator(stream) {\n    const start = this._current;\n    const startingChar = stream[start];\n    this._current += 1;\n    if (startingChar === '!') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_COMPARATOR, value: '!=', start };\n      }\n      return { type: TOK_NOT, value: '!', start };\n    }\n    if (startingChar === '<') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_COMPARATOR, value: '<=', start };\n      }\n      if (stream[this._current] === '>') {\n        this._current += 1;\n        return { type: TOK_COMPARATOR, value: '!=', start };\n      }\n      return { type: TOK_COMPARATOR, value: '<', start };\n    }\n    if (startingChar === '>') {\n      if (stream[this._current] === '=') {\n        this._current += 1;\n        return { type: TOK_COMPARATOR, value: '>=', start };\n      }\n      return { type: TOK_COMPARATOR, value: '>', start };\n    }\n    // startingChar is '='\n    if (stream[this._current] === '=') {\n      this._current += 1;\n    }\n    return { type: TOK_COMPARATOR, value: '==', start };\n  }\n\n  _consumeJson(stream) {\n    this._current += 1;\n    const start = this._current;\n    const maxLength = stream.length;\n    while (stream[this._current] !== '`' && this._current < maxLength) {\n      let current = this._current;\n      if (stream[current] === '\\\\' && stream[current + 1] === '`') {\n        current += 2;\n      } else {\n        current += 1;\n      }\n      this._current = current;\n    }\n    let literalString = stream.slice(start, this._current).trimStart();\n    literalString = literalString.replaceAll('\\\\`', '`');\n    // +1 gets us to the ending \"`\", +1 to move on to the next char.\n    this._current += 1;\n    if (this._current > maxLength) {\n      throw syntaxError(`Unterminated JSON literal at ${start}: \\`${literalString}`);\n    }\n\n    return JSON.parse(literalString);\n  }\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport Lexer from './Lexer.js';\nimport tokenDefinitions from './tokenDefinitions.js';\nimport { syntaxError } from './errors.js';\n\n/* eslint-disable no-underscore-dangle */\nconst {\n  TOK_JSON,\n  TOK_COLON,\n  TOK_EOF,\n  TOK_IDENTIFIER,\n  TOK_QUOTEDIDENTIFIER,\n  TOK_RBRACKET,\n  TOK_RPAREN,\n  TOK_COMMA,\n  TOK_CONCATENATE,\n  TOK_RBRACE,\n  TOK_NUMBER,\n  TOK_CURRENT,\n  TOK_GLOBAL,\n  TOK_EXPREF,\n  TOK_PIPE,\n  TOK_OR,\n  TOK_AND,\n  TOK_ADD,\n  TOK_SUBTRACT,\n  TOK_UNARY_MINUS,\n  TOK_MULTIPLY,\n  TOK_DIVIDE,\n  TOK_UNION,\n  TOK_COMPARATOR,\n  TOK_FLATTEN,\n  TOK_STAR,\n  TOK_FILTER,\n  TOK_DOT,\n  TOK_NOT,\n  TOK_LBRACE,\n  TOK_LBRACKET,\n  TOK_LPAREN,\n  TOK_STRING,\n  TOK_INT,\n} = tokenDefinitions;\n\nconst bindingPower = {\n  [TOK_EOF]: 0,\n  [TOK_IDENTIFIER]: 0,\n  [TOK_QUOTEDIDENTIFIER]: 0,\n  [TOK_RBRACKET]: 0,\n  [TOK_RPAREN]: 0,\n  [TOK_COMMA]: 0,\n  [TOK_RBRACE]: 0,\n  [TOK_NUMBER]: 0,\n  [TOK_INT]: 0,\n  [TOK_CURRENT]: 0,\n  [TOK_GLOBAL]: 0,\n  [TOK_EXPREF]: 0,\n  [TOK_PIPE]: 1,\n  [TOK_OR]: 2,\n  [TOK_AND]: 3,\n  [TOK_COMPARATOR]: 4,\n  [TOK_CONCATENATE]: 5,\n  [TOK_ADD]: 6,\n  [TOK_SUBTRACT]: 6,\n  [TOK_UNION]: 6,\n  [TOK_MULTIPLY]: 7,\n  [TOK_DIVIDE]: 7,\n  [TOK_NOT]: 8,\n  [TOK_UNARY_MINUS]: 8,\n  [TOK_FLATTEN]: 10,\n  [TOK_STAR]: 20,\n  [TOK_FILTER]: 21,\n  [TOK_DOT]: 40,\n  [TOK_LBRACE]: 50,\n  [TOK_LBRACKET]: 55,\n  [TOK_LPAREN]: 60,\n};\n\nexport default class Parser {\n  constructor(allowedGlobalNames = []) {\n    this._allowedGlobalNames = allowedGlobalNames;\n  }\n\n  parse(expression, debug) {\n    this.debug = debug;\n    this._loadTokens(expression);\n    this.index = 0;\n    const ast = this.expression(0);\n    if (this._lookahead(0) !== TOK_EOF) {\n      const t = this._lookaheadToken(0);\n      throw syntaxError(`Unexpected token type: ${t.type}, value: ${t.value}`);\n    }\n    return ast;\n  }\n\n  _loadTokens(expression) {\n    const lexer = new Lexer(this._allowedGlobalNames, this.debug);\n    const tokens = lexer.tokenize(expression);\n    tokens.push({ type: TOK_EOF, value: '', start: expression.length });\n    this.tokens = tokens;\n  }\n\n  expression(rbp) {\n    const leftToken = this._lookaheadToken(0);\n    this._advance();\n    let left = this.nud(leftToken);\n    let currentToken = this._lookaheadToken(0, left);\n    while (rbp < bindingPower[currentToken.type]) {\n      this._advance();\n      left = this.led(currentToken, left);\n      currentToken = this._lookaheadToken(0, left);\n    }\n    return left;\n  }\n\n  _lookahead(number) {\n    return this.tokens[this.index + number].type;\n  }\n\n  _lookaheadToken(number, previous = {}) {\n    const next = this.tokens[this.index + number];\n    // disambiguate multiply and star\n    if (next.type === TOK_STAR) {\n      if (![\n        undefined,\n        TOK_LBRACKET,\n        TOK_DOT,\n        TOK_PIPE,\n        TOK_AND,\n        TOK_OR,\n        TOK_COMMA,\n        TOK_NOT,\n        TOK_MULTIPLY,\n        TOK_ADD,\n        TOK_SUBTRACT,\n        TOK_DIVIDE,\n        TOK_LPAREN,\n        TOK_CONCATENATE,\n        TOK_UNION,\n        TOK_COMPARATOR].includes(previous.type)) {\n        next.type = TOK_MULTIPLY;\n      }\n    }\n\n    return next;\n  }\n\n  _advance() {\n    this.index += 1;\n  }\n\n  _lookAheadIndex() {\n    let idx = 0;\n    if (this._lookahead(idx) === TOK_UNARY_MINUS) idx += 1;\n    if (this._lookahead(idx) === TOK_INT) idx += 1;\n    if (this._lookahead(idx) === TOK_RBRACKET\n      || this._lookahead(idx) === TOK_COLON) return true;\n    return false;\n  }\n\n  _getIndex() {\n    return this.index;\n  }\n\n  _setIndex(index) {\n    this.index = index;\n  }\n\n  // eslint-disable-next-line consistent-return\n  nud(token) {\n    let left;\n    let right;\n    let expression;\n    let node;\n    let args;\n    switch (token.type) {\n      case TOK_STRING:\n        return { type: 'String', value: token.value };\n      case TOK_JSON:\n        return { type: 'Literal', value: token.value };\n      case TOK_NUMBER:\n        return { type: 'Number', value: token.value };\n      case TOK_INT:\n        return { type: 'Integer', value: token.value };\n      case TOK_IDENTIFIER:\n        return { type: 'Identifier', name: token.value };\n      case TOK_QUOTEDIDENTIFIER:\n        node = { type: 'QuotedIdentifier', name: token.value };\n        return node;\n      case TOK_NOT:\n        right = this.expression(bindingPower.Not);\n        return { type: 'NotExpression', children: [right] };\n      case TOK_UNARY_MINUS:\n        right = this.expression(bindingPower.UnaryMinus);\n        return { type: 'UnaryMinusExpression', children: [right] };\n      case TOK_STAR:\n        left = { type: 'Identity' };\n        if (this._lookahead(0) === TOK_RBRACKET) {\n          // This can happen in a ArrayExpression,\n          // [a, b, *]\n          right = { type: 'Identity' };\n        } else {\n          right = this._parseProjectionRHS(bindingPower.Star);\n        }\n        return { type: 'ValueProjection', children: [left, right] };\n      case TOK_FILTER:\n        return this.led(token, { type: 'Identity' });\n      case TOK_LBRACE:\n        return this._parseObjectExpression();\n      case TOK_FLATTEN:\n        left = { type: TOK_FLATTEN, children: [{ type: 'Identity' }] };\n        right = this._parseProjectionRHS(bindingPower.Flatten);\n        return { type: 'Projection', children: [left, right] };\n      case TOK_LBRACKET:\n        if (this._lookAheadIndex()) {\n          right = this._parseIndexExpression();\n          return this._projectIfSlice({ type: 'Identity' }, right);\n        }\n        if (this._lookahead(0) === TOK_STAR && this._lookahead(1) === TOK_RBRACKET) {\n          this._advance();\n          this._advance();\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return {\n            type: 'Projection',\n            children: [{ type: 'Identity' }, right],\n            debug: 'Wildcard',\n          };\n        }\n        return this._parseArrayExpression();\n\n      case TOK_CURRENT:\n        return { type: TOK_CURRENT };\n      case TOK_GLOBAL:\n        return { type: TOK_GLOBAL, name: token.name };\n      case TOK_EXPREF:\n        expression = this.expression(bindingPower.Expref);\n        return { type: 'ExpressionReference', children: [expression] };\n      case TOK_LPAREN:\n        args = [];\n        while (this._lookahead(0) !== TOK_RPAREN) {\n          expression = this.expression(0);\n          args.push(expression);\n        }\n        this._match(TOK_RPAREN);\n        return args[0];\n      default:\n        this._errorToken(token);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  led(token, left) {\n    let condition;\n    let right;\n    let name;\n    let args;\n    let node;\n    let rbp;\n    let leftNode;\n    let rightNode;\n    const tokenName = token.type;\n    switch (tokenName) {\n      case TOK_CONCATENATE:\n        right = this.expression(bindingPower.Concatenate);\n        return { type: 'ConcatenateExpression', children: [left, right] };\n      case TOK_DOT:\n        rbp = bindingPower.Dot;\n        if (this._lookahead(0) !== TOK_STAR) {\n          right = this._parseDotRHS(rbp);\n          return { type: 'ChainedExpression', children: [left, right] };\n        }\n        // Creating a projection.\n        this._advance();\n        right = this._parseProjectionRHS(rbp);\n        return { type: 'ValueProjection', children: [left, right] };\n      case TOK_PIPE:\n        right = this.expression(bindingPower.Pipe);\n        return { type: TOK_PIPE, children: [left, right] };\n      case TOK_OR:\n        right = this.expression(bindingPower.Or);\n        return { type: 'OrExpression', children: [left, right] };\n      case TOK_AND:\n        right = this.expression(bindingPower.And);\n        return { type: 'AndExpression', children: [left, right] };\n      case TOK_ADD:\n        right = this.expression(bindingPower.Add);\n        return { type: 'AddExpression', children: [left, right] };\n      case TOK_SUBTRACT:\n        right = this.expression(bindingPower.Subtract);\n        return { type: 'SubtractExpression', children: [left, right] };\n      case TOK_MULTIPLY:\n        right = this.expression(bindingPower.Multiply);\n        return { type: 'MultiplyExpression', children: [left, right] };\n      case TOK_DIVIDE:\n        right = this.expression(bindingPower.Divide);\n        return { type: 'DivideExpression', children: [left, right] };\n      case TOK_UNION:\n        right = this.expression(bindingPower.Union);\n        return { type: 'UnionExpression', children: [left, right] };\n      case TOK_LPAREN:\n        if (left.type !== TOK_IDENTIFIER) {\n          throw syntaxError('Bad function syntax. Parenthesis must be preceded by an unquoted identifier');\n        }\n        name = left.name;\n        args = this._parseFunctionArgs();\n        node = { type: 'Function', name, children: args };\n        return node;\n      case TOK_FILTER:\n        condition = this.expression(0);\n        this._match(TOK_RBRACKET);\n        right = this._parseProjectionRHS(bindingPower.Filter);\n        return { type: 'FilterProjection', children: [left, right, condition] };\n      case TOK_FLATTEN:\n        leftNode = { type: TOK_FLATTEN, children: [left] };\n        rightNode = this._parseProjectionRHS(bindingPower.Flatten);\n        return { type: 'Projection', children: [leftNode, rightNode] };\n      case TOK_COMPARATOR:\n        return this._parseComparator(left, token);\n      case TOK_LBRACKET:\n        if (this._lookahead(0) === TOK_STAR\n            && this._lookahead(1) === TOK_RBRACKET) {\n          this._advance();\n          this._advance();\n          right = this._parseProjectionRHS(bindingPower.Star);\n          return { type: 'Projection', children: [left, right], debug: 'Wildcard' };\n        }\n        right = this._parseIndexExpression();\n        return this._projectIfSlice(left, right);\n      default:\n        this._errorToken(token);\n    }\n  }\n\n  _match(tokenType) {\n    const token = this._lookaheadToken(0);\n    if (token.type === tokenType) {\n      this._advance();\n      return token;\n    }\n    throw syntaxError(`Expected ${tokenType}, got: ${token.type}`);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _errorToken(token) {\n    throw syntaxError(`Unexpected token (${\n      token.type}): \"${\n      token.value || token.name}\"`);\n  }\n\n  _parseFunctionArgs() {\n    let firstExpression = true;\n    const args = [];\n    while (this._lookahead(0) !== TOK_RPAREN) {\n      if (!firstExpression) {\n        this._match(TOK_COMMA);\n      }\n      args.push(this.expression(0));\n      firstExpression = false;\n    }\n    this._match(TOK_RPAREN);\n    return args;\n  }\n\n  _parseSignedInt() {\n    const first = this._lookaheadToken(0);\n    if (first.type === TOK_UNARY_MINUS) {\n      this._advance();\n      const value = this._match(TOK_INT);\n      return {\n        type: 'SignedInt',\n        value: -value.value,\n      };\n    }\n    if (first.type !== TOK_INT) this._errorToken(first);\n    this._advance();\n    return {\n      type: 'SignedInt',\n      value: first.value,\n    };\n  }\n\n  _parseIndexExpression() {\n    const oldIndex = this._getIndex();\n    if (this._lookahead(0) === TOK_COLON) {\n      return this._parseSliceExpression();\n    }\n    // look ahead of the first expression to determine the type\n    const first = this._parseSignedInt();\n    const token = this._lookahead(0);\n    if (token === TOK_COLON) {\n      // now that we know the type revert back to the old position and parse\n      this._setIndex(oldIndex);\n      return this._parseSliceExpression();\n    }\n    this._match(TOK_RBRACKET);\n    return {\n      type: 'Index',\n      value: first,\n    };\n  }\n\n  _projectIfSlice(left, right) {\n    const indexExpr = { type: 'BracketExpression', children: [left, right] };\n    if (right.type === 'Slice') {\n      return {\n        type: 'Projection',\n        children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)],\n      };\n    }\n    return indexExpr;\n  }\n\n  _parseSliceExpression() {\n    // [start:end:step] where each part is optional, as well as the last\n    // colon.\n    const parts = [null, null, null];\n    let index = 0;\n    let currentToken = this._lookahead(0);\n    while (currentToken !== TOK_RBRACKET && index < 3) {\n      if (currentToken === TOK_COLON && index < 2) { // there can't be more than 2 colons\n        index += 1;\n        this._advance();\n      } else {\n        parts[index] = this._parseSignedInt();\n        // check next token to be either colon or rbracket\n        const t = this._lookahead(0);\n        if (t !== TOK_COLON && t !== TOK_RBRACKET) {\n          throw syntaxError(`Unexpected token: ${\n            t.value}(${t.type})`);\n        }\n      }\n      currentToken = this._lookahead(0);\n    }\n    this._match(TOK_RBRACKET);\n    return {\n      type: 'Slice',\n      children: parts,\n    };\n  }\n\n  _parseComparator(left, comparator) {\n    const right = this.expression(bindingPower[comparator.type]);\n    return { type: 'Comparator', value: comparator.value, children: [left, right] };\n  }\n\n  _parseDotRHS(rbp) {\n    const lookahead = this._lookahead(0);\n    const exprTokens = [TOK_IDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];\n    if (exprTokens.indexOf(lookahead) >= 0) {\n      return this.expression(rbp);\n    }\n    if (lookahead === TOK_LBRACKET) {\n      this._match(TOK_LBRACKET);\n      return this._parseArrayExpression();\n    }\n    if (lookahead === TOK_LBRACE) {\n      this._match(TOK_LBRACE);\n      return this._parseObjectExpression();\n    }\n    throw syntaxError('Expecting one of: \"*\", \"[\", \"{\", name or quoted name after a dot');\n  }\n\n  _parseProjectionRHS(rbp) {\n    let right;\n    const next = this._lookaheadToken(0, { type: TOK_STAR });\n    if (bindingPower[next.type] <= bindingPower[TOK_FLATTEN]) {\n      right = { type: 'Identity' };\n    } else if (next.type === TOK_LBRACKET) {\n      right = this.expression(rbp);\n    } else if (next.type === TOK_FILTER) {\n      right = this.expression(rbp);\n    } else if (next.type === TOK_DOT) {\n      this._match(TOK_DOT);\n      right = this._parseDotRHS(rbp);\n    } else {\n      throw syntaxError(`Unexpected token: ${next.value}(${next.type})`);\n    }\n    return right;\n  }\n\n  _parseArrayExpression() {\n    const expressions = [];\n    while (this._lookahead(0) !== TOK_RBRACKET) {\n      const expression = this.expression(0);\n      expressions.push(expression);\n      if (this._lookahead(0) === TOK_COMMA) {\n        this._match(TOK_COMMA);\n        if (this._lookahead(0) === TOK_RBRACKET) {\n          throw syntaxError('Unexpected token Rbracket');\n        }\n      }\n    }\n    this._match(TOK_RBRACKET);\n    return { type: 'ArrayExpression', children: expressions };\n  }\n\n  _parseObjectExpression() {\n    const pairs = [];\n    const identifierTypes = [TOK_IDENTIFIER, TOK_QUOTEDIDENTIFIER];\n    let keyToken; let keyName; let value; let\n      node;\n    if (this._lookahead(0) === TOK_RBRACE) {\n      this.debug.push('To create an empty object, use a JSON literal: `{}`');\n      throw syntaxError('An empty object expression is not allowed');\n    }\n    for (;;) {\n      keyToken = this._lookaheadToken(0);\n      if (identifierTypes.indexOf(keyToken.type) < 0) {\n        throw syntaxError(`Expecting an identifier token, got: ${\n          keyToken.type}`);\n      }\n      keyName = keyToken.value;\n      this._advance();\n      this._match(TOK_COLON);\n      value = this.expression(0);\n      node = { type: 'KeyValuePair', name: keyName, value };\n      pairs.push(node);\n      if (this._lookahead(0) === TOK_COMMA) {\n        this._match(TOK_COMMA);\n      } else if (this._lookahead(0) === TOK_RBRACE) {\n        this._match(TOK_RBRACE);\n        break;\n      }\n    }\n    return { type: 'ObjectExpression', children: pairs };\n  }\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\nimport dataTypes from './dataTypes.js';\nimport {\n  getProperty, debugAvailable, toBoolean, strictDeepEqual,\n} from './utils.js';\nimport { evaluationError, functionError, typeError } from './errors.js';\n\nfunction round(num, digits) {\n  const precision = 10 ** digits;\n  return Math.round(num * precision) / precision;\n}\n\nconst MS_IN_DAY = 24 * 60 * 60 * 1000;\n\nfunction getDateObj(dateNum) {\n  return new Date(Math.round(dateNum * MS_IN_DAY));\n}\n\nfunction getDateNum(dateObj) {\n  return dateObj / MS_IN_DAY;\n}\n\nfunction validNumber(n, context) {\n  if (Number.isNaN(n) || !Number.isFinite(n)) {\n    throw evaluationError(`Call to \"${context}()\" resulted in an invalid number`);\n  }\n  return n;\n}\n\nexport default function functions(\n  runtime,\n  isObject,\n  isArray,\n  toNumber,\n  getType,\n  valueOf,\n  toString,\n  debug,\n) {\n  const {\n    TYPE_NUMBER,\n    TYPE_ANY,\n    TYPE_STRING,\n    TYPE_ARRAY,\n    TYPE_OBJECT,\n    TYPE_BOOLEAN,\n    TYPE_EXPREF,\n    TYPE_NULL,\n    TYPE_ARRAY_NUMBER,\n    TYPE_ARRAY_STRING,\n  } = dataTypes;\n\n  function toInteger(num) {\n    let n = valueOf(num);\n    // functions that require an integer parameter will have declared\n    // the parameters as a number, so any strings will have already been\n    // converted to number before the function call.\n    // However, a few functions accept a string | integer. Attempt to convert\n    // to integer in these cases, but failure isn't an error.\n    if (typeof n === 'string') n = toNumber(n);\n    n = Math.trunc(num);\n    if (Number.isNaN(n)) return num;\n    return n;\n  }\n\n  const functionMap = {\n    // name: [function, <signature>]\n    // The <signature> can be:\n    //\n    // {\n    //   args: [[type1, type2], [type1, type2]],\n    //   variadic: true|false\n    // }\n    //\n    // Each arg in the arg list is a list of valid types\n    // (if the function is overloaded and supports multiple\n    // types.  If the type is \"any\" then no type checking\n    // occurs on the argument.  Variadic is optional\n    // and if not provided is assumed to be false.\n    /**\n     * Find the absolute (non-negative) value of the provided argument `value`.\n     * @param {number} value a numeric value\n     * @return {number} If `value < 0`, returns `-value`, otherwise returns `value`\n     * @function abs\n     * @example\n     * abs(-1) // returns 1\n     */\n    abs: {\n      _func: resolvedArgs => Math.abs(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n    /**\n     * Compute the inverse cosine (in radians) of a number.\n     * @param {number} cosine A number between -1 and 1, inclusive,\n     * representing the angle's cosine value.\n     * @return {number} The inverse cosine angle in radians between 0 and PI\n     * @function acos\n     * @example\n     * acos(0) => 1.5707963267948966\n     */\n    acos: {\n      _func: resolvedArgs => validNumber(Math.acos(resolvedArgs[0]), 'acos'),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Finds the logical AND result of all parameters.\n     * If the parameters are not boolean they will be <<_type_coercion_rules,cast to boolean>>.\n     * Note the related <<_and_operator, And Operator>>.\n     * @param {any} firstOperand logical expression\n     * @param {...any} [additionalOperands] any number of additional expressions\n     * @returns {boolean} The logical result of applying AND to all parameters\n     * @example\n     * and(10 > 8, length(\"foo\") < 5) // returns true\n     * and(`null`, length(\"foo\") < 5) // returns false\n     * @function and\n     */\n    and: {\n      _func: resolvedArgs => {\n        let result = toBoolean(valueOf(resolvedArgs[0]));\n        resolvedArgs.slice(1).forEach(arg => {\n          result = result && toBoolean(valueOf(arg));\n        });\n        return result;\n      },\n      _signature: [{ types: [dataTypes.TYPE_ANY], variadic: true }],\n    },\n\n    /**\n     * Compute the inverse sine (in radians) of a number.\n     * @param {number} sine A number between -1 and 1, inclusive,\n     * representing the angle's sine value.\n     * @return {number} The inverse sine angle in radians between -PI/2 and PI/2\n     * @function asin\n     * @example\n     * Math.asin(0) => 0\n     */\n    asin: {\n      _func: resolvedArgs => validNumber(Math.asin(resolvedArgs[0]), 'asin'),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Compute the angle in the plane (in radians) between the positive\n     * x-axis and the ray from (0, 0) to the point (x, y)\n     * @param {number} y The y coordinate of the point\n     * @param {number} x The x coordinate of the point\n     * @return {number} The angle in radians (between -PI and PI),\n     * between the positive x-axis and the ray from (0, 0) to the point (x, y).\n     * @function atan2\n     * @example\n     * atan2(20,10) => 1.1071487177940904\n     */\n    atan2: {\n      _func: resolvedArgs => Math.atan2(resolvedArgs[0], resolvedArgs[1]),\n      _signature: [\n        { types: [TYPE_NUMBER] },\n        { types: [TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Finds the average of the elements in an array.\n     * If the array is empty, an evaluation error is thrown\n     * @param {number[]} elements array of numeric values\n     * @return {number} average value\n     * @function avg\n     * @example\n     * avg([1, 2, 3]) // returns 2\n     */\n    avg: {\n      _func: resolvedArgs => {\n        let sum = 0;\n        const inputArray = resolvedArgs[0];\n        if (inputArray.length === 0) throw evaluationError('avg() requires at least one argument');\n        inputArray.forEach(a => {\n          sum += a;\n        });\n        return sum / inputArray.length;\n      },\n      _signature: [{ types: [TYPE_ARRAY_NUMBER] }],\n    },\n\n    /**\n     * Generates a lower-case string of the `input` string using locale-specific mappings.\n     * e.g. Strings with German letter <span>&#223;</span> (eszett) can be compared to \"ss\"\n     * @param {string} input string to casefold\n     * @returns {string} A new string converted to lower case\n     * @function casefold\n     * @example\n     * casefold(\"AbC\") // returns \"abc\"\n     */\n    casefold: {\n      _func: (args, _data, interpreter) => {\n        const str = toString(args[0]);\n        return str.toLocaleUpperCase(interpreter.language).toLocaleLowerCase(interpreter.language);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Finds the next highest integer value of the argument `num` by rounding up if necessary.\n     * i.e. ceil() rounds toward positive infinity.\n     * @param {number} num numeric value\n     * @return {integer} The smallest integer greater than or equal to num\n     * @function ceil\n     * @example\n     * ceil(10) // returns 10\n     * ceil(10.4) // return 11\n\n     */\n    ceil: {\n      _func: resolvedArgs => Math.ceil(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n    /**\n     * Retrieve the first code point from a string\n     * @param {string} str source string.\n     * @return {integer} Unicode code point value. If the input string is empty, returns `null`.\n     * @function codePoint\n     * @example\n     * codePoint(\"ABC\") // 65\n     */\n    codePoint: {\n      _func: args => {\n        const text = toString(args[0]);\n        return text.length === 0 ? null : text.codePointAt(0);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Determines if the given `subject` contains `search`.\n     * If `subject` is an array, this function returns true if one of the elements\n     * in the array is equal to the `search` value. If `subject`\n     * is a string, return true if the string contains the\n     * `search` value.\n     * @param {array|string} subject The element to be searched\n     * @param {string|boolean|number|null} search element to find.\n     * If `subject` is an array, search for an exact match for `search` in the array.\n     * If `subject` is a string, `search` will be <<_type_coercion_rules,coerced to a string>>.\n     * @return {boolean} true if found\n     * @function contains\n     * @example\n     * contains([1, 2, 3, 4], 2) // returns true\n     * contains([1, 2, 3, 4], -1) // returns false\n     * contains(\"Abcd\", \"d\") // returns true\n     * contains(\"Abcd\", \"x\") // returns false\n\n     */\n    contains: {\n      _func: resolvedArgs => {\n        const subject = valueOf(resolvedArgs[0]);\n        const search = valueOf(resolvedArgs[1]);\n        if (getType(valueOf(resolvedArgs[0])) === TYPE_ARRAY) {\n          return subject.indexOf(search) >= 0;\n        }\n        const source = Array.from(subject);\n        const searchLen = Array.from(search).length;\n        for (let i = 0; i < source.length; i += 1) {\n          if (source.slice(i, i + searchLen).join('') === search) return true;\n        }\n        return false;\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] },\n        { types: [TYPE_ANY] }],\n    },\n    /**\n     * Compute the cosine (in radians) of a number.\n     * @param {number} angle A number representing an angle in radians\n     * @return {number} The cosine of the angle, between -1 and 1, inclusive.\n     * @function cos\n     * @example\n     * cos(1.0471975512) => 0.4999999999970535\n     */\n    cos: {\n      _func: resolvedArgs => Math.cos(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Return difference between two date values.\n     * The measurement of the difference is determined by the `unit` parameter. One of:\n     *\n     * * `y` the number of whole years between `start_date` and `end_date`\n     * * `m` the number of whole months between `start_date` and `end_date`.\n     * * `d` the number of days between `start_date` and `end_date`\n     * * `ym` the number of whole months between `start_date` and `end_date`\n     * after subtracting whole years.\n     * * `yd` the number of days between `start_date` and `end_date`, assuming `start_date`\n     * and `end_date` were no more than one year apart\n     * @param {number} start_date The starting <<_date_and_time_values, date/time value>>.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @param {number} end_date The end <<_date_and_time_values, date/time value>> -- must\n     * be greater or equal to start_date. If not, an error will be thrown.\n     * @param {string} unit Case-insensitive string representing the unit of time to measure.\n     * An unrecognized unit will result in an error.\n     * @returns {integer} The number of days/months/years difference\n     * @function datedif\n     * @example\n     * datedif(datetime(2001, 1, 1), datetime(2003, 1, 1), \"y\") // returns 2\n     * datedif(datetime(2001, 6, 1), datetime(2003, 8, 15), \"D\") // returns 805\n     * // 805 days between June 1, 2001, and August 15, 2003\n     * datedif(datetime(2001, 6, 1), datetime(2003, 8, 15), \"YD\") // returns 75\n     * // 75 days between June 1 and August 15, ignoring the years of the dates (75)\n     */\n    datedif: {\n      _func: args => {\n        const unit = toString(args[2]).toLowerCase();\n        const date1 = getDateObj(args[0]);\n        const date2 = getDateObj(args[1]);\n        if (date2 === date1) return 0;\n        if (date2 < date1) throw functionError('end_date must be >= start_date in datedif()');\n\n        if (unit === 'd') return Math.floor(getDateNum(date2 - date1));\n        const yearDiff = date2.getFullYear() - date1.getFullYear();\n        let monthDiff = date2.getMonth() - date1.getMonth();\n        const dayDiff = date2.getDate() - date1.getDate();\n\n        if (unit === 'y') {\n          let y = yearDiff;\n          if (monthDiff < 0) y -= 1;\n          if (monthDiff === 0 && dayDiff < 0) y -= 1;\n          return y;\n        }\n        if (unit === 'm') {\n          return yearDiff * 12 + monthDiff + (dayDiff < 0 ? -1 : 0);\n        }\n        if (unit === 'ym') {\n          if (dayDiff < 0) monthDiff -= 1;\n          if (monthDiff <= 0 && yearDiff > 0) return 12 + monthDiff;\n          return monthDiff;\n        }\n        if (unit === 'yd') {\n          if (dayDiff < 0) monthDiff -= 1;\n          if (monthDiff < 0) date2.setFullYear(date1.getFullYear() + 1);\n          else date2.setFullYear(date1.getFullYear());\n          return Math.floor(getDateNum(date2 - date1));\n        }\n        throw functionError(`Unrecognized unit parameter \"${unit}\" for datedif()`);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Generate a date/time value from individual date/time parts.\n     * If any of the units are greater than their normal range,\n     * the overflow will be added to the next greater unit.\n     * e.g. specifying 25 hours will increment the day value by 1.\n     * Similarly,\n     * negative values will decrement the next greater unit.\n     * e.g. datetime(year, month, day - 30) will return a date 30 days earlier.\n     * @param {integer} year The year to use for date construction.\n     * Values from 0 to 99 map to the years 1900 to 1999. All other values are the actual year\n     * @param {integer} month The month: beginning with 1 for\n     * January to 12 for December.\n     * @param {integer} day The day of the month.\n     * @param {integer} [hours=0] Integer value between 0 and 23 representing the hour of the day.\n     * @param {integer} [minutes=0] Integer value representing the minute segment of a time.\n     * @param {integer} [seconds=0] Integer value representing the second segment of a time.\n     * @param {integer} [milliseconds=0] Integer value representing the\n     * millisecond segment of a time.\n     * @returns {number} A <<_date_and_time_values, date/time value>>\n     * to be used with other date/time functions\n     * @function datetime\n     * @example\n     * datetime(2010, 10, 10) // returns representation of October 10, 2010\n     * datetime(2010, 2, 28) // returns representation of February 28, 2010\n     * datetime(2023,13,5) | year(@) & \"/\" & month(@) // returns 2024/1\n     */\n    datetime: {\n      _func: args => {\n        const year = toInteger(args[0]);\n        const month = toInteger(args[1]) - 1; // javascript months start from 0\n        const day = toInteger(args[2]);\n        const hours = args.length > 3 ? toInteger(args[3]) : 0;\n        const minutes = args.length > 4 ? toInteger(args[4]) : 0;\n        const seconds = args.length > 5 ? toInteger(args[5]) : 0;\n        const ms = args.length > 6 ? toInteger(args[6]) : 0;\n\n        const baseDate = new Date(year, month, day, hours, minutes, seconds, ms);\n\n        return getDateNum(baseDate);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Finds the day of the month for a date value\n     * @param {number} date <<_date_and_time_values, date/time value>> generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} The day of the month ranging from 1 to 31.\n     * @function day\n     * @example\n     * day(datetime(2008,5,23)) // returns 23\n     */\n    day: {\n      _func: args => getDateObj(args[0]).getDate(),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Performs a depth-first search of a nested hierarchy to\n     * return an array of key values that match a `name`.\n     * The name can be either a key into an object or an array index.\n     * This is similar to the Descendant Accessor operator (`..`) from [E4X](https://ecma-international.org/publications-and-standards/standards/ecma-357/).\n     * @param {object|array} object The starting object or array where we start the search\n     * @param {string|integer} name The name (or index position) of the elements to find\n     * @returns {any[]} The array of matched elements\n     * @function deepScan\n     * @example\n     * deepScan({a : {b1 : {c : 2}, b2 : {c : 3}}}, \"c\") // returns [2, 3]\n     */\n    deepScan: {\n      _func: resolvedArgs => {\n        const [source, n] = resolvedArgs;\n        const name = toString(n);\n        const items = [];\n        if (source === null) return items;\n        function scan(node) {\n          if (node !== null) {\n            Object.entries(node).forEach(([k, v]) => {\n              if (k === name) items.push(v);\n              if (typeof v === 'object') scan(v);\n            });\n          }\n        }\n        scan(source);\n        return items;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_OBJECT, dataTypes.TYPE_ARRAY, dataTypes.TYPE_NULL] },\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Determines if the `subject` string ends with a specific `suffix`\n     * @param {string} subject source string in which to search\n     * @param {string} suffix search string\n     * @return {boolean} true if the `suffix` value is at the end of the `subject`\n     * @function endsWith\n     * @example\n     * endsWith(\"Abcd\", \"d\") // returns true\n     * endsWith(\"Abcd\", \"A\") // returns false\n     */\n    endsWith: {\n      _func: resolvedArgs => {\n        const searchStr = valueOf(resolvedArgs[0]);\n        const suffix = valueOf(resolvedArgs[1]);\n        // make sure the comparison is based on code points\n        const search = Array.from(searchStr).reverse();\n        const ending = Array.from(suffix).reverse();\n        return ending.every((c, i) => c === search[i]);\n      },\n      _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n    },\n\n    /**\n     * Returns an array of `[key, value]` pairs from an object or array.\n     * The `fromEntries()` function may be used to convert an array to an object.\n     * @param {object|array} obj source object or array\n     * @returns {any[]} an array of arrays where each child array has two elements\n     * representing the key and value of a pair\n     * @function entries\n     * @example\n     * entries({a: 1, b: 2}) // returns [[\"a\", 1], [\"b\", 2]]\n     * entries([4,5]) // returns [[\"0\", 4],[\"1\", 5]]\n     */\n    entries: {\n      _func: args => {\n        const obj = valueOf(args[0]);\n        return Object.entries(obj);\n      },\n      _signature: [\n        {\n          types: [\n            dataTypes.TYPE_ARRAY,\n            dataTypes.TYPE_OBJECT,\n          ],\n        },\n      ],\n    },\n\n    /**\n     * Finds the date value of the end of a month, given `startDate` plus `monthAdd` months\n     * @param {number} startDate The base date to start from.\n     * <<_date_and_time_values, Date/time values>> can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @param {integer} monthAdd Number of months to add to start date\n     * @return {number} the date of the last day of the month\n     * @function eomonth\n     * @example\n     * eomonth(datetime(2011, 1, 1), 1) | [month(@), day(@)] // returns [2, 28]\n     * eomonth(datetime(2011, 1, 1), -3) | [month(@), day(@)] // returns [10, 31]\n     */\n    eomonth: {\n      _func: args => {\n        const jsDate = getDateObj(args[0]);\n        const months = toInteger(args[1]);\n        // We can give the constructor a month value > 11 and it will increment the years\n        // Since day is 1-based, giving zero will yield the last day of the previous month\n        const newDate = new Date(jsDate.getFullYear(), jsDate.getMonth() + months + 1, 0);\n        return getDateNum(newDate);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Finds e (the base of natural logarithms) raised to a power. (i.e. e^x)\n     * @param {number} x A numeric expression representing the power of e.\n     * @returns {number} e (the base of natural logarithms) raised to power x\n     * @function exp\n     * @example\n     * exp(10) // returns 22026.465794806718\n     */\n    exp: {\n      _func: args => Math.exp(args[0]),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return constant boolean false value.\n     * Expressions may also use the JSON literal: `` `false` ``\n     * @returns {boolean} constant boolean value `false`\n     * @function false\n     */\n    false: {\n      _func: () => false,\n      _signature: [],\n    },\n\n    /**\n     * Finds and returns the index of query in text from a start position\n     * @param {string} findText string to search\n     * @param {string} withinText text to be searched\n     * @param {integer} [start=0] zero-based position to start searching\n     * @returns {integer|null} The position of the found string, null if not found.\n     * @function find\n     * @example\n     * find(\"m\", \"abm\") // returns 2\n     * find(\"M\", \"abMcdM\", 3) // returns 5\n     * find(\"M\", \"ab\") // returns `null`\n     * find(\"M\", \"abMcdM\", 2) // returns 2\n     */\n    find: {\n      _func: args => {\n        const query = Array.from(toString(args[0]));\n        const text = Array.from(toString(args[1]));\n        if (query.length === 0) return 0;\n        const offset = args.length > 2 ? toInteger(args[2]) : 0;\n        for (let i = offset; i < text.length; i += 1) {\n          if (text.slice(i, i + query.length).every((c, j) => c === query[j])) {\n            return i;\n          }\n        }\n        return null;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Calculates the next lowest integer value of the argument `num` by rounding down if necessary.\n     * i.e. floor() rounds toward negative infinity.\n     * @param {number} num numeric value\n     * @return {integer} The largest integer smaller than or equal to num\n     * @function floor\n     * @example\n     * floor(10.4) // returns 10\n     * floor(10) // returns 10\n     */\n    floor: {\n      _func: resolvedArgs => Math.floor(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Create a string from a code point.\n     * @param {integer} codePoint An integer between 0 and 0x10FFFF (inclusive)\n     * representing a Unicode code point.\n     * @return {string} A string from a given code point\n     * @function fromCodePoint\n     * @example\n     * fromCodePoint(65) // \"A\"\n     * fromCodePoint(65) == \"\\u0041\" // true\n     */\n    fromCodePoint: {\n      _func: args => {\n        const code = toInteger(args[0]);\n        try {\n          return String.fromCodePoint(code);\n        } catch (e) {\n          throw evaluationError(`Invalid code point: \"${code}\"`);\n        }\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Returns an object by transforming a list of key-value `pairs` into an object.\n     * `fromEntries()` is the inverse operation of `entries()`.\n     * @param {any[]} pairs A nested array of key-value pairs to create the object from\n     * @returns {object} An object constructed from the provided key-value pairs\n     * @function fromEntries\n     * @example\n     * fromEntries([[\"a\", 1], [\"b\", 2]]) // returns {a: 1, b: 2}\n     */\n    fromEntries: {\n      _func: args => {\n        const array = args[0];\n        return Object.fromEntries(array);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_ARRAY] },\n      ],\n    },\n\n    /**\n     * Compute the nearest 32-bit single precision float representation of a number\n     * @param {number} num input to be rounded\n     * @return {number} The rounded representation of `num`\n     * @function fround\n     * @example\n     * fround(2147483650.987) => 2147483648\n     * fround(100.44444444444444444444) => 100.44444274902344\n     */\n    fround: {\n      _func: resolvedArgs => Math.fround(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Determine if an object has a property or if an array index is in range.\n     * @param {object|array} obj source object or array.\n     * May also be a scalar, but then the result is always false.\n     * @param {string|integer} name The name (or index position) of the element to find\n     * @returns {boolean} true if the element exists\n     * @function hasProperty\n     * @example\n     * hasProperty({a: 1, b: 2}, \"a\") // returns true\n     * hasProperty([\"apples\", \"oranges\"], 3) // returns false\n     * hasProperty(`null`, \"a\") // returns false\n     */\n    hasProperty: {\n      _func: args => {\n        const value = valueOf(args[0]);\n        if (value === null) return false;\n        const key = (value instanceof Array) ? toInteger(args[1]) : args[1];\n        const result = getProperty(value, key);\n        return result !== undefined;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_NUMBER] },\n      ],\n    },\n    /**\n     * Extract the hour from a <<_date_and_time_values, date/time value>>\n     * @param {number} date The datetime/time for which the hour is to be returned.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} value between 0 and 23\n     * @function hour\n     * @example\n     * hour(datetime(2008,5,23,12, 0, 0)) // returns 12\n     * hour(time(12, 0, 0)) // returns 12\n     */\n    hour: {\n      _func: args => getDateObj(args[0]).getHours(),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return one of two values `result1` or `result2`, depending on the `condition`\n     * @param {any} condition boolean result of a logical expression\n     * @param {any} result1 if condition is true\n     * @param {any} result2 if condition is false\n     * @return {any} either result1 or result2\n     * @function if\n\n     * @example\n     * if(true(), 1, 2) // returns 1\n     * if(false(), 1, 2) // returns 2\n     */\n    if: {\n      _func: (unresolvedArgs, data, interpreter) => {\n        const conditionNode = unresolvedArgs[0];\n        const leftBranchNode = unresolvedArgs[1];\n        const rightBranchNode = unresolvedArgs[2];\n        unresolvedArgs\n          .forEach(arg => {\n            if (arg.type === 'ExpressionReference') {\n              throw typeError('\"if()\" does not accept an expression reference argument.');\n            }\n          });\n\n        const condition = interpreter.visit(conditionNode, data);\n        if (toBoolean(valueOf(condition))) {\n          return interpreter.visit(leftBranchNode, data);\n        }\n        return interpreter.visit(rightBranchNode, data);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_ANY] },\n        { types: [dataTypes.TYPE_ANY] }],\n    },\n\n    /**\n     * Combines all the elements from the provided\n     * array, joined together using the `glue` argument as a separator between each array element.\n     * @param {string[]} stringsarray array of strings or values that can be coerced to strings\n     * @param {string} glue\n     * @return {string} String representation of the array\n     * @function join\n     * @example\n     * join([\"a\", \"b\", \"c\"], \",\") // returns \"a,b,c\"\n     * join([\"apples\", \"bananas\"], \" and \") // returns \"apples and bananas\"\n     */\n    join: {\n      _func: resolvedArgs => {\n        const listJoin = resolvedArgs[0];\n        const joinChar = resolvedArgs[1];\n        return listJoin.join(joinChar);\n      },\n      _signature: [\n        { types: [TYPE_ARRAY_STRING] },\n        { types: [TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Generates an array of the keys of the input object. If the\n     * object is null, the value return an empty array\n     * @param {object} obj the object to examine\n     * @return {array} the array of all the key names\n     * @function keys\n     * @example\n     * keys({a : 3, b : 4}) // returns [\"a\", \"b\"]\n     */\n    keys: {\n      _func: resolvedArgs => {\n        if (resolvedArgs[0] === null) return [];\n        return Object.keys(resolvedArgs[0]);\n      },\n      _signature: [{ types: [TYPE_OBJECT] }],\n    },\n    /**\n     * Return a substring from the start of a string or the left-most elements of an array\n     * @param {string|array} subject The source text/array of code points/elements\n     * @param {integer} [elements=1] number of elements to pick\n     * @return {string|array}\n     * @function left\n     * @example\n     * left(\"Sale Price\", 4) // returns \"Sale\"\n     * left(\"Sweden\") // returns \"S\"\n     * left([4, 5, 6], 2) // returns [4, 5]\n     */\n    left: {\n      _func: args => {\n        const numEntries = args.length > 1 ? toInteger(args[1]) : 1;\n        if (numEntries < 0) return null;\n        if (args[0] instanceof Array) {\n          return args[0].slice(0, numEntries);\n        }\n        const text = Array.from(toString(args[0]));\n        return text.slice(0, numEntries).join('');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Calculates the length of the input argument based on types:\n     *\n     * * string: returns the number of unicode code points\n     * * array: returns the number of array elements\n     * * object: returns the number of key-value pairs\n     * @param {string | array | object} subject subject whose length to calculate\n     * @return {integer} the length of the input subject\n     * @function length\n     * @example\n     * length(`[]`) // returns 0\n     * length(\"\") // returns 0\n     * length(\"abcd\") // returns 4\n     * length([1, 2, 3, 4]) // returns 4\n     * length(`{}`) // returns 0\n     * length({a : 3, b : 4}) // returns 2\n     */\n    length: {\n      _func: resolvedArgs => {\n        const arg = valueOf(resolvedArgs[0]);\n        if (isObject(arg)) return Object.keys(arg).length;\n        // Array.from splits a string into code points\n        // If we didn't do this, then String.length would return the number of UTF-16 code units\n        return isArray(arg) ? arg.length : Array.from(toString(arg)).length;\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT] }],\n    },\n\n    /**\n     * Compute the natural logarithm (base e) of a number\n     * @param {number} num A number greater than zero\n     * @return {number} The natural log value\n     * @function log\n     * @example\n     * log(10) // 2.302585092994046\n     */\n    log: {\n      _func: resolvedArgs => validNumber(Math.log(resolvedArgs[0]), 'log'),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Compute the base 10 logarithm of a number.\n     * @param {number} num A number greater than or equal to zero\n     * @return {number} The base 10 log result\n     * @function log10\n     * @example\n     * log10(100000) // 5\n     */\n    log10: {\n      _func: resolvedArgs => validNumber(Math.log10(resolvedArgs[0]), 'log10'),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Converts all the alphabetic code points in a string to lowercase.\n     * @param {string} input input string\n     * @returns {string} the lower case value of the input string\n     * @function lower\n     * @example\n     * lower(\"E. E. Cummings\") // returns e. e. cummings\n     */\n    lower: {\n      _func: args => {\n        const value = toString(args[0]);\n        return value.toLowerCase();\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Apply an expression to every element in an array and return the array of results.\n     * An input array of length N will return an array of length N.\n     * @param {array} elements array of elements to process\n     * @param {expression} expr expression to evaluate\n     * @return {array} the mapped array\n     * @function map\n     * @example\n     * map([1, 2, 3, 4], &(@ + 1)) // returns [2, 3, 4, 5]\n     * map([\"doe\", \"nick\", \"chris\"], &length(@)) // returns [3, 4, 5]\n     */\n    map: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[1];\n        return resolvedArgs[0].map(arg => runtime.interpreter.visit(exprefNode, arg));\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    /**\n     * Calculates the largest value in the provided `collection` arguments.\n     * If all collections are empty, an evaluation error is thrown.\n     * `max()` can work on numbers or strings.\n     * If a mix of numbers and strings are provided, all values with be coerced to\n     * the type of the first value.\n     * If all values are null, the result is 0.\n     * @param {...(number[]|string[])} collection array(s) in which the maximum\n     * element is to be calculated\n     * @return {number|string} the largest value found\n     * @function max\n     * @example\n     * max([1, 2, 3], [4, 5, 6]) // returns 6\n     * max([\"a\", \"a1\", \"b\"]) // returns \"b\"\n     */\n    max: {\n      _func: args => {\n        // flatten the args into a single array\n        const array = args.reduce((prev, cur) => {\n          prev.push(...cur);\n          return prev;\n        }, []);\n        if (array.length === 0) throw evaluationError('max() requires at least one argument');\n        const first = array.find(r => r !== null);\n        if (first === undefined) return 0;\n        // use the first value to determine the comparison type\n        const isNumber = getType(first, true) === TYPE_NUMBER;\n        const makeNumber = n => {\n          const r = toNumber(n);\n          return r === null ? 0 : r;\n        };\n        return array.map(a => (isNumber ? makeNumber(a) : toString(a)))\n          .sort((a, b) => (a > b ? 1 : -1))\n          .pop();\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING], variadic: true }],\n    },\n\n    /**\n     * Accepts one or more objects, and returns a single object with\n     * all objects merged.\n     * The first object is copied, and then\n     * and each key value pair from each subsequent object\n     * are added to the first object.  Duplicate keys in subsequent objects will\n     * override those found in earlier objects.\n     * @param {...object} args\n     * @return {object} The combined object\n     * @function merge\n     * @example\n     * merge({a: 1, b: 2}, {c : 3, d: 4}) // returns {a :1, b: 2, c: 3, d: 4}\n     * merge({a: 1, b: 2}, {a : 3, d: 4}) // returns {a :3, b: 2, d: 4}\n     */\n    merge: {\n      _func: resolvedArgs => {\n        const merged = {};\n        resolvedArgs.forEach(current => {\n          if (current === null) return;\n          Object.entries(current || {}).forEach(([key, value]) => {\n            merged[key] = value;\n          });\n        });\n        return merged;\n      },\n      _signature: [{ types: [TYPE_OBJECT, TYPE_NULL], variadic: true }],\n    },\n\n    /**\n     * Extracts a substring from text, or a subset from an array.\n     * @param {string|array} subject the text string or array of elements from which to extract.\n     * @param {integer} startPos the zero-based position of the first code point\n     * or element to extract.\n     * @param {integer} length The number of code points or elements to return from the\n     * string or array.\n     * If greater then the length of `subject` the length of the subject is used.\n     * @return {string|array} The resulting substring or array subset of elements\n     * @function mid\n     * @example\n     * mid(\"Fluid Flow\", 0, 5) // returns \"Fluid\"\n     * mid(\"Fluid Flow\", 6, 20) // returns \"Flow\"\n     * mid(\"Fluid Flow, 20, 5) // returns \"\"\n     * mid([0,1,2,3,4,5,6,7,8,9], 2, 3) // returns [2,3,4]\n     */\n    mid: {\n      _func: args => {\n        const startPos = toInteger(args[1]);\n        const numEntries = toInteger(args[2]);\n        if (startPos < 0) return null;\n        if (args[0] instanceof Array) {\n          return args[0].slice(startPos, startPos + numEntries);\n        }\n        const text = Array.from(toString(args[0]));\n        return text.slice(startPos, startPos + numEntries).join('');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Extract the milliseconds of the time value in a <<_date_and_time_values, date/time value>>.\n     * @param {number} date datetime/time for which the millisecond is to be returned.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} The number of milliseconds: 0 through 999\n     * @function millisecond\n     * @example\n     * millisecond(datetime(2008, 5, 23, 12, 10, 53, 42)) // returns 42\n     */\n    millisecond: {\n      _func: args => getDateObj(args[0]).getMilliseconds(),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Calculates the smallest value in the input arguments.\n     * If all collections are empty, an evaluation error is thrown.\n     * min() can work on numbers or strings.\n     * If a mix of numbers and strings are provided, the type of the first value will be used.\n     * If all values are null, zero is returned.\n     * @param {...(number[]|string[])} collection Arrays to search for the minimum value\n     * @return {number|string} the smallest value found\n     * @function min\n     * @example\n     * min([1, 2, 3], [4, 5, 6]) // returns 1\n     * min([\"a\", \"a1\", \"b\"]) // returns \"a\"\n     */\n    min: {\n      _func: args => {\n        // flatten the args into a single array\n        const array = args.reduce((prev, cur) => {\n          prev.push(...cur);\n          return prev;\n        }, []);\n        if (array.length === 0) throw evaluationError('min() requires at least one argument');\n\n        const first = array.find(r => r !== null);\n        if (first === undefined) return 0;\n        // use the first value to determine the comparison type\n        const isNumber = getType(first, true) === TYPE_NUMBER;\n        const makeNumber = n => {\n          const r = toNumber(n);\n          return r === null ? 0 : r;\n        };\n        return array.map(a => (isNumber ? makeNumber(a) : toString(a)))\n          .sort((a, b) => (a < b ? 1 : -1))\n          .pop();\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING], variadic: true }],\n    },\n\n    /**\n     * Extract the minute (0 through 59) from a <<_date_and_time_values, date/time value>>\n     * @param {number} date A datetime/time value.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} Number of minutes in the time portion of the date/time value\n     * @function minute\n     * @example\n     * minute(datetime(2008,5,23,12, 10, 0)) // returns 10\n     * minute(time(12, 10, 0)) // returns 10\n     */\n    minute: {\n      _func: args => getDateObj(args[0]).getMinutes(),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Return the remainder when one number is divided by another number.\n     * @param {number} dividend The number for which to find the remainder.\n     * @param {number} divisor The number by which to divide number.\n     * @return {number} Computes the remainder of `dividend`/`divisor`.\n     * If `dividend` is negative, the result will also be negative.\n     * If `dividend` is zero, an error is thrown.\n     * @function mod\n     * @example\n     * mod(3, 2) // returns 1\n     * mod(-3, 2) // returns -1\n     */\n    mod: {\n      _func: args => {\n        const p1 = args[0];\n        const p2 = args[1];\n        const result = p1 % p2;\n        if (Number.isNaN(result)) throw functionError(`Bad parameter for mod: '${p1} % ${p2}'`);\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Finds the month of a date.\n     * @param {number} date source <<_date_and_time_values, date/time value>>.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} The month number value, ranging from 1 (January) to 12 (December).\n     * @function month\n     * @example\n     * month(datetime(2008,5,23)) // returns 5\n     */\n    month: {\n      // javascript months start from 0\n      _func: args => getDateObj(args[0]).getMonth() + 1,\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Compute logical NOT of a value. If the parameter is not boolean\n     * it will be <<_type_coercion_rules,cast to boolean>>\n     * Note the related <<_not_operator, unary NOT operator>>.\n     * @param {any} value - any data type\n     * @returns {boolean} The logical NOT applied to the input parameter\n     * @example\n     * not(length(\"bar\") > 0) // returns false\n     * not(false()) // returns true\n     * not(\"abcd\") // returns false\n     * not(\"\") // returns true\n     * @function not\n     */\n    not: {\n      _func: resolveArgs => !toBoolean(valueOf(resolveArgs[0])),\n      _signature: [{ types: [dataTypes.TYPE_ANY] }],\n    },\n\n    /**\n     * Finds the first argument that does not resolve to `null`.\n     * This function accepts one or more arguments, and will evaluate\n     * them in order until a non-null argument is encountered. If all\n     * arguments values resolve to null, then return a null value.\n     * @param {...any} argument\n     * @return {any}\n     * @function notNull\n     * @example\n     * notNull(1, 2, 3, 4, `null`) // returns 1\n     * notNull(`null`, 2, 3, 4, `null`) // returns 2\n     */\n    notNull: {\n      _func: resolvedArgs => {\n        const result = resolvedArgs.find(arg => getType(arg) !== TYPE_NULL);\n        return result === undefined ? null : result;\n      },\n      _signature: [{ types: [TYPE_ANY], variadic: true }],\n    },\n    /**\n     * Retrieve the current date/time.\n     * @return {number} representation of the <<_date_and_time_values, current date/time value>>.\n     * @function now\n     */\n    now: {\n      _func: () => getDateNum(Date.now()),\n      _signature: [],\n    },\n\n    /**\n     * Return constant null value.\n     * Expressions may also use the JSON literal: `` `null` ``\n     * @returns {boolean} True\n     * @function null\n     */\n    null: {\n      _func: () => null,\n      _signature: [],\n    },\n\n    /**\n     * Determines the logical OR result of a set of parameters.\n     * If the parameters are not boolean they will be <<_type_coercion_rules,cast to\n     * boolean>>.\n     * Note the related <<_or_operator, Or Operator>>.\n     * @param {any} first logical expression\n     * @param {...any} [operand] any number of additional expressions\n     * @returns {boolean} The logical result of applying OR to all parameters\n     * @example\n     * or((x / 2) == y, (y * 2) == x) // true\n     * @function or\n     */\n    or: {\n      _func: resolvedArgs => {\n        let result = toBoolean(valueOf(resolvedArgs[0]));\n        resolvedArgs.slice(1).forEach(arg => {\n          result = result || toBoolean(valueOf(arg));\n        });\n        return result;\n      },\n      _signature: [{ types: [dataTypes.TYPE_ANY], variadic: true }],\n    },\n\n    /**\n     * Computes `a` raised to a power `x`. (a^x)\n     * @param {number} a The base number -- can be any real number.\n     * @param {number} x The exponent to which the base number is raised.\n     * @return {number}\n     * @function power\n     * @example\n     * power(10, 2) // returns 100 (10 raised to power 2)\n     */\n    power: {\n      _func: args => {\n        const type = getType(args[0]);\n        if (type === dataTypes.TYPE_ARRAY\n              || type === dataTypes.TYPE_ARRAY_STRING || type === dataTypes.TYPE_ARRAY_NUMBER) {\n          return args[0].map(a => toNumber(a) ** args[1]);\n        }\n        return validNumber(args[0] ** args[1], 'power');\n      },\n      _signature: [\n        {\n          types: [dataTypes.TYPE_NUMBER, dataTypes.TYPE_ARRAY_NUMBER,\n            dataTypes.TYPE_ARRAY_STRING],\n        },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Apply proper casing to a string.  Proper casing is where the first letter of each\n     * word is converted to an\n     * uppercase letter and the rest of the letters in the word converted to lowercase.\n     * Words are demarcated by whitespace, punctuation, or numbers.\n     * Specifically, any character(s) matching the regular expression: `[\\s\\d\\p{P}]+`.\n     * @param {string} text source string\n     * @returns {string} source string with proper casing applied.\n     * @function proper\n     * @example\n     * proper(\"this is a TITLE\") // returns \"This Is A Title\"\n     * proper(\"2-way street\") // returns \"2-Way Street\"\n     * proper(\"76BudGet\") // returns \"76Budget\"\n     */\n    proper: {\n      _func: args => {\n        const capitalize = word => `${word.charAt(0).toUpperCase()}${word.slice(1).toLowerCase()}`;\n        const original = toString(args[0]);\n        // split the string by whitespace, punctuation, and numbers\n        const wordParts = original.match(/[\\s\\d\\p{P}]+|[^\\s\\d\\p{P}]+/gu);\n        if (wordParts !== null) return wordParts.map(w => capitalize(w)).join('');\n        return capitalize(original);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Generate a pseudo random number.\n     * @returns {number} A value greater than or equal to zero, and less than one.\n     * @function random\n     * @example\n     * random() // 0.022585461160693265\n     */\n    random: {\n      _func: () => Math.random(),\n      _signature: [],\n    },\n    /**\n     * Executes a user-supplied reducer expression on each element of an\n     * array, in order, passing in the return value from the expression from the preceding element.\n     * The final result of running the reducer across all elements of the input array is a\n     * single value.\n     * The expression can access the following properties of the current object:\n     *\n     * * accumulated: accumulated value based on the previous expression.\n     * For the first array element use the `initialValue` parameter.  If not provided, then `null`\n     * * current: current element to process\n     * * index: index of the current element in the array\n     * * array: original array\n     * @param {array} elements array of elements on which the expression will be evaluated\n     * @param {expression} expr reducer expression to be executed on each element\n     * @param {any} initialValue the accumulated value to pass to the first array element\n     * @return {any}\n     * @function reduce\n     * @example\n     * reduce([1, 2, 3], &(accumulated + current)) // returns 6\n     * // find maximum entry by age\n     * reduce(\n     *   [{age: 10, name: \"Joe\"},{age: 20, name: \"John\"}],\n     *   &max(@.accumulated.age, @.current.age), @[0].age)\n     * reduce([3, 3, 3], &accumulated * current, 1) // returns 27\n     */\n    reduce: {\n      _func: resolvedArgs => {\n        const exprefNode = resolvedArgs[1];\n        return resolvedArgs[0].reduce(\n          (accumulated, current, index, array) => runtime.interpreter.visit(exprefNode, {\n            accumulated, current, index, array,\n          }),\n          resolvedArgs.length === 3 ? resolvedArgs[2] : null,\n        );\n      },\n      _signature: [\n        { types: [TYPE_ARRAY] },\n        { types: [TYPE_EXPREF] },\n        { types: [TYPE_ANY], optional: true },\n      ],\n    },\n\n    /**\n     * Register a function.  The registered function may take one parameter.\n     * If more parameters are needed, combine them in an array or object.\n     * Note that implementations are not required to provide `register()` in order to be conformant.\n     * @param {string} functionName Name of the function to register\n     * @param {expression} expr Expression to execute with this function call\n     * @return {{}} returns an empty object\n     * @function register\n     * @example\n     * register(\"product\", &@[0] * @[1]) // can now call: product([2,21]) => returns 42\n     * register(\"ltrim\", &split(@,\"\").reduce(@, &accumulated & current | if(@ = \" \", \"\", @), \"\"))\n     * // ltrim(\"  abc  \") => returns \"abc  \"\n     */\n    register: {\n      _func: resolvedArgs => {\n        const functionName = resolvedArgs[0];\n        const exprefNode = resolvedArgs[1];\n\n        if (functionMap[functionName] && !functionMap[functionName].custom) {\n          // custom functions can be re-registered\n          // but not any other functions\n          debug.push(`Cannot override function: \"${functionName}\"`);\n          return {};\n        }\n        functionMap[functionName] = {\n          _func: args => runtime.interpreter.visit(exprefNode, ...args),\n          _signature: [{ types: [TYPE_ANY], optional: true }],\n          _custom: true,\n        };\n        return {};\n      },\n      _signature: [\n        { types: [TYPE_STRING] },\n        { types: [TYPE_EXPREF] },\n      ],\n    },\n\n    /**\n     * Generates text (or an array) where we substitute elements at a given start position and\n     * length, with new text (or array elements).\n     * @param {string|array} subject original text or array\n     * @param {integer} start zero-based index in the original text\n     * from where to begin the replacement.\n     * @param {integer} length number of code points to be replaced\n     * @param {string|array} replacement string (or array) to insert at the start index\n     * @returns {string|array} the resulting text or array\n     * @function replace\n     * @example\n     * replace(\"abcdefghijk\", 5, 5, \"*\") // returns abcde*k\n     * replace(\"2009\",2,2,\"10\") // returns  2010\n     * replace(\"123456\",0,3,\"@\") // returns @456\n     * replace([\"blue\",\"black\",\"white\",\"red\"], 1, 2, [\"green\"]) // returns [\"blue\",\"green\",\"red\"]\n     */\n    replace: {\n      _func: args => {\n        const startPos = toInteger(args[1]);\n        const numElements = toInteger(args[2]);\n        if (startPos < 0) {\n          return null;\n        }\n        if (getType(args[0]) === TYPE_ARRAY) {\n          const sourceArray = getType(args[0]) === TYPE_ARRAY\n            ? valueOf(args[0]) : [valueOf(args[0])];\n          const replacement = getType(args[3]) === TYPE_ARRAY\n            ? valueOf(args[3]) : [valueOf(args[3])];\n          sourceArray.splice(startPos, numElements, ...replacement);\n          return sourceArray;\n        }\n        const subject = Array.from(toString(args[0]));\n        const newText = toString(args[3]);\n\n        subject.splice(startPos, numElements, newText);\n        return subject.join('');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_ANY] },\n      ],\n    },\n\n    /**\n     * Return text repeated `count` times.\n     * @param {string} text text to repeat\n     * @param {integer} count number of times to repeat the text\n     * @returns {string} Text generated from the repeated text.\n     * if `count` is zero, returns an empty string. If `count` is less than 0, returns null.\n     * @function rept\n     * @example\n     * rept(\"x\", 5) // returns \"xxxxx\"\n     */\n    rept: {\n      _func: args => {\n        const text = toString(args[0]);\n        const count = toInteger(args[1]);\n        if (count < 0) {\n          return null;\n        }\n        return text.repeat(count);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Reverses the order of an array or the order of code points in a string\n     * @param {string|array} subject the source to be reversed\n     * @return {array} The resulting reversed array or string\n     * @function reverse\n     * @example\n     * reverse([\"a\", \"b\", \"c\"]) // returns [\"c\", \"b\", \"a\"]\n     */\n    reverse: {\n      _func: resolvedArgs => {\n        const originalStr = valueOf(resolvedArgs[0]);\n        const typeName = getType(originalStr);\n        if (typeName === TYPE_STRING) {\n          return Array.from(originalStr).reverse().join('');\n        }\n        const reversedArray = resolvedArgs[0].slice(0);\n        return reversedArray.reverse();\n      },\n      _signature: [{ types: [TYPE_STRING, TYPE_ARRAY] }],\n    },\n\n    /**\n     * Generates a string from the right-most code points of a string or\n     * a subset of elements from the end of an array\n     * @param {string|array} subject The text/array containing the code points/elements to extract\n     * @param {integer} [elements=1] number of elements to pick\n     * @return {string|array|null} The extracted substring or array subset\n     * Returns null if the number of elements is less than 0\n     * @function right\n     * @example\n     * right(\"Sale Price\", 4) // returns \"rice\"\n     * right(\"Sweden\") // returns \"n\"\n     * right([4, 5, 6], 2) // returns [5, 6]\n     */\n    right: {\n      _func: args => {\n        const numEntries = args.length > 1 ? toInteger(args[1]) : 1;\n        if (numEntries < 0) return null;\n        if (args[0] instanceof Array) {\n          if (numEntries === 0) return [];\n          return args[0].slice(numEntries * -1);\n        }\n        if (numEntries === 0) return '';\n        const text = Array.from(toString(args[0]));\n        return text.slice(numEntries * -1).join('');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_ARRAY] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Round a number to a specified precision:\n     *\n     * * If `precision` is greater than zero, round to the specified number of decimal places.\n     * * If `precision` is 0, round to the nearest integer.\n     * * If `precision` is less than 0, round to the left of the decimal point.\n     * @param {number} num number to round\n     * @param {integer} [precision=0] precision to use for the rounding operation.\n     * @returns {number} rounded value. Rounding a half value will round up.\n     * @function round\n     * @example\n     * round(2.15, 1) // returns 2.2\n     * round(626.3,-3) // returns 1000 (Rounds 626.3 to the nearest multiple of 1000)\n     * round(626.3, 0) // returns 626\n     * round(1.98,-1) // returns 0 (Rounds 1.98 to the nearest multiple of 10)\n     * round(-50.55,-2) // -100 (round -50.55 to the nearest multiple of 100)\n     * round(1.95583) // 2\n     * round(-1.5) // -1\n     */\n    round: {\n      _func: args => round(args[0], args.length > 1 ? toInteger(args[1]) : 0),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Perform a wildcard search.  The search is case-sensitive and supports two forms of wildcards:\n     * `*` finds a sequence of code points and `?` finds a single code point.\n     * To use `*` or `?` as text values, precede them with an escape (`{backslash}`) character.\n     * Note that the wildcard search is not greedy.\n     * e.g. `search(\"a{asterisk}b\", \"abb\")` will return `[0, \"ab\"]` Not `[0, \"abb\"]`\n     * @param {string} findText the search string -- which may include wild cards.\n     * @param {string} withinText The string to search.\n     * @param {integer} [startPos=0] The zero-based position of withinText to start searching.\n     * @returns {array} returns an array with two values:\n     *\n     * * The start position of the found text and the text string that was found.\n     * * If a match was not found, an empty array is returned.\n     * @function search\n     * @example\n     * search(\"a?c\", \"acabc\") // returns [2, \"abc\"]\n     */\n    search: {\n      _func: args => {\n        const findText = toString(args[0]);\n        const withinText = toString(args[1]);\n        const startPos = args.length > 2 ? toInteger(args[2]) : 0;\n        if (findText === null || withinText === null || withinText.length === 0) return [];\n        // escape all characters that would otherwise create a regular expression\n        const reString = findText.replace(/([[.\\\\^$()+{])/g, '\\\\$1')\n          // add the single character wildcard\n          .replace(/\\\\?\\?/g, match => (match === '\\\\?' ? '\\\\?' : '.'))\n          // add the multi-character wildcard\n          .replace(/\\\\?\\*/g, match => (match === '\\\\*' ? '\\\\*' : '.*?'))\n          // get rid of the escape characters\n          .replace(/\\\\\\\\/g, '\\\\');\n        const re = new RegExp(reString);\n        const result = withinText.substring(startPos).match(re);\n        if (result === null) return [];\n        return [result.index + startPos, result[0]];\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n\n    },\n\n    /**\n     * Extract the seconds of the time value in a <<_date_and_time_values, date/time value>>.\n     * @param {number} date datetime/time for which the second is to be returned.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} The number of seconds: 0 through 59\n     * @function second\n     * @example\n     * second(datetime(2008,5,23,12, 10, 53)) // returns 53\n     * second(time(12, 10, 53)) // returns 53\n     */\n    second: {\n      _func: args => getDateObj(args[0]).getSeconds(),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Computes the sign of a number passed as argument.\n     * @param {number} num any number\n     * @return {number} returns 1 or -1, indicating the sign of `num`.\n     * If the `num` is 0, it will return 0.\n     * @function sign\n     * @example\n     * sign(5) // 1\n     * sign(-5) // -1\n     * sign(0) // 0\n     */\n    sign: {\n      _func: resolvedArgs => Math.sign(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Computes the sine of a number in radians\n     * @param {number} angle A number representing an angle in radians.\n     * @return {number} The sine of `angle`, between -1 and 1, inclusive\n     * @function sin\n     * @example\n     * sin(0) // 0\n     * sin(1) // 0.8414709848078965\n     */\n    sin: {\n      _func: resolvedArgs => Math.sin(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * This function accepts an array of strings or numbers and returns an\n     * array with the elements in sorted order.\n     * String sorting is based on code points. Sort is not locale-sensitive.\n     * @param {number[]|string[]} list to be sorted\n     * @return {number[]|string[]} The ordered result\n     * @function sort\n     * @example\n     * sort([1, 2, 4, 3, 1]) // returns [1, 1, 2, 3, 4]\n     */\n    sort: {\n      _func: resolvedArgs => {\n        const sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length > 0) {\n          const normalize = getType(resolvedArgs[0][0]) === TYPE_NUMBER ? toNumber : toString;\n          sortedArray.sort((a, b) => {\n            const va = normalize(a);\n            const vb = normalize(b);\n            if (va < vb) return -1;\n            if (va > vb) return 1;\n            return 0;\n          });\n        }\n        return sortedArray;\n      },\n      _signature: [{ types: [TYPE_ARRAY, TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER] }],\n    },\n\n    /**\n     * Sort an array using an expression to find the sort key. For each element\n     * in the array, the expression is applied and the resulting\n     * value is used as the sort value. If the result of\n     * evaluating the expression against the current array element results in type\n     * other than a number or a string, a <<_errors, TypeError>> will occur.\n     * @param {array} elements Array to be sorted\n     * @param {expression} expr The comparison expression\n     * @return {array} The sorted array\n     * @function sortBy\n     * @example\n     * // returns [\"e\", \"def\", \"abcd\"]\n     * sortBy([\"abcd\", \"e\", \"def\"], &length(@))\n     *\n     * // returns [{year: 1910}, {year: 2010}, {year: 2020}]\n     * sortBy([{year: 2010}, {year: 2020}, {year: 1910}], &year)\n     *\n     * // returns [5, -10, -11, -15, 30]\n     * sortBy([-15, 30, -10, -11, 5], &abs(@))\n     */\n    sortBy: {\n      _func: resolvedArgs => {\n        const sortedArray = resolvedArgs[0].slice(0);\n        if (sortedArray.length === 0) {\n          return sortedArray;\n        }\n        const exprefNode = resolvedArgs[1];\n        const requiredType = getType(\n          runtime.interpreter.visit(exprefNode, sortedArray[0]),\n        );\n        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {\n          throw typeError('Bad data type for sortBy()');\n        }\n        // In order to get a stable sort out of an unstable\n        // sort algorithm, we decorate/sort/undecorate (DSU)\n        // by creating a new list of [index, element] pairs.\n        // In the cmp function, if the evaluated elements are\n        // equal, then the index will be used as the tiebreaker.\n        // After the decorated list has been sorted, it will be\n        // undecorated to extract the original elements.\n        const decorated = [];\n        for (let i = 0; i < sortedArray.length; i += 1) {\n          decorated.push([i, sortedArray[i]]);\n        }\n        decorated.sort((a, b) => {\n          const exprA = runtime.interpreter.visit(exprefNode, a[1]);\n          const exprB = runtime.interpreter.visit(exprefNode, b[1]);\n          if (getType(exprA) !== requiredType) {\n            throw typeError(`sortBy expected ${requiredType}, received ${getType(exprA)}`);\n          } else if (getType(exprB) !== requiredType) {\n            throw typeError(`sortyBy expected ${requiredType}, received ${getType(exprB)}`);\n          }\n          if (exprA > exprB) {\n            return 1;\n          }\n          if (exprA < exprB) {\n            return -1;\n          }\n          // If they\"re equal compare the items by their\n          // order to maintain relative order of equal keys\n          // (i.e. to get a stable sort).\n          return a[0] - b[0];\n        });\n        // Undecorate: extract out the original list elements.\n        for (let j = 0; j < decorated.length; j += 1) {\n          [, sortedArray[j]] = decorated[j];\n        }\n        return sortedArray;\n      },\n      _signature: [{ types: [TYPE_ARRAY] }, { types: [TYPE_EXPREF] }],\n    },\n\n    /**\n     * Split a string into an array, given a separator\n     * @param {string} string string to split\n     * @param {string} separator separator where the split(s) should occur\n     * @return {string[]} The array of separated strings\n     * @function split\n     * @example\n     * split(\"abcdef\", \"\") // returns [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n     * split(\"abcdef\", \"e\") // returns [\"abcd\", \"f\"]\n     */\n    split: {\n      _func: args => {\n        const str = toString(args[0]);\n        const separator = toString(args[1]);\n        // for empty separator, return an array of code points\n        return separator.length === 0 ? Array.from(str) : str.split(separator);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n         * Find the square root of a number\n         * @param {number} num source number\n         * @return {number} The calculated square root value\n         * @function sqrt\n         * @example\n         * sqrt(4) // returns 2\n         */\n    sqrt: {\n      _func: args => {\n        const result = Math.sqrt(args[0]);\n        return validNumber(result, 'sqrt');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Determine if a string starts with a prefix.\n     * @param {string} subject string to search\n     * @param {string} prefix prefix to search for\n     * @return {boolean} true if `prefix` matches the start of `subject`\n     * @function startsWith\n     * @example\n     * startsWith(\"jack is at home\", \"jack\") // returns true\n     */\n    startsWith: {\n      _func: resolvedArgs => {\n        const subject = Array.from(toString(resolvedArgs[0]));\n        const prefix = Array.from(toString(resolvedArgs[1]));\n        if (prefix.length > subject.length) return false;\n        for (let i = 0; i < prefix.length; i += 1) {\n          if (prefix[i] !== subject[i]) return false;\n        }\n        return true;\n      },\n      _signature: [{ types: [TYPE_STRING] }, { types: [TYPE_STRING] }],\n    },\n    /**\n     * Estimates standard deviation based on a sample.\n     * `stdev` assumes that its arguments are a sample of the entire population.\n     * If your data represents a entire population,\n     * then compute the standard deviation using [stdevp]{@link stdevp}.\n     * @param {number[]} numbers The array of numbers comprising the population\n     * @returns {number} [Standard deviation](https://en.wikipedia.org/wiki/Standard_deviation)\n     * @function stdev\n     * @example\n     * stdev([1345, 1301, 1368]) // returns 34.044089061098404\n     * stdevp([1345, 1301, 1368]) // returns 27.797\n     */\n    stdev: {\n      _func: args => {\n        const values = args[0];\n        if (values.length <= 1) {\n          return null;\n        }\n        const coercedValues = values.map(value => toNumber(value));\n        const mean = coercedValues.reduce((a, b) => a + b, 0) / values.length;\n        const sumSquare = coercedValues.reduce((a, b) => a + b * b, 0);\n        const result = Math.sqrt((sumSquare - values.length * mean * mean) / (values.length - 1));\n        return validNumber(result, 'stdev');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_NUMBER] },\n      ],\n    },\n\n    /**\n     * Calculates standard deviation based on the entire population given as arguments.\n     * `stdevp` assumes that its arguments are the entire population.\n     * If your data represents a sample of the population,\n     * then compute the standard deviation using [stdev]{@link stdev}.\n     * @param {number[]} numbers The array of numbers comprising the population\n     * @returns {number} Calculated standard deviation\n     * @function stdevp\n     * @example\n     * stdevp([1345, 1301, 1368]) // returns 27.797\n     * stdev([1345, 1301, 1368]) // returns 34.044\n     */\n    stdevp: {\n      _func: args => {\n        const values = args[0];\n        if (values.length === 0) {\n          return null;\n        }\n        const coercedValues = values.map(value => toNumber(value));\n        const mean = coercedValues.reduce((a, b) => a + b, 0) / values.length;\n        const meanSumSquare = coercedValues.reduce((a, b) => a + b * b, 0) / values.length;\n        const result = Math.sqrt(meanSumSquare - mean * mean);\n        return validNumber(result, 'stdevp');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY_NUMBER] },\n      ],\n    },\n\n    /**\n     * Generates a string from the input `text`,\n     * with text `old` replaced by text `new` (when searching from the left).\n     * If there is no match, or if `old` has length 0, `text` is returned unchanged.\n     * Note that `old` and `new` may have different lengths. If `which` < 1, return `text` unchanged\n     * @param {string} text The text for which to substitute code points.\n     * @param {string} old The text to replace.\n     * @param {string} new The text to replace `old` with.  If `new` is an empty string, then\n     * occurrences of `old` are removed from `text`.\n     * @param {integer} [which] The one-based occurrence of `old` text to replace with `new` text.\n     * If `which` parameter is omitted, every occurrence of `old` is replaced with `new`.\n     * @returns {string} replaced string\n     * @function substitute\n     * @example\n     * substitute(\"Sales Data\", \"Sales\", \"Cost\") // returns \"Cost Data\"\n     * substitute(\"Quarter 1, 2008\", \"1\", \"2\", 1) // returns \"Quarter 2, 2008\"\n     * substitute(\"Quarter 1, 1008\", \"1\", \"2\", 2) // returns \"Quarter 1, 2008\"\n     */\n    substitute: {\n      _func: args => {\n        const src = Array.from(toString(args[0]));\n        const old = Array.from(toString(args[1]));\n        const replacement = Array.from(toString(args[2]));\n\n        // no third parameter? replace all instances\n        let replaceAll = true;\n        let whch = -1;\n        if (args.length > 3) {\n          replaceAll = false;\n          whch = toInteger(args[3]);\n          if (whch < 1) return src.join('');\n        }\n\n        let found = 0;\n        const result = [];\n        // find the instances to replace\n        for (let j = 0; j < src.length;) {\n          const match = old.every((c, i) => src[j + i] === c);\n          if (match) found += 1;\n          if (match && (replaceAll || found === whch)) {\n            result.push(...replacement);\n            j += old.length;\n          } else {\n            result.push(src[j]);\n            j += 1;\n          }\n        }\n        return result.join('');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_STRING] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Calculates the sum of the provided array.\n     * An empty array will produce a return value of 0.\n     * @param {number[]} collection array of numbers\n     * @return {number} The computed sum\n     * @function sum\n     * @example\n     * sum([1, 2, 3]) // returns 6\n     */\n    sum: {\n      _func: resolvedArgs => {\n        let sum = 0;\n        resolvedArgs[0].forEach(arg => {\n          sum += arg * 1;\n        });\n        return sum;\n      },\n      _signature: [{ types: [TYPE_ARRAY_NUMBER] }],\n    },\n    /**\n     * Computes the tangent of a number in radians\n     * @param {number} angle A number representing an angle in radians.\n     * @return {number} The tangent of `angle`\n     * @function tan\n     * @example\n     * tan(0) // 0\n     * tan(1) // 1.5574077246549023\n     */\n    tan: {\n      _func: resolvedArgs => Math.tan(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_NUMBER] }],\n    },\n\n    /**\n     * Construct and returns a <<_date_and_time_values, time value>>.\n     * If any of the units are greater or less than their normal range,\n     * the overflow/underflow will be added/subtracted from the next greater unit.\n     * @param {integer} hours Zero-based integer value between 0 and 23 representing\n     * the hour of the day.\n     * @param {integer} [minutes=0] Zero-based integer value representing\n     * the minute segment of a time.\n     * @param {integer} [seconds=0] Zero-based integer value representing the seconds\n     * segment of a time.\n     * @return {number} Returns a date/time value representing the fraction\n     * of the day consumed by the given time\n     * @function time\n     * @example\n     * time(12, 0, 0) | [hour(@), minute(@), second(@)] // returns [12, 0, 0]\n     */\n    time: {\n      _func: args => {\n        const hours = toInteger(args[0]);\n        const minutes = args.length > 1 ? toInteger(args[1]) : 0;\n        const seconds = args.length > 2 ? toInteger(args[2]) : 0;\n        // Since time values are interchangeable with date and datetime values, it\"s consistent\n        // to create them at the epoch\n        const epochTime = new Date(1970, 0, 1, hours, minutes, seconds);\n        return getDateNum(epochTime);\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Converts the provided argument to an array.\n     * The conversion happens as per the following rules:\n     *\n     * * array - Returns the provided value.\n     * * number/string/object/boolean/null - Returns a one element array containing the argument.\n     * @param {any} arg parameter to turn into an array\n     * @return {array} The resulting array\n     * @function toArray\n     * @example\n     * toArray(1) // returns [1]\n     * toArray(null()) // returns [`null`]\n     */\n    toArray: {\n      _func: resolvedArgs => {\n        if (getType(resolvedArgs[0]) === TYPE_ARRAY) {\n          return resolvedArgs[0];\n        }\n        return [resolvedArgs[0]];\n      },\n\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * Converts the provided string to a date/time value.\n     *\n     * @param {string} ISOString An [ISO8601 formatted string]{@link https://www.iso.org/iso-8601-date-and-time-format.html}.\n     * (limited to the [RFC 3339]{@link https://www.rfc-editor.org/rfc/rfc3339} profile)\n     * If the string does not include a timezone offset (or trailing 'Z'),\n     * it will be assumed to be local time\n     * @return {number} The resulting <<_date_and_time_values, date/time number>>.\n     * If conversion fails, return null.\n     * @function toDate\n     * @example\n     * toDate(\"20231110T130000+04:00\") // returns 19671.375\n     * toDate(\"2023-11-10T13:00:00+04:00\") // returns 19671.375\n     * toDate(\"20231110\") | year(@) & \"/\" & month(@) // returns \"2023/11\"\n     */\n    toDate: {\n      _func: resolvedArgs => {\n        // expand compact notation so that the Date() constructor will\n        // accept the value\n        const iso = toString(resolvedArgs[0])\n          .replace(/(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)/, '$1-$2-$3')\n          .replace(/T(\\d\\d)(\\d\\d)(\\d\\d)/, 'T$1:$2:$3');\n        const dateparts = iso.split(/[\\D,zZ]+/);\n        let d;\n        if (dateparts.length <= 3) {\n          if (dateparts.length < 3 || dateparts.find(x => x === '') === '') {\n            debug.push(`Failed to convert \"${resolvedArgs[0]}\" to a date`);\n            return null;\n          }\n        }\n        if (dateparts.length < 7) {\n          // no timezone component, so assume local time\n          // The date constructor always parses an ISO string as\n          // UTC -- with or without a trailing 'z'\n          // But if there's no timezone component, it needs to be local time\n\n          const range = [99999, 12, 31, 23, 59, 59, 999];\n          // check that the date parts are in range\n          for (let i = 0; i < dateparts.length; i += 1) {\n            if (dateparts[i] > range[i]) {\n              debug.push(`Failed to convert \"${resolvedArgs[0]}\" to a date`);\n              return null;\n            }\n          }\n          // account for zero-based date month parts\n          d = new Date(...dateparts.map((x, i) => (i === 1 ? x - 1 : x * 1)));\n        } else {\n          d = new Date(iso);\n        }\n        if (d instanceof Date && Number.isFinite(d.getTime())) return getDateNum(d);\n        debug.push(`Failed to convert \"${resolvedArgs[0]}\" to a date`);\n\n        return null;\n      },\n      _signature: [{ types: [TYPE_STRING] }],\n    },\n\n    /**\n     * Returns a <<_date_and_time_values, date/time>> value representing\n     * the start of the current day. i.e. midnight\n     * @return {number} today at midnight\n     * @function today\n     */\n    today: {\n      _func: () => {\n        const now = new Date(Date.now());\n        // We used to take the floor() to truncate h/m/s from Date.now(), but that would return\n        // today at UTC time.  We want today in local time.\n        // i.e. UTC time could be a day ahead or behind\n        // But note that means that the result is not an integer.\n        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        return getDateNum(today);\n      },\n      _signature: [],\n    },\n\n    /**\n     * Converts the provided arg to a number as per\n     * the <<_type_coercion_rules,type coercion rules>>.\n     *\n     * @param {string|number|boolean|null} arg to convert to number\n     * @param {integer} [base=10] The base to use.  One of: 2, 8, 10, 16. Defaults to 10.\n     * @return {number} The resulting number.  If conversion to number fails, return null.\n     * @function toNumber\n     * @example\n     * toNumber(1) // returns 1\n     * toNumber(\"10\") // returns 10\n     * toNumber({a: 1}) // fails\n     * toNumber(true()) // returns 1\n     * toNumber(\"10f\") // returns null\n     * toNumber(\"FF\", 16) // returns 255\n     */\n    toNumber: {\n      _func: resolvedArgs => {\n        const num = resolvedArgs[0];\n        const base = resolvedArgs.length > 1 ? toInteger(resolvedArgs[1]) : 10;\n        if (base !== 10) {\n          if (![2, 8, 16].includes(base)) {\n            debug.push(`Invalid base: \"${base}\" for toNumber(), using \"10\"`);\n            return toNumber(num);\n          }\n          const result = parseInt(num, base);\n          if (Number.isNaN(result)) {\n            debug.push(`Failed to convert \"${num}\" base \"${base}\" to number`);\n            return 0;\n          }\n          return result;\n        }\n        return toNumber(num);\n      },\n      _signature: [\n        { types: [TYPE_STRING, TYPE_NUMBER, TYPE_BOOLEAN, TYPE_NULL] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Returns the argument converted to a string.\n     * If the argument is a string, it will be returned unchanged.\n     * Otherwise, returns the JSON encoded value of the argument.\n     * @param {any} arg Value to be converted to a string\n     * @param {integer} [indent=0] Indentation to use when converting\n     * objects and arrays to a JSON string\n     * @return {string} The result string.\n     * @function toString\n     * @example\n     * toString(1) // returns \"1\"\n     * toString(true()) // returns \"true\"\n     * toString({sum: 12 + 13}) // \"{\"sum\":25}\"\n     * toString(\"hello\") // returns \"hello\"\n     */\n    toString: {\n      _func: resolvedArgs => {\n        const value = valueOf(resolvedArgs[0]);\n        if (getType(value) === TYPE_STRING) {\n          return resolvedArgs[0];\n        }\n        const indent = resolvedArgs.length > 1 ? toInteger(resolvedArgs[1]) : 0;\n        return JSON.stringify(value, null, indent);\n      },\n\n      _signature: [{ types: [TYPE_ANY] }, { types: [TYPE_NUMBER], optional: true }],\n    },\n\n    /**\n     * Remove leading and trailing spaces (U+0020), and replace all internal multiple spaces\n     * with a single space.  Note that other whitespace characters are left intact.\n     * @param {string} text string to trim\n     * @return {string} trimmed string\n     * @function trim\n     * @example\n     * trim(\"   ab    c   \") // returns \"ab c\"\n     */\n    trim: {\n      _func: args => {\n        const text = toString(args[0]);\n        // only removes the space character\n        // other whitespace characters like \\t \\n left intact\n        return text.split(' ').filter(x => x).join(' ');\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Return constant boolean true value.\n     * Expressions may also use the JSON literal: `` `true` ``\n     * @returns {boolean} True\n     * @function true\n     */\n    true: {\n      _func: () => true,\n      _signature: [],\n    },\n\n    /**\n         * Truncates a number to an integer by removing the fractional part of the number.\n         * i.e. it rounds towards zero.\n         * @param {number} numA number to truncate\n         * @param {integer} [numB=0] A number specifying the number of decimal digits to preserve.\n         * @return {number} Truncated value\n         * @function trunc\n         * @example\n         * trunc(8.9) // returns 8\n         * trunc(-8.9) // returns -8\n         * trunc(8.912, 2) // returns 8.91\n         */\n    trunc: {\n      _func: args => {\n        const number = args[0];\n        const digits = args.length > 1 ? toInteger(args[1]) : 0;\n        const method = number >= 0 ? Math.floor : Math.ceil;\n        return method(number * 10 ** digits) / 10 ** digits;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Finds the type name of the given `subject` argument as a string value.\n     * The return value will be one of the following:\n     *\n     * * number\n     * * string\n     * * boolean\n     * * array\n     * * object\n     * * null\n     * @param {any} subject type to evaluate\n     * @return {string} The type name\n     *\n     * @function type\n     * @example\n     * type(1) // returns \"number\"\n     * type(\"\") // returns \"string\"\n     */\n    type: {\n      _func: resolvedArgs => ({\n        [TYPE_NUMBER]: 'number',\n        [TYPE_STRING]: 'string',\n        [TYPE_ARRAY]: 'array',\n        [TYPE_OBJECT]: 'object',\n        [TYPE_BOOLEAN]: 'boolean',\n        [TYPE_EXPREF]: 'expref',\n        [TYPE_NULL]: 'null',\n      }[getType(resolvedArgs[0])]),\n      _signature: [{ types: [TYPE_ANY] }],\n    },\n\n    /**\n     * Find the set of unique elements within an array\n     * @param {array} input input array\n     * @return {array} array with duplicate elements removed\n     * @function unique\n     * @example\n     * unique([1, 2, 3, 4, 1, 1, 2]) // returns [1, 2, 3, 4]\n     */\n    unique: {\n      _func: args => {\n        // create an array of values for searching.  That way if the array elements are\n        // represented by class objects with a valueOf(), we'll locate them in the valueArray\n        // but return the original class object.\n        const valueArray = args[0].map(a => valueOf(a));\n        return args[0]\n          .filter(\n            (v, index) => valueArray.findIndex(\n              lookup => strictDeepEqual(lookup, valueOf(v)),\n            ) === index,\n          );\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_ARRAY] },\n      ],\n    },\n\n    /**\n     * Converts all the alphabetic code points in a string to uppercase.\n     * @param {string} input input string\n     * @returns {string} the upper case value of the input string\n     * @function upper\n     * @example\n     * upper(\"abcd\") // returns \"ABCD\"\n     */\n    upper: {\n      _func: args => toString(args[0]).toUpperCase(),\n      _signature: [\n        { types: [dataTypes.TYPE_STRING] },\n      ],\n    },\n\n    /**\n     * Perform an indexed lookup on an object or array\n     * @param {object | array} object on which to perform the lookup\n     * @param {string | integer} index a named child for an object or an integer offset for an array\n     * @returns {any} the result of the lookup -- or `null` if not found.\n     * @function value\n     * @example\n     * value({a: 1, b:2, c:3}, \"a\") // returns 1\n     * value([1, 2, 3, 4], 2) // returns 3\n     */\n    value: {\n      _func: args => {\n        const obj = valueOf(args[0]) || {};\n        const index = obj instanceof Array ? toInteger(args[1]) : args[1];\n        const result = getProperty(obj, index);\n\n        if (result === undefined) {\n          if (isArray(obj)) debug.push(`Index: ${index} out of range for array size: ${obj.length}`);\n          else debugAvailable(debug, obj, index);\n          return null;\n        }\n        return result;\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_OBJECT, dataTypes.TYPE_ARRAY, dataTypes.TYPE_NULL] },\n        { types: [dataTypes.TYPE_STRING, dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Generates an array of the values of the provided object.\n     * Note that because JSON objects are\n     * inherently unordered, the values associated with the provided object are\n     * also unordered.\n     * @param {object} obj source object\n     * @return {array} array of the values\n     * @function values\n     * @example\n     * values({a : 3, b : 4}) // returns [3, 4]\n     */\n    values: {\n      _func: resolvedArgs => Object.values(resolvedArgs[0]),\n      _signature: [{ types: [TYPE_OBJECT] }],\n    },\n\n    /**\n     * Extract the day of the week from a date.\n     * The specific numbering of the day of week is controlled by the `returnType` parameter:\n     *\n     * * 1 : Sunday (1), Monday (2), ..., Saturday (7)\n     * * 2 : Monday (1), Tuesday (2), ..., Sunday(7)\n     * * 3 : Monday (0), Tuesday (1), ...., Sunday(6)\n     * @param {number} date <<_date_and_time_values, date/time value>> for\n     * which the day of the week is to be returned.\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @param {integer} [returnType=1] Determines the\n     * representation of the result.\n     * An unrecognized returnType will result in a error.\n     * @returns {integer} day of the week\n     * @function weekday\n     * @example\n     * weekday(datetime(2006,5,21)) // 1\n     * weekday(datetime(2006,5,21), 2) // 7\n     * weekday(datetime(2006,5,21), 3) // 6\n     */\n    weekday: {\n      _func: args => {\n        const date = args[0];\n        const type = args.length > 1 ? toInteger(args[1]) : 1;\n        const jsDate = getDateObj(date);\n        const day = jsDate.getDay();\n        // day is in range [0-7) with 0 mapping to sunday\n        switch (type) {\n          case 1:\n            // range = [1, 7], sunday = 1\n            return day + 1;\n          case 2:\n            // range = [1, 7] sunday = 7\n            return ((day + 6) % 7) + 1;\n          case 3:\n            // range = [0, 6] sunday = 6\n            return (day + 6) % 7;\n          default:\n            throw functionError(`Unsupported returnType: \"${type}\" for weekday()`);\n        }\n      },\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n        { types: [dataTypes.TYPE_NUMBER], optional: true },\n      ],\n    },\n\n    /**\n     * Finds the year of a datetime value\n     * @param {number} date input <<_date_and_time_values, date/time value>>\n     * Date/time values can be generated using the\n     * [datetime]{@link datetime}, [toDate]{@link todate}, [today]{@link today}, [now]{@link now}\n     * and [time]{@link time} functions.\n     * @return {integer} The year value\n     * @function year\n     * @example\n     * year(datetime(2008,5,23)) // returns 2008\n     */\n    year: {\n      _func: args => getDateObj(args[0]).getFullYear(),\n      _signature: [\n        { types: [dataTypes.TYPE_NUMBER] },\n      ],\n    },\n\n    /**\n     * Generates a convolved (zipped) array containing grouped arrays of values from\n     * the array arguments from index 0, 1, 2, etc.\n     * This function accepts a variable number of arguments.\n     * The length of the returned array is equal to the length of the shortest array.\n     * @param {...array} arrays array of arrays to zip together\n     * @return {array} An array of arrays with elements zipped together\n     * @function zip\n     * @example\n     * zip([1, 2, 3], [4, 5, 6, 7]) // returns [[1, 4], [2, 5], [3, 6]]\n     */\n    zip: {\n      _func: args => {\n        const count = args.reduce((min, current) => Math.min(min, current.length), args[0].length);\n        const result = new Array(count);\n        for (let i = 0; i < count; i += 1) {\n          result[i] = [];\n          args.forEach(a => {\n            result[i].push(a[i]);\n          });\n        }\n        return result;\n      },\n      _signature: [{ types: [TYPE_ARRAY], variadic: true }],\n    },\n  };\n  return functionMap;\n}\n","/*\nCopyright 2014 James Saryerwinnie\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* eslint-disable max-classes-per-file */\n/* eslint-disable no-underscore-dangle */\nimport TreeInterpreter from './TreeInterpreter.js';\nimport Parser from './Parser.js';\nimport dataTypes from './dataTypes.js';\nimport { matchType, getType, getTypes } from './matchType.js';\nimport functions from './functions.js';\nimport {\n  isArray, isObject, strictDeepEqual, getValueOf, isClass,\n} from './utils.js';\nimport {\n  evaluationError, typeError, functionError,\n} from './errors.js';\n\n// Type constants used to define functions.\nconst {\n  TYPE_CLASS,\n  TYPE_ARRAY,\n  TYPE_OBJECT,\n} = dataTypes;\n\nfunction getToNumber(stringToNumber, debug = []) {\n  return value => {\n    const n = getValueOf(value); // in case it's an object that implements valueOf()\n    if (n === null) return 0;\n    if (n instanceof Array) {\n      throw typeError('Failed to convert array to number');\n    }\n    const type = typeof n;\n    if (type === 'number') return n;\n    if (type === 'string') return stringToNumber(n, debug);\n    if (type === 'boolean') return n ? 1 : 0;\n    throw typeError('Failed to convert object to number');\n  };\n}\nfunction toString(a) {\n  if (a === null || a === undefined) return '';\n  const type = getType(a);\n  if (type === TYPE_ARRAY || type === TYPE_OBJECT) {\n    return JSON.stringify(a);\n  }\n  return a.toString();\n}\n\nconst defaultStringToNumber = (str => {\n  const n = +str;\n  return Number.isNaN(n) ? 0 : n;\n});\n\nfunction matchClass(arg, expectedList) {\n  // checking isClass() generates a dependency -- so call it only if necessary\n  return expectedList.includes(TYPE_CLASS) && isClass(arg);\n}\n\nclass Runtime {\n  constructor(debug, toNumber, customFunctions = {}) {\n    this.strictDeepEqual = strictDeepEqual;\n    this.toNumber = toNumber;\n    this.functionTable = functions(\n      this,\n      isObject,\n      isArray,\n      toNumber,\n      getType,\n      getValueOf,\n      toString,\n      debug,\n    );\n\n    Object.entries(customFunctions).forEach(([fname, func]) => {\n      // Provide the runtime to custom functions so that\n      // they can implement lambda functions\n      // eslint-disable-next-line no-param-reassign\n      func._runtime = this;\n      this.functionTable[fname] = func;\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _validateArgs(argName, args, signature, bResolved) {\n    // Validating the args requires validating\n    // the correct arity and the correct type of each arg.\n    // If the last argument is declared as variadic, then we need\n    // a minimum number of args to be required.  Otherwise it has to\n    // be an exact amount.\n    if (signature.length === 0 && args.length > 0) {\n      throw functionError(`${argName}() does not accept parameters`);\n    }\n\n    if (signature.length === 0) {\n      return;\n    }\n    let pluralized;\n    const argsNeeded = signature.filter(arg => !arg.optional).length;\n    const lastArg = signature[signature.length - 1];\n    if (lastArg.variadic) {\n      if (args.length < signature.length) {\n        pluralized = signature.length === 1 ? ' argument' : ' arguments';\n        throw functionError(`${argName}() takes at least ${signature.length}${pluralized\n        } but received ${args.length}`);\n      }\n    } else if (args.length < argsNeeded || args.length > signature.length) {\n      pluralized = signature.length === 1 ? ' argument' : ' arguments';\n      throw functionError(`${argName}() takes ${signature.length}${pluralized\n      } but received ${args.length}`);\n    }\n    // if the arguments are unresolved, there's no point in validating types\n    if (!bResolved) return;\n    let currentSpec;\n    let actualType;\n    const limit = signature[signature.length - 1].variadic ? args.length\n      : Math.min(signature.length, args.length);\n\n    for (let i = 0; i < limit; i += 1) {\n      currentSpec = i > signature.length - 1 ? signature[signature.length - 1].types\n        : signature[i].types;\n      // Try to avoid checks that will introspect the object and generate dependencies\n      if (!matchClass(args[i], currentSpec)) {\n        actualType = getTypes(args[i]);\n        // eslint-disable-next-line no-param-reassign\n        args[i] = matchType(actualType, currentSpec, args[i], argName, this.toNumber, toString);\n      }\n    }\n  }\n\n  callFunction(name, resolvedArgs, data, interpreter, bResolved = true) {\n    // this check will weed out 'valueOf', 'toString' etc\n    if (!Object.prototype.hasOwnProperty.call(this.functionTable, name)) {\n      throw functionError(`No such function: ${name}()`);\n    }\n\n    const functionEntry = this.functionTable[name];\n    this._validateArgs(name, resolvedArgs, functionEntry._signature, bResolved);\n    return functionEntry._func.call(this, resolvedArgs, data, interpreter);\n  }\n}\n\nexport default class Formula {\n  constructor(debug, customFunctions, stringToNumberFn) {\n    this.debug = debug;\n    this.toNumber = getToNumber(stringToNumberFn || defaultStringToNumber, debug);\n    this.runtime = new Runtime(debug, this.toNumber, customFunctions);\n  }\n\n  compile(stream, allowedGlobalNames = []) {\n    const parser = new Parser(allowedGlobalNames);\n    return parser.parse(stream, this.debug);\n  }\n\n  search(node, data, globals = {}, language = 'en-US') {\n    // This needs to be improved.  Both the interpreter and runtime depend on\n    // each other.  The runtime needs the interpreter to support exprefs.\n    // There's likely a clean way to avoid the cyclic dependency.\n    this.runtime.interpreter = new TreeInterpreter(\n      this.runtime,\n      globals,\n      this.toNumber,\n      toString,\n      this.debug,\n      language,\n    );\n\n    try {\n      return this.runtime.interpreter.search(node, data);\n    } catch (e) {\n      this.debug.push(e.message || e.toString());\n      if (e.name === 'Error') throw evaluationError(e.message || e.toString());\n      throw e;\n    }\n  }\n}\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport Formula from './interpreter.js';\n\n/**\n * Class represents an instance of a JsonFormula Expression that can be executed later on with\n * multiple instances of JSON Data. The instance of the class has a search\n * function that can be used to evaluate the expression on a json payload.\n */\nclass JsonFormula {\n  /**\n   * @param {object} [customFunctions={}] custom functions needed by a hosting application.\n   * @param {function} [stringToNumber='null'] A function that converts string values to numbers.\n   * Can be used to convert currencies/dates to numbers\n   * @param {string} [language=en-US]\n   * @param {array} [debug=[]]  will be populated with any errors/warnings\n   */\n  constructor(\n    customFunctions = {},\n    stringToNumber = null,\n    debug = [],\n  ) {\n    this.customFunctions = { ...customFunctions };\n    this.stringToNumber = stringToNumber;\n    this.debug = debug;\n    this.formula = new Formula(debug, customFunctions, stringToNumber);\n  }\n\n  /**\n   * Evaluates the JsonFormula on a particular json payload and return the result\n   * @param {object|array} json the json data on which the expression needs to be evaluated\n   * @param {object} [globals={}] global objects that can be accessed via custom functions.\n   * @returns {*} the result of the expression being evaluated\n   */\n  search(expression, json, globals = {}, language = 'en-US') {\n    const ast = this.compile(expression, Object.keys(globals));\n    return this.run(ast, json, language, globals);\n  }\n\n  /**\n   * Execute a previously compiled expression against a json object and return the result\n   * @param {object} ast The abstract syntax tree returned from compile()\n   * @param {object|array} json the json data on which the expression needs to be evaluated\n   * @param globals {*} set of objects available in global scope\n   * @returns {*} the result of the expression being evaluated\n   */\n  run(ast, json, language, globals) {\n    return this.formula.search(\n      ast,\n      json,\n      globals,\n      language,\n    );\n  }\n\n  /**\n   * Creates a compiled expression that can be executed later on with some data.\n   * @param {string} expression the expression to evaluate\n   * @param {string[]} [allowedGlobalNames=[]] A list of names of the global variables\n   * being used in the expression.\n   * @param {array} [debug=[]] will be populated with any errors/warnings\n   */\n  compile(expression, allowedGlobalNames = []) {\n    this.debug.length = 0;\n    return this.formula.compile(expression, allowedGlobalNames);\n  }\n}\n\n/**\n * Compile and execute a json-formula expression.\n * If executing the same expression multiple times, it is more efficient to create a\n * class instance of {JsonFormula} and call the search method multiple times.\n* @param {object|array} json the json data on which the expression needs to be evaluated\n* @param {object} globals  global objects that can be accessed via custom functions.\n* @param {string} expression the expression to evaluate\n* @param {object} [customFunctions={}] custom functions needed by a hosting application.\n* @param {function} [stringToNumber='null'] A function that converts string values to numbers.\n* Can be used to convert currencies/dates to numbers\n* @param {string} [language=en-US]\n* @param  {array} [debug=[]] will be populated with any errors/warnings\n* @returns {*} the result of the expression being evaluated\n */\n\nexport function jsonFormula(\n  json,\n  globals,\n  expression,\n  customFunctions = {},\n  stringToNumber = null,\n  debug = [],\n  language = 'en-US',\n) {\n  return new JsonFormula(customFunctions, stringToNumber, debug)\n    .search(expression, json, globals, language);\n}\n\nexport default JsonFormula;\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable no-underscore-dangle */\n/*\n    Field class allows objects to evaluate correctly according to context.\n    - if used in an expression, will return a value or string.\n    - for JSON.stringify() returns a scalar\n    - BUT also allows explicit access to properties. e.g. field.required, field.name etc.\n\n    Should allow us to eliminate getFieldProperty()\n  */\n\nfunction createField(name, value, readonly = false, required = true) {\n  class Field {\n    valueOf() { return value; }\n\n    toString() { return value.toString(); }\n\n    toJSON() { return value; }\n  }\n  const f = new Field();\n  Object.defineProperty(f, '$name', { get: () => name });\n  Object.defineProperty(f, '$value', { get: () => value });\n  Object.defineProperty(f, '$readonly', { get: () => readonly });\n  Object.defineProperty(f, '$required', { get: () => required });\n\n  return f;\n}\n\nfunction createFieldset(fsname, isObj, fields, children) {\n  class FieldsetObj {\n    _add(k, v) {\n      this[k] = v;\n      children.push(v);\n    }\n\n    valueOf() { return Object.fromEntries(children.map(f => [f.$name, f.$value])); }\n  }\n  class FieldsetArray extends Array {\n    _add(k, v) {\n      this[k] = v;\n      children.push(v);\n    }\n\n    valueOf() { return children; }\n  }\n  const fieldset = isObj ? new FieldsetObj() : new FieldsetArray();\n  Object.defineProperty(fieldset, '$name', { get: () => fsname });\n  Object.defineProperty(fieldset, '$fields', { get: () => fields });\n  Object.defineProperty(fieldset, '$value', { get: () => fieldset.valueOf() });\n\n  return fieldset;\n}\n\nfunction createFields(parent, childref, child) {\n  const result = [];\n  if (child instanceof Array) {\n    // parent._add(childref, createFieldset(childref, false));\n    parent._add(childref, createFieldset(childref, false, result, []));\n    child.forEach((item, index) => {\n      const fields = createFields(parent[childref], index, item);\n      result.push(...fields);\n    });\n  } else if (child !== null && typeof child === 'object') {\n    parent._add(childref, createFieldset(childref, true, result, []));\n    Object.keys(child).forEach(k => {\n      const fields = createFields(parent[childref], k, child[k]);\n      result.push(...fields);\n    });\n  } else {\n    const field = createField(childref, child);\n    parent._add(childref, field);\n    result.push(field);\n  }\n  return result;\n}\n\nexport default function createForm(dataRoot) {\n  // if it's not an object or array (a scalar) then don't bother trying to create a form\n  if (dataRoot === null || typeof dataRoot !== 'object') return dataRoot;\n\n  const allFields = [];\n  const form = createFieldset('', !Array.isArray(dataRoot), allFields, []);\n  Object.entries(dataRoot).forEach(([k, v]) => {\n    allFields.push(...createFields(form, k, v));\n  });\n  return form;\n}\n","/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nexport default function stringToNumber(n, debug) {\n  const ret = +n;\n  if (Number.isNaN(ret)) {\n    if (debug) debug.push(`Failed to convert \"${n}\" to number`);\n    return null;\n  }\n  return ret;\n}\n","/*\nCopyright 2021 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n/* global window, document */\nimport Formula from '../src/json-formula.js';\nimport createForm from './Form.js';\nimport stringToNumber from '../src/stringToNumber.js';\n\nwindow.addEventListener('load', () => {\n  const dataElement = document.getElementById('data');\n  const expression = document.getElementById('expression');\n  const result = document.getElementById('result');\n  const debug = document.getElementById('debug');\n  const debugInfo = [];\n  // keep one instance active for the entire session so that any registered\n  // functions are retained\n  const formula = new Formula({}, stringToNumber, debugInfo);\n  const defaultData = `{\n    \"address\": {\n      \"street\": \"12 Oak St\",\n      \"city\": \"San Jose\",\n      \"state\": \"CA\",\n      \"country\": \"USA\",\n      \"phone\": \"1234561234\"\n    },\n    \"items\": [\n      {\n        \"desc\": \"pens\",\n        \"quantity\": 2,\n        \"price\": 3.23\n      },\n      {\n        \"desc\": \"pencils\",\n        \"quantity\": 3,\n        \"price\": 1.34\n      }\n    ],\n    \"tax\": 1.13\n  }`;\n\n  const params = new URLSearchParams(document.location.search);\n  if (params.has('sample')) {\n    const sampleJSON = JSON.parse(atob(params.get('sample')));\n    if (sampleJSON.data) dataElement.value = JSON.stringify(sampleJSON.data, null, 2);\n    if (sampleJSON.expression) expression.value = sampleJSON.expression;\n    if (sampleJSON.description) {\n      document.getElementById('description-row').style.display = 'table-row';\n      document.getElementById('description').innerText = sampleJSON.description;\n    }\n    Array.from(document.getElementsByClassName('controls')).forEach(c => c.classList.add('hidden'));\n  } else {\n    const d = window.localStorage.getItem('data');\n    if (d) dataElement.value = d;\n    else dataElement.value = defaultData;\n    const exp = window.localStorage.getItem('expression');\n    if (exp) expression.value = exp;\n    else expression.value = 'sum(items[*].price * items[*].quantity)';\n  }\n\n  function run() {\n    // save for next time...\n    window.localStorage.setItem('data', dataElement.value);\n    window.localStorage.setItem('expression', expression.value);\n    const input = expression.value;\n    const useFields = document.getElementById('use-fields').checked;\n    let jsonData;\n    try {\n      jsonData = JSON.parse(dataElement.value);\n      if (useFields) {\n        jsonData = createForm(jsonData);\n      }\n    } catch (e) {\n      result.value = e.toString();\n      return;\n    }\n\n    try {\n      const jsonResult = formula.search(input, jsonData, {});\n      debug.innerHTML = debugInfo.join('\\n');\n      let r = jsonResult;\n      if (jsonResult !== null && jsonResult !== undefined) {\n        r = jsonResult.valueOf.call(jsonResult);\n      }\n      if (typeof r === 'object') {\n        result.value = JSON.stringify(r, null, 2);\n      } else {\n        result.value = r;\n      }\n    } catch (e) {\n      result.value = e.toString();\n      debug.innerHTML = debugInfo.join('\\n');\n    }\n  }\n\n  dataElement.addEventListener('blur', run);\n  expression.addEventListener('blur', run);\n  document.getElementById('data-reset').addEventListener(\n    'click',\n    () => {\n      dataElement.value = defaultData;\n      if (params.has('sample')) {\n        expression.value = 'sum(items[*].price * items[*].quantity)';\n        document.getElementById('description-row').style.display = 'none';\n        Array.from(document.getElementsByClassName('controls')).forEach(c => c.classList.remove('hidden'));\n        window.history.pushState({}, document.title, '/');\n        run();\n      }\n    },\n  );\n  document.getElementById('canned').addEventListener('change', e => {\n    expression.value = e.target.value;\n    run();\n  });\n  run();\n\n  fetch('../antlr/JsonFormula.g4').then(r => {\n    r.text().then(g4 => {\n      // remove comments and processing directives.\n      const strippedGrammar = g4\n        .replace(/[\\s\\S.]*grammar/m, 'grammar')\n        .replace(/#.*/g, '');\n      document.getElementById('grammar-out').innerHTML = strippedGrammar;\n    });\n  });\n});\n"],"names":["__webpack_require__","exports","Symbol","toStringTag","Object","defineProperty","value","TYPE_NUMBER","TYPE_ANY","TYPE_STRING","TYPE_ARRAY","TYPE_OBJECT","TYPE_BOOLEAN","TYPE_EXPREF","TYPE_NULL","TYPE_ARRAY_NUMBER","TYPE_ARRAY_STRING","TYPE_CLASS","TYPE_ARRAY_ARRAY","TOK_EOF","TOK_IDENTIFIER","TOK_QUOTEDIDENTIFIER","TOK_RBRACKET","TOK_RPAREN","TOK_COMMA","TOK_COLON","TOK_CONCATENATE","TOK_RBRACE","TOK_NUMBER","TOK_CURRENT","TOK_GLOBAL","TOK_EXPREF","TOK_PIPE","TOK_OR","TOK_AND","TOK_ADD","TOK_SUBTRACT","TOK_UNARY_MINUS","TOK_MULTIPLY","TOK_UNION","TOK_DIVIDE","TOK_COMPARATOR","TOK_FLATTEN","TOK_STAR","TOK_FILTER","TOK_DOT","TOK_NOT","TOK_LBRACE","TOK_LBRACKET","TOK_LPAREN","TOK_JSON","TOK_STRING","TOK_INT","typeError","desc","TypeError","syntaxError","e","Error","name","functionError","evaluationError","isArray","obj","Array","isObject","prototype","toString","call","getValueOf","a","map","i","valueOf","toBoolean","param","val","length","keys","strictDeepEqual","lhs","rhs","first","second","keysSeen","key","hasOwnProperty","key2","getProperty","getOwnPropertyDescriptor","enumerable","get","for","debugAvailable","debug","push","available","entries","getOwnPropertyDescriptors","filter","k","test","startsWith","isClass","includes","constructor","dataTypes","tokenDefinitions","TYPE_NAME_TABLE","getType","inputObj","useValueOf","jmespathType","getTypeName","arg","getTypes","matchType","actuals","expectedList","argValue","context","toNumber","actual","findIndex","type","wrongType","forEach","expected","find","subtype","returnArray","slice","indexType","balanceArrayOperands","opLeft","opRight","shorter","diff","Math","abs","fill","TreeInterpreter","runtime","globals","language","this","search","node","visit","field","undefined","n","v","visitFunctions","Identifier","bind","QuotedIdentifier","ChainedExpression","result","children","BracketExpression","left","Index","index","Slice","sliceParams","start","stop","step","computeSliceParams","Projection","base","collected","b","current","ValueProjection","projection","values","FilterProjection","filtered","finalResults","f","Comparator","type1","type2","original","merged","Identity","_node","ArrayExpression","child","ObjectExpression","OrExpression","matched","AndExpression","AddExpression","applyOperator","ConcatenateExpression","UnionExpression","concat","SubtractExpression","MultiplyExpression","DivideExpression","NotExpression","UnaryMinusExpression","minus","Number","isNaN","String","Literal","Integer","Function","callFunction","resolvedArgs","ExpressionReference","refNode","arrayLength","capSliceRange","arrayLen","stp","actualValue","stepValueNegative","operator","n1","n2","isFinite","basicTokens","operatorStartToken","skipChars","isAlphaNum","ch","isIdentifier","stream","pos","Lexer","allowedGlobalNames","_allowedGlobalNames","tokenize","tokens","identifier","token","_current","prev","_isGlobal","_consumeGlobal","_consumeUnquotedIdentifier","_isNumber","_consumeNumber","_consumeLBracket","_consumeQuotedIdentifier","_consumeRawStringLiteral","json","_consumeJson","_consumeOperator","_consumeUnaryMinus","maxLength","foundNonAlpha","replace","JSON","parse","substring","literal","_e","num","match","toLowerCase","parseFloat","parseInt","global","startingChar","literalString","trimStart","replaceAll","bindingPower","Parser","expression","_loadTokens","ast","_lookahead","t","_lookaheadToken","rbp","leftToken","_advance","nud","currentToken","led","number","previous","next","_lookAheadIndex","idx","_getIndex","_setIndex","right","args","Not","UnaryMinus","_parseProjectionRHS","Star","_parseObjectExpression","Flatten","_parseIndexExpression","_projectIfSlice","_parseArrayExpression","Expref","_match","_errorToken","condition","leftNode","rightNode","Concatenate","Dot","_parseDotRHS","Pipe","Or","And","Add","Subtract","Multiply","Divide","Union","_parseFunctionArgs","Filter","_parseComparator","tokenType","firstExpression","_parseSignedInt","oldIndex","_parseSliceExpression","indexExpr","parts","comparator","lookahead","indexOf","expressions","pairs","identifierTypes","keyToken","keyName","MS_IN_DAY","getDateObj","dateNum","Date","round","getDateNum","dateObj","validNumber","stringify","defaultStringToNumber","str","Runtime","customFunctions","functionTable","toInteger","trunc","functionMap","_func","_signature","types","acos","and","variadic","asin","atan2","avg","sum","inputArray","casefold","_data","interpreter","toLocaleUpperCase","toLocaleLowerCase","ceil","codePoint","text","codePointAt","contains","subject","source","from","searchLen","join","cos","datedif","unit","date1","date2","floor","yearDiff","getFullYear","monthDiff","getMonth","dayDiff","getDate","y","setFullYear","datetime","year","month","day","hours","minutes","seconds","ms","optional","deepScan","items","scan","endsWith","searchStr","suffix","reverse","every","c","eomonth","jsDate","months","exp","false","query","j","fromCodePoint","code","fromEntries","array","fround","hasProperty","hour","getHours","if","unresolvedArgs","data","conditionNode","leftBranchNode","rightBranchNode","listJoin","joinChar","numEntries","log","log10","lower","exprefNode","max","reduce","cur","r","isNumber","makeNumber","sort","pop","merge","mid","startPos","millisecond","getMilliseconds","min","minute","getMinutes","mod","p1","p2","not","resolveArgs","notNull","now","null","or","power","proper","capitalize","word","charAt","toUpperCase","wordParts","w","random","accumulated","register","functionName","custom","_custom","numElements","sourceArray","replacement","splice","newText","rept","count","repeat","originalStr","digits","precision","findText","withinText","reString","re","RegExp","getSeconds","sign","sin","sortedArray","normalize","va","vb","sortBy","requiredType","decorated","exprA","exprB","split","separator","sqrt","prefix","stdev","coercedValues","mean","sumSquare","stdevp","meanSumSquare","substitute","src","old","whch","found","tan","time","toArray","toDate","iso","dateparts","d","x","range","getTime","today","indent","trim","true","unique","valueArray","lookup","upper","weekday","date","getDay","zip","functions","fname","func","_runtime","_validateArgs","argName","signature","bResolved","pluralized","argsNeeded","currentSpec","actualType","limit","functionEntry","Formula","stringToNumberFn","stringToNumber","getToNumber","compile","message","formula","run","createFieldset","fsname","isObj","fields","fieldset","_add","$name","$value","createFields","parent","childref","item","readonly","required","toJSON","createField","ret","window","addEventListener","dataElement","document","getElementById","debugInfo","defaultData","params","URLSearchParams","location","has","sampleJSON","atob","description","style","display","innerText","getElementsByClassName","classList","add","localStorage","getItem","setItem","input","useFields","checked","jsonData","dataRoot","allFields","form","createForm","jsonResult","innerHTML","remove","history","pushState","title","target","fetch","then","g4","strippedGrammar"],"sourceRoot":""}