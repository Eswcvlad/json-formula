[
  {
    "comment": "abs",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "abs()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "abs(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[abs(`false`), abs(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "abs(13.37)",
        "result": 13.37
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(\"42\")",
        "result": 42
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "abs(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "abs(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "abs(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "abs(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "acos",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "acos()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "acos(0, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(acos(`null`) - 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "abs(acos(`false`) - 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(acos(`true`)) < 1e-12",
        "result": true
      },
      {
        "description": "(number/in-range) -> OK",
        "expression": "abs(acos(-1) - 3.141592653589793) < 1e-12",
        "result": true
      },
      {
        "description": "(number/lt-than-minus-one) -> EvaluationError",
        "expression": "acos(-1.01)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/gt-than-one) -> EvaluationError",
        "expression": "acos(1.01)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(acos(\"\") - 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(acos(\"0.5\") - 1.0471975511965979) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "acos(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "acos(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "acos(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "acos(&0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "and",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "and()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "and(`null`)",
        "result": false
      },
      {
        "description": "(null, null) -> OK",
        "expression": "and(`null`, `null`)",
        "result": false
      },
      {
        "description": "(bool) -> OK",
        "expression": "[and(`false`), and(`true`)]",
        "result": [false, true]
      },
      {
        "description": "(bool, bool) -> OK",
        "expression": "[and(`false`, `false`), and(`true`, `false`), and(`false`, `true`), and(`true`, `true`)]",
        "result": [false, false, false, true]
      },
      {
        "description": "(number) -> OK",
        "expression": "[and(-1), and(0), and(1)]",
        "result": [true, false, true]
      },
      {
        "description": "(string) -> OK",
        "expression": "[and(\"\"), and(\"false\"), and(\"true\")]",
        "result": [false, true, true]
      },
      {
        "description": "(array) -> OK",
        "expression": "[and(`[]`), and(`[{}]`)]",
        "result": [false, true]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "[and(`{}`), and(`{\"a\": 1}`)]",
        "result": [false, true]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "and(&false)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "asin",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "asin()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "asin(0, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(asin(`null`)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "abs(asin(`false`)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(asin(`true`) - 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(number/in-range) -> OK",
        "expression": "abs(asin(-1) + 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(number/lt-than-minus-one) -> EvaluationError",
        "expression": "asin(-1.01)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/gt-than-one) -> EvaluationError",
        "expression": "asin(1.01)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(asin(\"\")) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(asin(\"0.5\") - 0.5235987755982989) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "asin(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "asin(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "asin(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "asin(&0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "atan2",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "atan2()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, any) -> FunctionError",
        "expression": "atan2(1, 2, 3)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number) -> OK",
        "expression": "abs(atan2(`null`, -1) - 3.141592653589793) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false, number) -> OK",
        "expression": "abs(atan2(`false`, -1) - 3.141592653589793) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true, number) -> OK",
        "expression": "abs(atan2(`true`, 1) - 0.7853981633974483) < 1e-12",
        "result": true
      },
      {
        "description": "(number, number) -> OK",
        "expression": "abs(atan2(-1, 1) + 0.7853981633974483) < 1e-12",
        "result": true
      },
      {
        "description": "(string/empty, number) -> OK",
        "expression": "abs(atan2(\"\", -1) - 3.141592653589793) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number, number) -> OK",
        "expression": "abs(atan2(\"1\", -1) - 2.356194490192345) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number, number) -> TypeError",
        "expression": "atan2(\"uasdicyb\", 1)",
        "error": "TypeError"
      },
      {
        "description": "(array, number) -> TypeError",
        "expression": "atan2(`[1]`, 1)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "atan2({a: 1}, 1)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "atan2(&1, 1)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> OK",
        "expression": "abs(atan2(-1, `null`) + 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(number, bool/false) -> OK",
        "expression": "abs(atan2(-1, `false`) + 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(number, bool/true) -> OK",
        "expression": "abs(atan2(-1, `true`) + 0.7853981633974483) < 1e-12",
        "result": true
      },
      {
        "description": "(number, string/empty) -> OK",
        "expression": "abs(atan2(-1, \"\") + 1.5707963267948966) < 1e-12",
        "result": true
      },
      {
        "description": "(number, string/number) -> OK",
        "expression": "abs(atan2(1, \"-1\") - 2.356194490192345) < 1e-12",
        "result": true
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "atan2(-1, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "atan2(1, `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "atan2(1, {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "atan2(1, &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "avg",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "avg()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "avg(`[1, 2, 3]`, `[4, 5]`)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> EvaluationError",
        "expression": "avg(`null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool) -> OK",
        "expression": "[avg(`false`), avg(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "avg(13.37)",
        "result": 13.37
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "avg(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "avg(\"42\")",
        "result": 42
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "avg(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array/empty) -> EvaluationError",
        "expression": "avg(`[]`)",
        "error": "EvaluationError"
      },
      {
        "description": "(array/null) -> OK",
        "expression": "avg(`[null, null]`)",
        "result": 0
      },
      {
        "description": "(array/bool) -> OK",
        "expression": "avg(`[false, true]`)",
        "result": 0.5
      },
      {
        "description": "(array/number) -> OK",
        "expression": "avg(`[1, 2, 3]`)",
        "result": 2
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "avg(`[\"1\", \"2\", \"3\"]`)",
        "result": 2
      },
      {
        "description": "(array/string/with-empty) -> OK",
        "expression": "avg(`[\"1\", \"2\", \"\"]`)",
        "result": 1
      },
      {
        "description": "(array/string/with-non-number) -> TypeError",
        "expression": "avg(`[1, \"asd\", 2]`)",
        "error": "TypeError"
      },
      {
        "description": "(array/array) -> TypeError",
        "expression": "avg(`[[1]]`)",
        "error": "TypeError"
      },
      {
        "description": "(array/object) -> TypeError",
        "expression": "avg(`[{\"1\": 2}]`)",
        "error": "TypeError"
      },
      {
        "description": "(array/mixed) -> OK",
        "expression": "avg(`[null, false, true, 1, \"1\", \"\"]`)",
        "result": 0.5
      },
      {
        "description": "(object) -> TypeError",
        "expression": "avg(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "avg(&`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "casefold",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "casefold()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "casefold(\"Жж\", \"Дд\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "casefold(`null`)",
        "result": ""
      },
      {
        "description": "(bool) -> OK",
        "expression": "[casefold(`false`), casefold(`true`)]",
        "result": ["false", "true"]
      },
      {
        "description": "(number) -> OK",
        "expression": "casefold(13.37)",
        "result": "13.37"
      },
      {
        "description": "(string) -> OK",
        "expression": "casefold(\"Жж\")",
        "result": "жж"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "casefold(`[\"Жж\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "casefold(`{\"Жж\": \"Дд\"}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "casefold(&\"Жж\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "ceil",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "ceil()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "ceil(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "ceil(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[ceil(`false`), ceil(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "ceil(13.37)",
        "result": 14
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "ceil(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "ceil(\"42.24\")",
        "result": 43
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "ceil(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "ceil(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "ceil(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "ceil(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "codePoint",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "codePoint()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "codePoint(\"😁\", \"😂\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "codePoint(`null`)",
        "result": null
      },
      {
        "description": "(bool) -> OK",
        "expression": "[codePoint(`false`), codePoint(`true`)]",
        "result": [102, 116]
      },
      {
        "description": "(number) -> OK",
        "expression": "codePoint(13.37)",
        "result": 49
      },
      {
        "description": "(string) -> OK",
        "expression": "codePoint(\"😁\")",
        "result": 128513
      },
      {
        "description": "(array) -> TypeError",
        "expression": "codePoint(`[\"😁\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "codePoint(`{\"😁\": \"😂\"}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "codePoint(&\"😁\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "contains",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "contains()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, any) -> FunctionError",
        "expression": "contains(\"abcd\", \"a\", \"b\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, null) -> TypeError",
        "expression": "contains(`null`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(null, bool/false) -> TypeError",
        "expression": "contains(`null`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(null, bool/true) -> TypeError",
        "expression": "contains(`null`, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number) -> TypeError",
        "expression": "contains(`null`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(null, string/empty) -> TypeError",
        "expression": "contains(`null`, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(null, string/non-empty) -> TypeError",
        "expression": "contains(`null`, \"A\")",
        "error": "TypeError"
      },
      {
        "description": "(null, array) -> TypeError",
        "expression": "contains(`null`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(null, object) -> TypeError",
        "expression": "contains(`null`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(null, expression) -> TypeError",
        "expression": "contains(`null`, &\"a\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, null) -> TypeError",
        "expression": "contains(`false`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, bool) -> TypeError",
        "expression": "contains(`false`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number) -> TypeError",
        "expression": "contains(`false`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/empty) -> TypeError",
        "expression": "contains(`false`, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/non-empty) -> TypeError",
        "expression": "contains(`false`, \"e\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, array) -> TypeError",
        "expression": "contains(`false`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, object) -> TypeError",
        "expression": "contains(`false`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, expression) -> TypeError",
        "expression": "contains(`false`, &\"a\")",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> TypeError",
        "expression": "contains(0, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(number, bool) -> TypeError",
        "expression": "contains(0, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number) -> TypeError",
        "expression": "contains(-0.123, -0.123)",
        "error": "TypeError"
      },
      {
        "description": "(number, string/empty) -> TypeError",
        "expression": "contains(0, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/non-empty) -> TypeError",
        "expression": "contains(0.123, \"123\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "contains(0, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "contains(0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "contains(0, &\"a\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> TypeError",
        "expression": "contains(\"abc\", `null`)",
        "error": "TypeError"
      },
      {
        "description": "(string, bool) -> TypeError",
        "expression": "contains(\"B: true!\", `true`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number) -> TypeError",
        "expression": "contains(\"Have 0.5 issues\", 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(string, string) -> OK",
        "expression": "[contains(\"abcd\", \"a\"), contains(\"abcd\", \"e\")]",
        "result": [true, false]
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "contains(\"abcd\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "contains(\"abcd\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "contains(\"abcd\", &\"a\")",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> OK",
        "expression": "[contains(`[1, 2, 3]`, `null`), contains(`[null, 2, 3]`, `null`)]",
        "result": [false, true]
      },
      {
        "description": "(array, bool) -> OK",
        "expression": "[contains(`[false, 2, 3]`, `false`), contains(`[false, 2, 3]`, `true`)]",
        "result": [true, false]
      },
      {
        "description": "(array, number) -> OK",
        "expression": "[contains(`[1, 2, 3]`, 3), contains(`[1, 2, 3]`, 4)]",
        "result": [true, false]
      },
      {
        "description": "(array, string) -> OK",
        "expression": "[contains(`[\"a\", \"b\"]`, \"a\"), contains(`[\"a\", \"b\"]`, \"c\")]",
        "result": [true, false]
      },
      {
        "description": "(array, array) -> OK",
        "expression": "[contains([1, `[2]`, 3], `[2]`), contains([1, `[2]`, 3], `[3]`)]",
        "result": [true, false]
      },
      {
        "description": "(array, object) -> OK",
        "expression": "[contains([1, {a: 1}, 3], {a: 1}), contains([1, {a: 1}, 3], {a: 2})]",
        "result": [true, false]
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "contains([1, 2, 3], &\"a\")",
        "error": "TypeError"
      },
      {
        "description": "(object, null) -> TypeError",
        "expression": "contains(`{}`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool) -> TypeError",
        "expression": "contains(`{}`, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "contains(`{}`, 1)",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "contains(`{}`, \"a\")",
        "error": "TypeError"
      },
      {
        "description": "(object, array) -> TypeError",
        "expression": "contains(`{}`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(object, object) -> TypeError",
        "expression": "contains(`{}`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "contains(`{}`, &\"a\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, null) -> TypeError",
        "expression": "contains(&\"b\", `null`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, bool) -> TypeError",
        "expression": "contains(&\"b\", `true`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "contains(&\"b\", 1)",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "contains(&\"b\", \"a\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, array) -> TypeError",
        "expression": "contains(&\"b\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, object) -> TypeError",
        "expression": "contains(&\"b\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression) -> TypeError",
        "expression": "contains(&\"b\", &\"a\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "cos",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "cos()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "cos(0, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(cos(`null`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "abs(cos(`false`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(cos(`true`) - 0.5403023058681398) < 1e-12",
        "result": true
      },
      {
        "description": "(number) -> OK",
        "expression": "abs(cos(-1) - 0.5403023058681398) < 1e-12",
        "result": true
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(cos(\"\") - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(cos(\"0.5\") - 0.8775825618903728) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "cos(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "cos(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "cos(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "cos(&0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "datedif",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "datedif()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, string, any) -> FunctionError",
        "expression": "datedif(1, 3, \"d\", 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number, string) -> OK",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(`null`, 1049.5, \"d\")",
        "result": 1049
      },
      {
        "description": "(bool/false, number, string) -> OK",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(`false`, 1049.5, \"d\")",
        "result": 1049
      },
      {
        "description": "(bool/true, number, string) -> OK",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(`true`, 1049.5, \"d\")",
        "result": 1048
      },
      {
        "description": "(number/lt-than-end, number, string) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"d\")",
        "result": 983
      },
      {
        "description": "(number/gt-than-end, number, string) -> FunctionError",
        "__comments": [
          "start_date: 1973-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(1162.25, 1049.5, \"d\")",
        "error": "FunctionError"
      },
      {
        "description": "(string/empty, number, string) -> OK",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(\"\", 1049.5, \"d\")",
        "result": 1049
      },
      {
        "description": "(string/number, number, string) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(\"66.25\", 1049.5, \"d\")",
        "result": 983
      },
      {
        "description": "(string/non-number, number, string) -> TypeError",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(\"str\", 1049.5, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(array, number, string) -> TypeError",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(`[1]`, 1049.5, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(object, number, string) -> TypeError",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(`{}`, 1049.5, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, number, string) -> TypeError",
        "__comments": ["end_date: 1972-11-15T12:00:00Z"],
        "expression": "datedif(&1, 1049.5, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(number, null, string) -> OK",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, `null`, \"d\")",
        "result": 0
      },
      {
        "description": "(number, bool/false, string) -> OK",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, `false`, \"d\")",
        "result": 0
      },
      {
        "description": "(number, bool/true, string) -> OK",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, `true`, \"d\")",
        "result": 1
      },
      {
        "description": "(number, string/empty, string) -> OK",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, \"\", \"d\")",
        "result": 0
      },
      {
        "description": "(number, string/number, string) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, \"1049.5\", \"d\")",
        "result": 983
      },
      {
        "description": "(number, string/non-number, string) -> TypeError",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, \"str\", \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array, string) -> TypeError",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, `[1]`, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(number, object, string) -> TypeError",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, `{}`, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(number, expression, string) -> TypeError",
        "__comments": ["start_date: 1970-01-01T00:00:00Z"],
        "expression": "datedif(0, &1, \"d\")",
        "error": "TypeError"
      },
      {
        "description": "(number, number, null) -> FunctionError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, `null`)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, bool/false) -> FunctionError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, `false`)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, bool/true) -> FunctionError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, `true`)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, number) -> FunctionError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, string/valid/y) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"y\")",
        "result": 2
      },
      {
        "description": "(number, number, string/valid/Y) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"Y\")",
        "result": 2
      },
      {
        "description": "(number, number, string/valid/m) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"m\")",
        "result": 32
      },
      {
        "description": "(number, number, string/valid/M) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"M\")",
        "result": 32
      },
      {
        "description": "(number, number, string/valid/d) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"d\")",
        "result": 983
      },
      {
        "description": "(number, number, string/valid/D) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"D\")",
        "result": 983
      },
      {
        "description": "(number, number, string/valid/ym) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"ym\")",
        "result": 8
      },
      {
        "description": "(number, number, string/valid/Ym) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"Ym\")",
        "result": 8
      },
      {
        "description": "(number, number, string/valid/yM) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"yM\")",
        "result": 8
      },
      {
        "description": "(number, number, string/valid/YM) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"YM\")",
        "result": 8
      },
      {
        "description": "(number, number, string/valid/yd) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"yd\")",
        "result": 252
      },
      {
        "description": "(number, number, string/valid/Yd) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"Yd\")",
        "result": 252
      },
      {
        "description": "(number, number, string/valid/yD) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"yD\")",
        "result": 252
      },
      {
        "description": "(number, number, string/valid/YD) -> OK",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"YD\")",
        "result": 252
      },
      {
        "description": "(number, number, string/invalid) -> FunctionError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, \"str\")",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, array) -> TypeError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, [\"d\"])",
        "error": "TypeError"
      },
      {
        "description": "(number, number, object) -> TypeError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number, expression) -> TypeError",
        "__comments": [
          "start_date: 1970-03-08T06:00:00Z\n",
          "end_date: 1972-11-15T12:00:00Z"
        ],
        "expression": "datedif(66.25, 1049.5, &\"d\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "datetime",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "datetime()",
        "error": "FunctionError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, number/int, any) -> FunctionError",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, 0, 0)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number/int, number/int) -> OK",
        "expression": "datetime(`null`, 1, 1)",
        "result": -25567
      },
      {
        "description": "(bool/false, number/int, number/int) -> OK",
        "expression": "datetime(`false`, 1, 1)",
        "result": -25567
      },
      {
        "description": "(bool/true, number/int, number/int) -> OK",
        "expression": "datetime(`true`, 1, 1)",
        "result": -25202
      },
      {
        "description": "(number/int/positive, number/int, number/int) -> OK",
        "expression": "datetime(1970, 1, 1)",
        "result": 0
      },
      {
        "description": "(number/int/zero, number/int, number/int) -> OK",
        "expression": "datetime(0, 1, 1)",
        "result": -25567
      },
      {
        "description": "(number/int/negative, number/int, number/int) -> OK",
        "expression": "datetime(-1, 1, 1)",
        "result": -719893
      },
      {
        "description": "(number/float/positive, number/int, number/int) -> OK",
        "expression": "datetime(1970.9, 1, 1)",
        "result": 0
      },
      {
        "description": "(number/float/negative, number/int, number/int) -> OK",
        "expression": "datetime(-1.9, 1, 1)",
        "result": -719893
      },
      {
        "description": "(string/empty, number/int, number/int) -> OK",
        "expression": "datetime(\"\", 1, 1)",
        "result": -25567
      },
      {
        "description": "(string/number, number/int, number/int) -> OK",
        "expression": "datetime(\"1970.5\", 1, 1)",
        "result": 0
      },
      {
        "description": "(string/non-number, number/int, number/int) -> TypeError",
        "expression": "datetime(\"str\", 1, 1)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int, number/int) -> TypeError",
        "expression": "datetime(`[1970]`, 1, 1)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int, number/int) -> TypeError",
        "expression": "datetime(`{}`, 1, 1)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int, number/int) -> TypeError",
        "expression": "datetime(&1970, 1, 1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, null, number/int) -> OK",
        "expression": "datetime(1970, `null`, 1)",
        "result": -31
      },
      {
        "description": "(number/int, bool/false, number/int) -> OK",
        "expression": "datetime(1970, `false`, 1)",
        "result": -31
      },
      {
        "description": "(number/int, bool/true, number/int) -> OK",
        "expression": "datetime(1970, `true`, 1)",
        "result": 0
      },
      {
        "description": "(number/int, number/int/positive, number/int) -> OK",
        "expression": "datetime(1970, 13, 1)",
        "result": 365
      },
      {
        "description": "(number/int, number/int/zero, number/int) -> OK",
        "expression": "datetime(1970, 0, 1)",
        "result": -31
      },
      {
        "description": "(number/int, number/int/negative, number/int) -> OK",
        "expression": "datetime(1970, -13, 1)",
        "result": -426
      },
      {
        "description": "(number/int, number/float/positive, number/int) -> OK",
        "expression": "datetime(1970, 13.9, 1)",
        "result": 365
      },
      {
        "description": "(number/int, number/float/negative, number/int) -> OK",
        "expression": "datetime(1970, -13.9, 1)",
        "result": -426
      },
      {
        "description": "(number/int, string/empty, number/int) -> OK",
        "expression": "datetime(1970, \"\", 1)",
        "result": -31
      },
      {
        "description": "(number/int, string/number, number/int) -> OK",
        "expression": "datetime(1970, \"13.9\", 1)",
        "result": 365
      },
      {
        "description": "(number/int, string/non-number, number/int) -> TypeError",
        "expression": "datetime(1970, \"str\", 1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, array, number/int) -> TypeError",
        "expression": "datetime(1970, `[1]`, 1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, object, number/int) -> TypeError",
        "expression": "datetime(1970, `{}`, 1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, expression, number/int) -> TypeError",
        "expression": "datetime(1970, &1, 1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, null) -> OK",
        "expression": "datetime(1970, 1, `null`)",
        "result": -1
      },
      {
        "description": "(number/int, number/int, bool/false) -> OK",
        "expression": "datetime(1970, 1, `false`)",
        "result": -1
      },
      {
        "description": "(number/int, number/int, bool/true) -> OK",
        "expression": "datetime(1970, 1, `true`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int/positive) -> OK",
        "expression": "datetime(1970, 1, 40)",
        "result": 39
      },
      {
        "description": "(number/int, number/int, number/int/zero) -> OK",
        "expression": "datetime(1970, 1, 0)",
        "result": -1
      },
      {
        "description": "(number/int, number/int, number/int/negative) -> OK",
        "expression": "datetime(1970, 1, -40)",
        "result": -41
      },
      {
        "description": "(number/int, number/int, number/float/positive) -> OK",
        "expression": "datetime(1970, 1, 40.9)",
        "result": 39
      },
      {
        "description": "(number/int, number/int, number/float/negative) -> OK",
        "expression": "datetime(1970, 1, -40.9)",
        "result": -41
      },
      {
        "description": "(number/int, number/int, string/empty) -> OK",
        "expression": "datetime(1970, 1, \"\")",
        "result": -1
      },
      {
        "description": "(number/int, number/int, string/number) -> OK",
        "expression": "datetime(1970, 1, \"40.9\")",
        "result": 39
      },
      {
        "description": "(number/int, number/int, string/non-number) -> TypeError",
        "expression": "datetime(1970, 1, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, array) -> TypeError",
        "expression": "datetime(1970, 1, `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, object) -> TypeError",
        "expression": "datetime(1970, 1, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, expression) -> TypeError",
        "expression": "datetime(1970, 1, &1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, null) -> OK",
        "expression": "datetime(1970, 1, 1, `null`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, bool/false) -> OK",
        "expression": "datetime(1970, 1, 1, `false`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, bool/true) -> OK",
        "expression": "datetime(1970, 1, 1, `true`) == (1 / 24)",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 36)",
        "result": 1.5
      },
      {
        "description": "(number/int, number/int, number/int, number/int/zero) -> OK",
        "expression": "datetime(1970, 1, 1, 0)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int/negative) -> OK",
        "expression": "datetime(1970, 1, 1, -36)",
        "result": -1.5
      },
      {
        "description": "(number/int, number/int, number/int, number/float/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 36.9)",
        "result": 1.5
      },
      {
        "description": "(number/int, number/int, number/int, number/float/negative) -> OK",
        "expression": "datetime(1970, 1, 1, -36.9)",
        "result": -1.5
      },
      {
        "description": "(number/int, number/int, number/int, string/empty) -> OK",
        "expression": "datetime(1970, 1, 1, \"\")",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, string/number) -> OK",
        "expression": "datetime(1970, 1, 1, \"36.9\")",
        "result": 1.5
      },
      {
        "description": "(number/int, number/int, number/int, string/non-number) -> TypeError",
        "expression": "datetime(1970, 1, 1, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, array) -> TypeError",
        "expression": "datetime(1970, 1, 1, `[12]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, object) -> TypeError",
        "expression": "datetime(1970, 1, 1, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, expression) -> TypeError",
        "expression": "datetime(1970, 1, 1, &12)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, null) -> OK",
        "expression": "datetime(1970, 1, 1, 0, `null`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, bool/false) -> OK",
        "expression": "datetime(1970, 1, 1, 0, `false`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, bool/true) -> OK",
        "expression": "datetime(1970, 1, 1, 0, `true`) == (1 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 75) == (75 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int/zero) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int/negative) -> OK",
        "expression": "datetime(1970, 1, 1, 0, -75) == -(75 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/float/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 75.9) == (75 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/float/negative) -> OK",
        "expression": "datetime(1970, 1, 1, 0, -75.9) == -(75 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, string/empty) -> OK",
        "expression": "datetime(1970, 1, 1, 0, \"\")",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, string/number) -> OK",
        "expression": "datetime(1970, 1, 1, 0, \"75\") == (75 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, string/non-number) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, array) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, `[30]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, object) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, expression) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, &30)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, null) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, `null`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, bool/false) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, `false`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, bool/true) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, `true`) == (1 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 75) == (75 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int/zero) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int/negative) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, -75) == -(75 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/float/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 75.9) == (75 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/float/negative) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, -75.9) == -(75 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, string/empty) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, \"\")",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, string/number) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, \"75\") == (75 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, string/non-number) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, array) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, `[30]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, object) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, expression) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, &30)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, null) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, `null`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, bool/false) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, `false`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, bool/true) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, `true`) == (1 / (24 * 60 * 60 * 1000))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, number/int/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, 7500) == (7500 / (24 * 60 * 60 * 1000))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, number/int/zero) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, 0)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, number/int/negative) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, -7500) == -(7500 / (24 * 60 * 60 * 1000))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, number/float/positive) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, 7500.9) == (7500 / (24 * 60 * 60 * 1000))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, number/float/negative) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, -7500.9) == -(7500 / (24 * 60 * 60 * 1000))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, string/empty) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, \"\")",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, string/number) -> OK",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, \"7500\") == (7500 / (24 * 60 * 60 * 1000))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, string/non-number) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, array) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, `[30]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, object) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, number/int, number/int, number/int, number/int, expression) -> TypeError",
        "expression": "datetime(1970, 1, 1, 0, 0, 0, &30)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "day",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "day()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "day(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "day(`null`)",
        "result": 1
      },
      {
        "description": "(bool) -> OK",
        "expression": "[day(`false`), day(`true`)]",
        "result": [1, 2]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "day(524.1807150115741)",
        "result": 9
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "day(\"\")",
        "result": 1
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "day(\"524.1807150115741\")",
        "result": 9
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "day(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "day(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "day(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "day(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "debug",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "debug()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any, any) -> FunctionError",
        "expression": "debug(\"msg\", \"x msg\", 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "debug(`null`)",
        "result": null
      },
      {
        "description": "(bool) -> OK",
        "expression": "[debug(`false`), debug(`true`)]",
        "result": [false, true]
      },
      {
        "description": "(number) -> OK",
        "expression": "debug(13.37)",
        "result": 13.37
      },
      {
        "description": "(string) -> OK",
        "expression": "debug(\"value\")",
        "result": "value"
      },
      {
        "description": "(array) -> OK",
        "expression": "debug([1, \"key\", `true`])",
        "result": [1, "key", true]
      },
      {
        "description": "(object) -> OK",
        "expression": "debug({a: 1})",
        "result": { "a": 1 }
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "debug(&42)",
        "error": "TypeError"
      },
      {
        "description": "(any, null) -> OK",
        "expression": "debug([1, 2, 4], `null`)",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, bool) -> OK",
        "expression": "debug([1, 2, 4], `false`)",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, number) -> OK",
        "expression": "debug([1, 2, 4], 13.37)",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, string) -> OK",
        "expression": "debug([1, 2, 4], \"debug message\")",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, array) -> OK",
        "expression": "debug([1, 2, 4], [\"debug\", \"message\"])",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, object) -> OK",
        "expression": "debug([1, 2, 4], {debug: \"message\"})",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, expression/valid) -> OK",
        "expression": "debug([1, 2, 4], &join(map(@, &toString(@)), \" - \"))",
        "result": [1, 2, 4]
      },
      {
        "description": "(any, expression/invalid) -> EvaluationError",
        "expression": "debug([1, 2, 4], &join(map(@, &toString(@ / 0)), \" - \"))",
        "error": "EvaluationError"
      }
    ]
  },
  {
    "comment": "deepScan",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "deepScan()",
        "error": "FunctionError"
      },
      {
        "description": "(object, string, any) -> FunctionError",
        "expression": "deepScan({a: 1}, \"a\", \"b\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, null) -> TypeError",
        "expression": "deepScan(`null`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(null, bool) -> TypeError",
        "expression": "deepScan(`null`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number) -> OK",
        "expression": "deepScan(`null`, 0)",
        "result": []
      },
      {
        "description": "(null, string) -> OK",
        "expression": "deepScan(`null`, \"key\")",
        "result": []
      },
      {
        "description": "(null, array) -> TypeError",
        "expression": "deepScan(`null`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(null, object) -> TypeError",
        "expression": "deepScan(`null`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(null, expression) -> TypeError",
        "expression": "deepScan(`null`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, null) -> TypeError",
        "expression": "[deepScan(`false`, `null`), deepScan(`true`, `null`)]",
        "error": "TypeError"
      },
      {
        "description": "(bool, bool) -> TypeError",
        "expression": "deepScan(`false`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int) -> TypeError",
        "expression": "deepScan(`false`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/float) -> TypeError",
        "expression": "deepScan(`false`, 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/empty) -> TypeError",
        "expression": "deepScan(`false`, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/number) -> TypeError",
        "expression": "deepScan(`false`, \"0\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/non-number) -> TypeError",
        "expression": "deepScan(`false`, \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, array) -> TypeError",
        "expression": "deepScan(`false`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, object) -> TypeError",
        "expression": "deepScan(`false`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, expression) -> TypeError",
        "expression": "deepScan(`false`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> TypeError",
        "expression": "deepScan(42, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(number, bool) -> TypeError",
        "expression": "deepScan(42, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int) -> TypeError",
        "expression": "deepScan(42, 0)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/float) -> TypeError",
        "expression": "deepScan(42, 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(number, string/empty) -> TypeError",
        "expression": "deepScan(42, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/number) -> TypeError",
        "expression": "deepScan(42, \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "deepScan(42, \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "deepScan(42, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "deepScan(42, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "deepScan(42, &0)",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> TypeError",
        "expression": "deepScan(\"abc\", `null`)",
        "error": "TypeError"
      },
      {
        "description": "(string, bool) -> TypeError",
        "expression": "deepScan(\"abc\", `false`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int) -> TypeError",
        "expression": "deepScan(\"abc\", 0)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/float) -> TypeError",
        "expression": "deepScan(\"abc\", 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(string, string/empty) -> TypeError",
        "expression": "deepScan(\"abc\", \"\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string/number) -> TypeError",
        "expression": "deepScan(\"abc\", \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string/non-number) -> TypeError",
        "expression": "deepScan(\"abc\", \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "deepScan(\"abc\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "deepScan(\"abc\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "deepScan(\"abc\", &0)",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> TypeError",
        "expression": "deepScan(`[1, {\"\": [11, 22, 33], \"0\": [44, 55, 66]}, 3]`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array, bool/false) -> TypeError",
        "expression": "deepScan(`[1, {\"0\": [11, 22, 33], \"false\": [44, 55, 66]}, 3]`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array, bool/true) -> TypeError",
        "expression": "deepScan(`[1, {\"1\": [11, 22, 33], \"true\": [44, 55, 66]}, 3]`, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int) -> OK",
        "expression": "sortBy(deepScan(`[1, {\"1\": [11, 22, 33], \"true\": [44, 55, 66]}, 3]`, 1), &toString(@))",
        "result": [22, 55, { "1": [11, 22, 33], "true": [44, 55, 66] }]
      },
      {
        "description": "(array, number/float) -> OK",
        "expression": "[deepScan(`[1, {\"1\": [11, 22, 33], \"1.1\": [44, 55, 66]}, 3]`, 1.1), deepScan(`[1, {\"1\": [11, 22, 33], \"1.5\": [44, 55, 66]}, 3]`, 1.5), deepScan(`[1, {\"1\": [11, 22, 33], \"1.9\": [44, 55, 66]}, 3]`, 1.9)]",
        "result": [
          [{ "1": [11, 22, 33], "1.1": [44, 55, 66] }, 22, 55],
          [{ "1": [11, 22, 33], "1.5": [44, 55, 66] }, 22, 55],
          [{ "1": [11, 22, 33], "1.9": [44, 55, 66] }, 22, 55]
        ]
      },
      {
        "description": "(array, string/empty) -> OK",
        "expression": "deepScan(`[1, {\"\": [11, 22, 33], \"0\": [44, 55, 66]}, 3]`, \"\")",
        "result": [[11, 22, 33]]
      },
      {
        "description": "(array, string/number) -> OK",
        "expression": "deepScan(`[1, {\"0\": [11, 22, 33], \"0.5\": [44, 55, 66]}, 3]`, \"0.5\")",
        "result": [[44, 55, 66]]
      },
      {
        "description": "(array, string/non-number) -> OK",
        "expression": "deepScan(`[1, {\"0\": [11, 22, 33], \"key\": [44, 55, 66]}, 3]`, \"key\")",
        "result": [[44, 55, 66]]
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "deepScan([1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "deepScan([1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "deepScan(`[1, 2]`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(object, null) -> TypeError",
        "expression": "deepScan({'': 1, '0': [{'': 11, '0': 22, 'null': 33}, {'': 44, '0': 55, 'null': 66}], 'null': 3}, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool/false) -> TypeError",
        "expression": "deepScan({'': 1, '0': [{'': 11, '0': 22, 'false': 33}, {'': 44, '0': 55, 'false': 66}], 'false': 3}, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool/true) -> TypeError",
        "expression": "deepScan({'': 1, '1': [{'': 11, '1': 22, 'true': 33}, {'': 44, '1': 55, 'true': 66}], 'true': 3}, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int) -> OK",
        "expression": "deepScan({'': 1, '1': [{'': 11, '1': 22, 'true': 33}, {'': 44, '1': 55, 'true': 66}], 'true': 3}, 1)",
        "result": [{ "": 44, "1": 55, "true": 66 }]
      },
      {
        "description": "(object, number/float) -> OK",
        "expression": "[deepScan({'': 1, '1.1': [{'': 11, '1.1': 22, 'true': 33}, {'': 44, '1.1': 55, 'true': 66}], 'true': 3}, 1.1), deepScan({'': 1, '1.5': [{'': 11, '1.5': 22, 'true': 33}, {'': 44, '1.5': 55, 'true': 66}], 'true': 3}, 1.5), deepScan({'': 1, '1.9': [{'': 11, '1.9': 22, 'true': 33}, {'': 44, '1.9': 55, 'true': 66}], 'true': 3}, 1.9)]",
        "result": [
          [{ "": 44, "1.1": 55, "true": 66 }],
          [{ "": 44, "1.5": 55, "true": 66 }],
          [{ "": 44, "1.9": 55, "true": 66 }]
        ]
      },
      {
        "description": "(object, string/empty) -> OK",
        "expression": "sortBy(deepScan({'': 1, '0': [{'': 11, '0': 22, 'null': 33}, {'': 44, '0': 55, 'null': 66}], 'null': 3}, \"\"), &toString(@))",
        "result": [1, 11, 44]
      },
      {
        "description": "(object, string/number) -> OK",
        "expression": "deepScan({'': 1, '1': [{'': 11, '1': 22, 'true': 33}, {'': 44, '1': 55, 'true': 66}], 'true': 3}, \"1\")",
        "result": [
          [
            { "": 11, "1": 22, "true": 33 },
            { "": 44, "1": 55, "true": 66 }
          ],
          22,
          55
        ]
      },
      {
        "description": "(object, string/non-number) -> OK",
        "expression": "sortBy(deepScan({'': 1, '1': [{'': 11, '1': 22, 'key': 33}, {'': 44, '1': 55, 'key': 66}], 'key': 3}, \"key\"), &toString(@))",
        "result": [3, 33, 66]
      },
      {
        "description": "(object, array) -> TypeError",
        "expression": "deepScan(`{}`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(object, object) -> TypeError",
        "expression": "deepScan(`{}`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "deepScan(`{}`, &\"key\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, null) -> TypeError",
        "expression": "deepScan(&[1, 2], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, bool) -> TypeError",
        "expression": "deepScan(&[1, 2], `true`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "deepScan(&[1, 2], 1)",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "deepScan(&[1, 2], \"a\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, array) -> TypeError",
        "expression": "deepScan(&[1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, object) -> TypeError",
        "expression": "deepScan(&[1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression) -> TypeError",
        "expression": "deepScan(&[1, 2], &\"a\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "endsWith",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "endsWith()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, any) -> FunctionError",
        "expression": "endsWith(\"abcd\", \"cd\", \"d\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string) -> OK",
        "expression": "[endsWith(`null`, \"\"), endsWith(`null`, \"a\")]",
        "result": [true, false]
      },
      {
        "description": "(bool, string) -> OK",
        "expression": "[endsWith(`false`, \"b\"), endsWith(`false`, \"alse\")]",
        "result": [false, true]
      },
      {
        "description": "(number, string) -> OK",
        "expression": "[endsWith(13.37, \"3.37\"), endsWith(13.37, \"3\")]",
        "result": [true, false]
      },
      {
        "description": "(string, string) -> OK",
        "expression": "[endsWith(\"😍Юникод😍\", \"😍\"), endsWith(\"😍Юникод😍\", \"😀\")]",
        "result": [true, false]
      },
      {
        "description": "(array, string) -> TypeError",
        "expression": "endsWith([1, 2], \"]\")",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "endsWith({a: 1}, \"}\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "endsWith(&\"abcd\", \"cd\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> OK",
        "expression": "[endsWith(\"\", `null`), endsWith(\"a\", `null`)]",
        "result": [true, true]
      },
      {
        "description": "(string, bool) -> OK",
        "expression": "[endsWith(\"This is false\", `false`), endsWith(\"This is false\", `true`)]",
        "result": [true, false]
      },
      {
        "description": "(string, number) -> OK",
        "expression": "[endsWith(\"Number is 42\", 42), endsWith(\"Number is 42\", 2), endsWith(\"Number is 42\", 1)]",
        "result": [true, true, false]
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "endsWith(\"abcd\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "endsWith(\"abcd\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "endsWith(\"abcd\", &\"cd\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "entries",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "entries()",
        "error": "FunctionError"
      },
      {
        "description": "(object, any) -> FunctionError",
        "expression": "entries({a: 1}, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "entries(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "entries(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "entries(-42)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> TypeError",
        "expression": "entries(\"something-random\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> OK",
        "expression": "entries([`null`, `false`, 1, \"str\", [0, 1, 2], {a: 1}])",
        "result": [
          ["0", null],
          ["1", false],
          ["2", 1],
          ["3", "str"],
          ["4", [0, 1, 2]],
          [
            "5",
            {
              "a": 1
            }
          ]
        ]
      },
      {
        "description": "(object) -> OK",
        "expression": "entries({b: 5})",
        "result": [["b", 5]]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "entries(&[0, 1, 2])",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "eomonth",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "eomonth()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int, any) -> FunctionError",
        "expression": "eomonth(2, 3, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number/int) -> OK",
        "expression": "eomonth(`null`, 0)",
        "result": 30
      },
      {
        "description": "(bool, number/int) -> OK",
        "expression": "[eomonth(`false`, 0), eomonth(`true`, 0)]",
        "result": [30, 30]
      },
      {
        "description": "(number, number/int) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "[eomonth(524.1807150115741, -1), eomonth(524.1807150115741, 0), eomonth(524.1807150115741, 1)]",
        "result": [515, 545, 576]
      },
      {
        "description": "(string/empty, number/int) -> OK",
        "expression": "eomonth(\"\", 0)",
        "result": 30
      },
      {
        "description": "(string/number, number/int) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(\"524.1807150115741\", 0)",
        "result": 545
      },
      {
        "description": "(string/non-number, number/int) -> TypeError",
        "expression": "eomonth(\"uasdicyb\", 0)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int) -> TypeError",
        "expression": "eomonth(`[1]`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int) -> TypeError",
        "expression": "eomonth(`{\"1\": 0}`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int) -> TypeError",
        "expression": "eomonth(&42, 0)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(524.1807150115741, `null`)",
        "result": 545
      },
      {
        "description": "(number, bool) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "[eomonth(524.1807150115741, `false`), eomonth(524.1807150115741, `true`)]",
        "result": [545, 576]
      },
      {
        "description": "(number, number/float) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "[eomonth(524.1807150115741, -1.1), eomonth(524.1807150115741, -0.9),eomonth(524.1807150115741, -0.1), eomonth(524.1807150115741, 0.1), eomonth(524.1807150115741, 0.9), eomonth(524.1807150115741, 1.1)]",
        "result": [515, 545, 545, 545, 545, 576]
      },
      {
        "description": "(number, string/empty) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(524.1807150115741, \"\")",
        "result": 545
      },
      {
        "description": "(number, string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "[eomonth(524.1807150115741, \"1\"), eomonth(524.1807150115741, \"1.1\")]",
        "result": [576, 576]
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(524.1807150115741, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(524.1807150115741, `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(524.1807150115741, `{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "eomonth(524.1807150115741, &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "exp",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "exp()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "exp(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(exp(`null`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "abs(exp(`false`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(exp(`true`) - 2.718281828459045) < 1e-12",
        "result": true
      },
      {
        "description": "(number) -> OK",
        "expression": "abs(exp(4.2) - 66.68633104092515) < 1e-12",
        "result": true
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(exp(\"\") - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(exp(\"4.2\") - 66.68633104092515) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "exp(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "exp(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "exp(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "exp(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "false",
    "given": {},
    "cases": [
      {
        "description": "(any) -> FunctionError",
        "expression": "false(1)",
        "error": "FunctionError"
      },
      {
        "description": "() -> OK",
        "expression": "false()",
        "result": false
      }
    ]
  },
  {
    "comment": "find",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "find()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, number/int, any) -> FunctionError",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 2, \"b\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string) -> OK",
        "expression": "find(`null`, \"A🙂Юникод🙃B\")",
        "result": 0
      },
      {
        "description": "(bool/false, string) -> OK",
        "expression": "find(`false`, \"🙂false🙃\")",
        "result": 1
      },
      {
        "description": "(bool/true, string) -> OK",
        "expression": "find(`true`, \"🙂true🙃\")",
        "result": 1
      },
      {
        "description": "(number, string) -> OK",
        "expression": "find(13.37, \"🙂13.37🙃\")",
        "result": 1
      },
      {
        "description": "(string/empty, string) -> OK",
        "expression": "find(\"\", \"A🙂Юникод🙃B\")",
        "result": 0
      },
      {
        "description": "(string/non-empty, string) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\")",
        "result": 1
      },
      {
        "description": "(array, string) -> TypeError",
        "expression": "find([1, 2], \"A🙂Юникод🙃B\")",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "find({a: 1}, \"A🙂Юникод🙃B\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "find(&\"A\", \"A🙂Юникод🙃B\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> OK",
        "expression": "find(\"\", `null`)",
        "result": 0
      },
      {
        "description": "(string, bool/false) -> OK",
        "expression": "find(\"als\", `false`)",
        "result": 1
      },
      {
        "description": "(string, bool/true) -> OK",
        "expression": "find(\"tru\", `true`)",
        "result": 0
      },
      {
        "description": "(string, number) -> OK",
        "expression": "find(\"3.3\", 13.37)",
        "result": 1
      },
      {
        "description": "(string, string/empty) -> OK",
        "expression": "find(\"\", \"\")",
        "result": 0
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "find(\"a\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "find(\"a\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "find(\"a\", &\"ab\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, null) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", `null`)",
        "result": 1
      },
      {
        "description": "(string, string, bool/false) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", `false`)",
        "result": 1
      },
      {
        "description": "(string, string, bool/true) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", `true`)",
        "result": 1
      },
      {
        "description": "(string, string, number/int/positive) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 2)",
        "result": null
      },
      {
        "description": "(string, string, number/int/zero) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 0)",
        "result": 1
      },
      {
        "description": "(string, string, number/int/negative) -> EvaluationError",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", -2)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, string, number/float/positive) -> OK",
        "expression": "[find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 1.1), find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 1.5), find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 1.9), find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", 2.1)]",
        "result": [1, 1, 1, null]
      },
      {
        "description": "(string, string, number/float/gt-minus-one) -> OK",
        "expression": "[find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", -0.1), find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", -0.5), find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", -0.9)]",
        "result": [1, 1, 1]
      },
      {
        "description": "(string, string, number/float/le-minus-one) -> EvaluationError",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", -1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, string, string/empty) -> OK",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", \"\")",
        "result": 1
      },
      {
        "description": "(string, string, string/number) -> OK",
        "expression": "[find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", \"1\"), find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", \"2\")]",
        "result": [1, null]
      },
      {
        "description": "(string, string, string/non-number) -> TypeError",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string/non-number, array) -> TypeError",
        "expression": "find(\"🙂Юникод🙃\", \"A🙂Юникод🙃B\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string/non-number, object) -> TypeError",
        "expression": "find(\"🙂*🙃\", \"A🙂Юникод🙃B\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string/non-number, expression) -> TypeError",
        "expression": "find(\"🙂*🙃\", \"A🙂Юникод🙃B\", &0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "floor",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "floor()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "floor(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "floor(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[floor(`false`), floor(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "floor(13.37)",
        "result": 13
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "floor(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "floor(\"42.24\")",
        "result": 42
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "floor(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "floor(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "floor(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "floor(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "fromCodePoint",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "fromCodePoint()",
        "error": "FunctionError"
      },
      {
        "description": "(int, any) -> FunctionError",
        "expression": "fromCodePoint(128579, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "fromCodePoint(`null`)",
        "result": "\u0000"
      },
      {
        "description": "(bool) -> OK",
        "expression": "[fromCodePoint(`false`), fromCodePoint(`true`)]",
        "result": ["\u0000", "\u0001"]
      },
      {
        "description": "(number/float/valid) -> OK",
        "expression": "[fromCodePoint(128579.1), fromCodePoint(128579.5), fromCodePoint(128579.9)]",
        "result": ["🙃", "🙃", "🙃"]
      },
      {
        "description": "(number/float/gt-minus-one) -> OK",
        "expression": "fromCodePoint(-0.9)",
        "result": "\u0000"
      },
      {
        "description": "(number/float/le-minus-one) -> EvaluationError",
        "expression": "fromCodePoint(-1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/float/lt-0x110000) -> OK",
        "expression": "fromCodePoint(1114111.9)",
        "result": "\uDBFF\uDFFF"
      },
      {
        "description": "(number/float/ge-0x110000) -> EvaluationError",
        "expression": "fromCodePoint(1114112.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/valid) -> OK",
        "expression": "fromCodePoint(128579)",
        "result": "🙃"
      },
      {
        "description": "(number/int/lt-zero) -> EvaluationError",
        "expression": "fromCodePoint(-1)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/gt-0x10FFFF) -> EvaluationError",
        "expression": "fromCodePoint(1114112)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "fromCodePoint(\"\")",
        "result": "\u0000"
      },
      {
        "description": "(string/number/valid) -> OK",
        "expression": "[fromCodePoint(\"128579\"), fromCodePoint(\"128579.1\")]",
        "result": ["🙃", "🙃"]
      },
      {
        "description": "(string/number/lt-zero) -> EvaluationError",
        "expression": "fromCodePoint(\"-1\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number/gt-0x10FFFF) -> EvaluationError",
        "expression": "fromCodePoint(\"1114112\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "fromCodePoint(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "fromCodePoint(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "fromCodePoint(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "fromCodePoint(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "fromEntries",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "fromEntries()",
        "error": "FunctionError"
      },
      {
        "description": "(array/valid-kv-pairs, any) -> FunctionError",
        "expression": "fromEntries([[\"a\", 1]], 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "fromEntries(`null`)",
        "result": {}
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "fromEntries(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "fromEntries(-42)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> TypeError",
        "expression": "fromEntries(\"something-random\")",
        "error": "TypeError"
      },
      {
        "description": "(array/valid-kv-pairs) -> OK",
        "expression": "fromEntries([[\"d\", \"str\"], [\"e\", [0, 1, 2]], [\"f\", {a: 1}]])",
        "result": {
          "d": "str",
          "e": [0, 1, 2],
          "f": { "a": 1 }
        }
      },
      {
        "description": "(array/less-than-pair) -> TypeError",
        "expression": "fromEntries([[\"a\", `null`], [\"b\"], `[]`])",
        "error": "TypeError"
      },
      {
        "description": "(array/more-than-pair) -> TypeError",
        "expression": "fromEntries([[\"a\", 1, 2]])",
        "error": "TypeError"
      },
      {
        "description": "(array/null-key) -> TypeError",
        "expression": "fromEntries([[`null`, \"val\"]])",
        "error": "TypeError"
      },
      {
        "description": "(array/bool-key) -> TypeError",
        "expression": "fromEntries([[`false`, \"val\"]])",
        "error": "TypeError"
      },
      {
        "description": "(array/number-key) -> TypeError",
        "expression": "fromEntries([[3, \"val\"]])",
        "error": "TypeError"
      },
      {
        "description": "(array/array-key) -> TypeError",
        "expression": "fromEntries([[[1, 2, 3], \"val\"]])",
        "error": "TypeError"
      },
      {
        "description": "(array/object-key) -> TypeError",
        "expression": "fromEntries([[{a: 1}, \"val\"]])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "fromEntries({b: 5})",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "fromEntries(&[[\"a\", 1]])",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "fround",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "fround()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "fround(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "fround(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[fround(`false`), fround(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "fround(13.0625)",
        "result": 13.0625
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "fround(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "fround(\"42.25\")",
        "result": 42.25
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "fround(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "fround(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "fround(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "fround(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "hasProperty",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "hasProperty()",
        "error": "FunctionError"
      },
      {
        "description": "(object, string, any) -> FunctionError",
        "expression": "hasProperty({a: 1}, \"a\", \"b\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, null) -> TypeError",
        "expression": "hasProperty(`null`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(null, bool) -> TypeError",
        "expression": "hasProperty(`null`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number) -> TypeError",
        "expression": "hasProperty(`null`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(null, string) -> TypeError",
        "expression": "hasProperty(`null`, \"key\")",
        "error": "TypeError"
      },
      {
        "description": "(null, array) -> TypeError",
        "expression": "hasProperty(`null`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(null, object) -> TypeError",
        "expression": "hasProperty(`null`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(null, expression) -> TypeError",
        "expression": "hasProperty(`null`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, null) -> TypeError",
        "expression": "hasProperty(`false`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, bool) -> TypeError",
        "expression": "hasProperty(`false`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int) -> TypeError",
        "expression": "hasProperty(`false`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/float) -> TypeError",
        "expression": "hasProperty(`false`, 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/empty) -> TypeError",
        "expression": "hasProperty(`false`, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/number) -> TypeError",
        "expression": "hasProperty(`false`, \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/non-number) -> TypeError",
        "expression": "hasProperty(`false`, \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, array) -> TypeError",
        "expression": "hasProperty(`false`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, object) -> TypeError",
        "expression": "hasProperty(`false`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, expression) -> TypeError",
        "expression": "hasProperty(`false`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> TypeError",
        "expression": "hasProperty(42, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(number, bool/false) -> TypeErrorK",
        "expression": "hasProperty(42, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(number, bool/true) -> TypeError",
        "expression": "hasProperty(42, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int) -> TypeError",
        "expression": "hasProperty(42, 0)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/float) -> TypeError",
        "expression": "hasProperty(42, 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(number, string/empty) -> TypeError",
        "expression": "hasProperty(42, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/number) -> TypeError",
        "expression": "hasProperty(42, \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "hasProperty(42, \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "hasProperty(42, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "hasProperty(42, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "hasProperty(42, &0)",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> TypeError",
        "expression": "hasProperty(\"abc\", `null`)",
        "error": "TypeError"
      },
      {
        "description": "(string, bool/false) -> TypeError",
        "expression": "hasProperty(\"abc\", `false`)",
        "error": "TypeError"
      },
      {
        "description": "(string, bool/true) -> TypeError",
        "expression": "hasProperty(\"abc\", `true`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int) -> TypeError",
        "expression": "hasProperty(\"abc\", 0)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/float) -> TypeError",
        "expression": "hasProperty(\"abc\", 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(string, string/empty) -> TypeError",
        "expression": "hasProperty(\"abc\", \"\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string/number) -> TypeError",
        "expression": "hasProperty(\"abc\", \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string/non-number) -> TypeError",
        "expression": "hasProperty(\"abc\", \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "hasProperty(\"abc\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "hasProperty(\"abc\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "hasProperty(\"abc\", &0)",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> TypeError",
        "expression": "hasProperty([1, 2, 3], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array, bool/false) -> TypeError",
        "expression": "hasProperty([1, 2, 3], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array, bool/true) -> TypeError",
        "expression": "hasProperty([1, 2, 3], `true`)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int) -> OK",
        "expression": "[hasProperty([1, 2], -1), hasProperty([1, 2], 0), hasProperty([1, 2], 1), hasProperty([1, 2], 2)]",
        "result": [false, true, true, false]
      },
      {
        "description": "(array, number/float) -> OK",
        "expression": "[hasProperty([1, 2], 1.1), hasProperty([1, 2], 1.5), hasProperty([1, 2], 1.9)]",
        "result": [true, true, true]
      },
      {
        "description": "(array, string/empty) -> TypeError",
        "expression": "hasProperty([1, 2], \"\")",
        "error": "TypeError"
      },
      {
        "description": "(array, string/number) -> TypeError",
        "expression": "hasProperty([1, 2], \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(array, string/non-number) -> TypeError",
        "expression": "hasProperty([1, 2], \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "hasProperty([1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "hasProperty([1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "hasProperty(`[1, 2]`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(object, null) -> TypeError",
        "expression": "hasProperty({'': 42}, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool/false) -> TypeError",
        "expression": "hasProperty({false: 42}, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool/true) -> TypeError",
        "expression": "hasProperty({true: 42}, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "hasProperty(`{\"1\": 11}`, 1)",
        "error": "TypeError"
      },
      {
        "description": "(object, string/number) -> OK",
        "expression": "[hasProperty(`{\"1\": 11}`, \"1\"), hasProperty(`{\"1\": 11}`, \"1.1\"), hasProperty(`{\"1\": 11}`, \"2\")]",
        "result": [true, false, false]
      },
      {
        "description": "(object, string/non-number) -> OK",
        "expression": "[hasProperty(`{\"foo\": \"bar\"}`, \"foo\"), hasProperty(`{\"foo\": \"bar\"}`, \"bar\")]",
        "result": [true, false]
      },
      {
        "description": "(object, array) -> TypeError",
        "expression": "hasProperty(`{}`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(object, object) -> TypeError",
        "expression": "hasProperty(`{}`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "hasProperty(`{}`, &\"key\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, null) -> TypeError",
        "expression": "hasProperty(&[1, 2], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, bool) -> TypeError",
        "expression": "hasProperty(&[1, 2], `true`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "hasProperty(&[1, 2], 1)",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "hasProperty(&[1, 2], \"a\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, array) -> TypeError",
        "expression": "hasProperty(&[1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, object) -> TypeError",
        "expression": "hasProperty(&[1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression) -> TypeError",
        "expression": "hasProperty(&[1, 2], &\"a\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "hour",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "hour()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "hour(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "hour(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[hour(`false`), hour(`true`)]",
        "result": [0, 0]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "hour(524.1807150115741)",
        "result": 4
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "hour(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "hour(\"524.1807150115741\")",
        "result": 4
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "hour(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "hour(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "hour(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "hour(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "if",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "if()",
        "error": "FunctionError"
      },
      {
        "description": "(any, any, any, any) -> FunctionError",
        "expression": "if(`true`, 1, 2, 3)",
        "error": "FunctionError"
      },
      {
        "description": "(null, any, any) -> OK",
        "expression": "if(`null`, \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(bool/false, any, any) -> OK",
        "expression": "if(`false`, \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(bool/true, any, any) -> OK",
        "expression": "if(`true`, \"A\", \"B\")",
        "result": "A"
      },
      {
        "description": "(number/zero, any, any) -> OK",
        "expression": "if(0, \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(number/non-zero, any, any) -> OK",
        "expression": "if(0.1, \"A\", \"B\")",
        "result": "A"
      },
      {
        "description": "(string/empty, any, any) -> OK",
        "expression": "if(\"\", \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(string/non-empty, any, any) -> OK",
        "expression": "if(\"cond\", \"A\", \"B\")",
        "result": "A"
      },
      {
        "description": "(array/empty, any, any) -> OK",
        "expression": "if(`[]`, \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(array/non-empty, any, any) -> OK",
        "expression": "if(`[1]`, \"A\", \"B\")",
        "result": "A"
      },
      {
        "description": "(object/empty, any, any) -> OK",
        "expression": "if(`{}`, \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(object/non-empty, any, any) -> OK",
        "expression": "if({a: 1}, \"A\", \"B\")",
        "result": "A"
      },
      {
        "description": "(expression, any, any) -> TypeError",
        "expression": "if(&true, \"A\", \"B\")",
        "error": "TypeError"
      },
      {
        "description": "(bool/true, null, any) -> OK",
        "expression": "if(`true`, `null`, \"B\")",
        "result": null
      },
      {
        "description": "(bool/true, bool, any) -> OK",
        "expression": "if(`true`, `false`, \"B\")",
        "result": false
      },
      {
        "description": "(bool/true, number, any) -> OK",
        "expression": "if(`true`, 13.37, \"B\")",
        "result": 13.37
      },
      {
        "description": "(bool/true, string, any) -> OK",
        "expression": "if(`true`, \"A\", \"B\")",
        "result": "A"
      },
      {
        "description": "(bool/true, array, any) -> OK",
        "expression": "if(`true`, [1, 2, 3], \"B\")",
        "result": [1, 2, 3]
      },
      {
        "description": "(bool/true, object, any) -> OK",
        "expression": "if(`true`, {a: 1}, \"B\")",
        "result": { "a": 1 }
      },
      {
        "description": "(bool/true, expression, any) -> TypeError",
        "expression": "if(`true`, &42, \"B\")",
        "error": "TypeError"
      },
      {
        "description": "(bool/false, any, null) -> OK",
        "expression": "if(`false`, \"A\", `null`)",
        "result": null
      },
      {
        "description": "(bool/false, any, bool) -> OK",
        "expression": "if(`false`, \"A\", `true`)",
        "result": true
      },
      {
        "description": "(bool/false, any, number) -> OK",
        "expression": "if(`false`, \"A\", 13.37)",
        "result": 13.37
      },
      {
        "description": "(bool/false, any, string) -> OK",
        "expression": "if(`false`, \"A\", \"B\")",
        "result": "B"
      },
      {
        "description": "(bool/false, any, array) -> OK",
        "expression": "if(`false`, \"A\", [4, 5, 6])",
        "result": [4, 5, 6]
      },
      {
        "description": "(bool/false, any, object) -> OK",
        "expression": "if(`false`, \"A\", {b: 2})",
        "result": { "b": 2 }
      },
      {
        "description": "(bool/false, any, expression) -> TypeError",
        "expression": "if(`false`, \"A\", &42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "join",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "join()",
        "error": "FunctionError"
      },
      {
        "description": "(array/string, string, any) -> FunctionError",
        "expression": "join([\"1\", \"2\", \"3\"], \"/\", \"-\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string) -> OK",
        "expression": "join(`null`, \"/\")",
        "result": ""
      },
      {
        "description": "(bool, string) -> OK",
        "expression": "[join(`false`, \"/\"), join(`true`, \"/\")]",
        "result": ["false", "true"]
      },
      {
        "description": "(number, string) -> OK",
        "expression": "join(13.37, \"/\")",
        "result": "13.37"
      },
      {
        "description": "(string, string) -> OK",
        "expression": "join(\"str\", \"/\")",
        "result": "str"
      },
      {
        "description": "(array/empty, string) -> OK",
        "expression": "join(`[]`, \"/\")",
        "result": ""
      },
      {
        "description": "(array/string, string) -> OK",
        "expression": "join([\"a\", \"b\", \"c\"], \"/\")",
        "result": "a/b/c"
      },
      {
        "description": "(array/coercible, string) -> OK",
        "expression": "join([`null`, `false`, `true`, 13.37, \"str\"], \"/\")",
        "result": "null/false/true/13.37/str"
      },
      {
        "description": "(array/array, string) -> OK",
        "expression": "join([[\"a\", \"b\"], [\"c\", \"d\"]], \"/\")",
        "result": "[\"a\",\"b\"]/[\"c\",\"d\"]"
      },
      {
        "description": "(array/object, string) -> OK",
        "expression": "join([{a: 1}, {b: 2}], \"/\")",
        "result": "{\"a\":1}/{\"b\":2}"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "join({a: 1}, \"/\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "join(&[\"a\", \"b\"], \"/\")",
        "error": "TypeError"
      },
      {
        "description": "(array/string, null) -> OK",
        "expression": "join([\"a\", \"b\", \"c\"], `null`)",
        "result": "abc"
      },
      {
        "description": "(array/string, bool) -> OK",
        "expression": "[join([\"a\", \"b\", \"c\"], `false`), join([\"a\", \"b\", \"c\"], `true`)]",
        "result": ["afalsebfalsec", "atruebtruec"]
      },
      {
        "description": "(array/string, number) -> OK",
        "expression": "join([\"a\", \"b\", \"c\"], `13.37`)",
        "result": "a13.37b13.37c"
      },
      {
        "description": "(array/string, array) -> TypeError",
        "expression": "join([\"a\", \"b\", \"c\"], `[\"/\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(array/string, object) -> TypeError",
        "expression": "join([\"a\", \"b\", \"c\"], {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(array/string, expression) -> TypeError",
        "expression": "join([\"a\", \"b\", \"c\"], &\"/\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "keys",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "keys()",
        "error": "FunctionError"
      },
      {
        "description": "(object, any) -> FunctionError",
        "expression": "keys({a: 1}, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "keys(`null`)",
        "result": []
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "[keys(`false`), keys(`true`)]",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "keys(-42)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> TypeError",
        "expression": "keys(\"something-random\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "keys([0, 1, 2])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> OK",
        "expression": "keys({key: \"value\"})",
        "result": ["key"]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "keys(&{a: 1})",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "left",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "left()",
        "error": "FunctionError"
      },
      {
        "description": "(string, number/int, any) -> FunctionError",
        "expression": "left(\"abcd\", 2, 1)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "left(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "left(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "left(13.37)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> OK",
        "expression": "[left(\"\"), left(\"😍Юникод😍\")]",
        "result": ["", "😍"]
      },
      {
        "description": "(array) -> OK",
        "expression": "[left(`[]`), left([1, 2])]",
        "result": [[], [1]]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "left({a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "left(&[1, 2])",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> OK",
        "expression": "[left(`[]`, `null`), left([1, 2], `null`)]",
        "result": [[], []]
      },
      {
        "description": "(array, bool) -> OK",
        "expression": "[left([1, 2], `false`), left([1, 2], `true`)]",
        "result": [[], [1]]
      },
      {
        "description": "(array, number/int/positive) -> OK",
        "expression": "[left([1, 2], 3), left([1, 2], 2), left([1, 2], 1)]",
        "result": [[1, 2], [1, 2], [1]]
      },
      {
        "description": "(array, number/int/zero) -> OK",
        "expression": "left([1, 2], 0)",
        "result": []
      },
      {
        "description": "(array, number/int/negative) -> EvaluationError",
        "expression": "left([1, 2], -1)",
        "error": "EvaluationError"
      },
      {
        "description": "(array, number/float/positive) -> OK",
        "expression": "[left([1, 2], 0.9), left([1, 2], 1.1), left([1, 2], 1.5), left([1, 2], 1.9), left([1, 2], 2.1)]",
        "result": [[], [1], [1], [1], [1, 2]]
      },
      {
        "description": "(array, number/float/gt-minus-one) -> OK",
        "expression": "[left([1, 2], -0.1), left([1, 2], -0.5), left([1, 2], -0.9)]",
        "result": [[], [], []]
      },
      {
        "description": "(array, number/float/le-minus-one) -> EvaluationError",
        "expression": "left([1, 2], -1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(array, string/empty) -> OK",
        "expression": "left([1, 2, 3], \"\")",
        "result": []
      },
      {
        "description": "(array, string/number) -> OK",
        "expression": "[left([1, 2, 3], \"2\"), left([1, 2, 3], \"2.1\")]",
        "result": [
          [1, 2],
          [1, 2]
        ]
      },
      {
        "description": "(array, string/non-number) -> TypeError",
        "expression": "left([1, 2, 3], \"fwergvert\")",
        "error": "TypeError"
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "left([1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "left([1, 2], {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "left([1, 2], &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "length",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "length()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "length([1, 2, 3], 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "length(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "[length(`false`), length(`true`)]",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "length(-42.1337)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> OK",
        "expression": "length(\"😍Юникод😍\")",
        "result": 8
      },
      {
        "description": "(array) -> OK",
        "expression": "length([0, 1, 2])",
        "result": 3
      },
      {
        "description": "(object) -> OK",
        "expression": "length({a: 1, b: 2})",
        "result": 2
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "length(&{a: 1})",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "log",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "log()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "log(10, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> EvaluationError",
        "expression": "log(`null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool/false) -> EvaluationError",
        "expression": "log(`false`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "log(`true`) | (0 <= @) && (@ < 1e-12)",
        "result": true
      },
      {
        "description": "(number/positive) -> OK",
        "expression": "abs(log(10) - 2.302585092994046) < 1e-12",
        "result": true
      },
      {
        "description": "(number/zero) -> EvaluationError",
        "expression": "log(0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/negative) -> EvaluationError",
        "expression": "log(-10)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> EvaluationError",
        "expression": "log(\"\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(log(\"13.37\") - 2.5930133911138515) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "log(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "log(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "log(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "log(&10)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "log10",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "log10()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "log10(10, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> EvaluationError",
        "expression": "log10(`null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool/false) -> EvaluationError",
        "expression": "log10(`false`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "log10(`true`) | (0 <= @) && (@ < 1e-12)",
        "result":true
      },
      {
        "description": "(number/positive) -> OK",
        "expression": "abs(log10(10) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/zero) -> EvaluationError",
        "expression": "log10(0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/negative) -> EvaluationError",
        "expression": "log10(-10)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> EvaluationError",
        "expression": "log10(\"\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(log10(\"13.37\") - 1.1261314072619844) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "log10(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "log10(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "log10(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "log10(&10)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "lower",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "lower()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "lower(\"Жж\", \"Дд\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "lower(`null`)",
        "result": ""
      },
      {
        "description": "(bool) -> OK",
        "expression": "[lower(`false`), lower(`true`)]",
        "result": ["false", "true"]
      },
      {
        "description": "(number) -> OK",
        "expression": "lower(13.37)",
        "result": "13.37"
      },
      {
        "description": "(string) -> OK",
        "expression": "lower(\"Жж\")",
        "result": "жж"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "lower(`[\"Жж\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "lower(`{\"Жж\": \"Дд\"}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "lower(&\"Жж\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "map",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "map()",
        "error": "FunctionError"
      },
      {
        "description": "(array, expression/valid, any) -> FunctionError",
        "expression": "map([1, 2, 3], &(@ & \"/\" & @), 13)",
        "error": "FunctionError"
      },
      {
        "description": "(null, expression/valid) -> OK",
        "expression": "map(`null`, &(@ & \"/\" & @))",
        "result": []
      },
      {
        "description": "(bool, expression/valid) -> OK",
        "expression": "[map(`false`, &(@ & \"/\" & @)), map(`true`, &(@ & \"/\" & @))]",
        "result": [["false/false"], ["true/true"]]
      },
      {
        "description": "(number, expression/valid) -> OK",
        "expression": "map(13.37, &(@ & \"/\" & @))",
        "result": ["13.37/13.37"]
      },
      {
        "description": "(string, expression/valid) -> OK",
        "expression": "map(\"str\", &(@ & \"/\" & @))",
        "result": ["str/str"]
      },
      {
        "description": "(array, expression/valid) -> OK",
        "expression": "map([1, 2, 3], &(@ & \"/\" & @))",
        "result": ["1/1", "2/2", "3/3"]
      },
      {
        "description": "(object, expression/valid) -> TypeError",
        "expression": "map({a: 1}, &(@ & \"/\" & @))",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression/valid) -> TypeError",
        "expression": "map(&[1, 2, 3], &(@ & \"/\" & @))",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> TypeError",
        "expression": "map([1, 2, 3], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array, bool) -> TypeError",
        "expression": "map([1, 2, 3], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array, number) -> TypeError",
        "expression": "map([1, 2, 3], 42)",
        "error": "TypeError"
      },
      {
        "description": "(array, string) -> TypeError",
        "expression": "map([1, 2, 3], \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "map([1, 2, 3], `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "map([1, 2, 3], {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(array, expression/invalid) -> EvaluationError",
        "expression": "map([1, 2, 3], &(@ / 0))",
        "error": "EvaluationError"
      }
    ]
  },
  {
    "comment": "max",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "max()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "max(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "max(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> OK",
        "expression": "max(13.37)",
        "result": 13.37
      },
      {
        "description": "(string) -> OK",
        "expression": "max(\"str\")",
        "result": "str"
      },
      {
        "description": "(array/empty) -> EvaluationError",
        "expression": "max(`[]`)",
        "error": "EvaluationError"
      },
      {
        "description": "(array/number) -> OK",
        "expression": "max([9, 8, 11, 10])",
        "result": 11
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "max([\"9\", \"8\", \"11\", \"10\"])",
        "result": "9"
      },
      {
        "description": "(array/string/non-number) -> OK",
        "expression": "max([\"B\", \"a\", \"D\", \"c\"])",
        "result": "c"
      },
      {
        "description": "(array/null-first) -> TypeError",
        "expression": "max([`null`, 0, \"a\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/bool-first) -> TypeError",
        "expression": "max([`false`, 0, \"a\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/number-first) -> TypeError",
        "expression": "max([90, 80, \"100\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/string-first) -> TypeError",
        "expression": "max([\"90\", 80, \"str\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/contains-array) -> TypeError",
        "expression": "max([1, 2, `[3]`, 4])",
        "error": "TypeError"
      },
      {
        "description": "(array/contains-object) -> TypeError",
        "expression": "max([1, 2, `{}`, 4])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "max(`{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "max(&[1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(array/number, null) -> TypeError",
        "expression": "max([90, 80, 100], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array/string, null) -> TypeError",
        "expression": "max([\"90\", \"80\", \"str\"], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array/number, bool) -> TypeError",
        "expression": "max([90, 80, 100], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array/string, bool) -> TypeError",
        "expression": "max([\"90\", \"80\", \"a\"], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array/number, number) -> OK",
        "expression": "max([90, 80, 100], 1337)",
        "result": 1337
      },
      {
        "description": "(array/string, number) -> TypeError",
        "expression": "max([\"90\", \"80\", \"a\"], 1337)",
        "error": "TypeError"
      },
      {
        "description": "(array/number, array/number) -> OK",
        "expression": "max([90, 80, 100], [20, 30, 40])",
        "result": 100
      },
      {
        "description": "(array/number, array/string) -> TypeError",
        "expression": "max([90, 80, 100], [\"20\", \"30\", \"40\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/string, array/number) -> TypeError",
        "expression": "max([\"90\", \"80\", \"a\"], [20, 30, 40])",
        "error": "TypeError"
      },
      {
        "description": "(array/string, array/string) -> OK",
        "expression": "max([\"90\", \"80\", \"a\"], [\"20\", \"30\", \"40\"])",
        "result": "a"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "max([90, 80, 100], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "max([90, 80, 100], &42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "merge",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "merge()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "merge(`null`)",
        "result": {}
      },
      {
        "description": "(bool/false) -> TypeError",
        "expression": "merge(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(bool/true) -> TypeError",
        "expression": "merge(`true`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "merge(42)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> TypeError",
        "expression": "merge(\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "merge(`[]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> OK",
        "expression": "[merge(`{}`), merge({a: 1})]",
        "result": [{}, { "a": 1 }]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "merge(&`{}`)",
        "error": "TypeError"
      },
      {
        "description": "(object, null) -> OK",
        "expression": "merge({a: 1}, `null`)",
        "result": { "a": 1 }
      },
      {
        "description": "(object, bool/false) -> TypeError",
        "expression": "merge({a: 1}, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool/true) -> TypeError",
        "expression": "merge({a: 1}, `true`)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "merge({a: 1}, 42)",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "merge({a: 1}, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(object, array) -> TypeError",
        "expression": "merge({a: 1}, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(object, object) -> OK",
        "expression": "[merge({a: 1}, `{}`), merge({a: 1}, {b: 2}), merge({a: 1}, {a: 3, b: 2})]",
        "result": [{ "a": 1 }, { "a": 1, "b": 2 }, { "a": 3, "b": 2 }]
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "merge({a: 1}, &`{}`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "mid",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "mid()",
        "error": "FunctionError"
      },
      {
        "description": "(string, number/int, number/int, any) -> FunctionError",
        "expression": "mid(\"0123456789\", 2, 3, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number/int, number/int) -> TypeError",
        "expression": "mid(`null`, 1, 3)",
        "error": "TypeError"
      },
      {
        "description": "(bool/false, number/int, number/int) -> TypeError",
        "expression": "mid(`false`, 1, 3)",
        "error": "TypeError"
      },
      {
        "description": "(bool/true, number/int, number/int) -> TypeError",
        "expression": "mid(`true`, 1, 3)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int) -> TypeError",
        "expression": "mid(13.37, 1, 3)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, 3)",
        "result": "Юни"
      },
      {
        "description": "(array, number/int, number/int) -> OK",
        "expression": "mid([0, 1, 2, 3, 4], 1, 3)",
        "result": [1, 2, 3]
      },
      {
        "description": "(object, number/int, number/int) -> TypeError",
        "expression": "mid(`{}`, 1, 3)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int, number/int) -> TypeError",
        "expression": "mid(&[0, 1, 2, 3, 4], 1, 3)",
        "error": "TypeError"
      },
      {
        "description": "(string, null, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", `null`, 3)",
        "result": "😍Юн"
      },
      {
        "description": "(string, bool/false, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", `false`, 3)",
        "result": "😍Юн"
      },
      {
        "description": "(string, bool/true, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", `true`, 3)",
        "result": "Юни"
      },
      {
        "description": "(string, number/int/zero, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", 0, 3)",
        "result": "😍Юн"
      },
      {
        "description": "(string, number/int/negative, number/int) -> EvaluationError",
        "expression": "mid(\"😍Юникод😍\", -1, 3)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/float/positive, number/int) -> OK",
        "expression": "[mid(\"😍Юникод😍\", 0.1, 3), mid(\"😍Юникод😍\", 0.5, 3), mid(\"😍Юникод😍\", 0.9, 3), mid(\"😍Юникод😍\", 1.1, 3)]",
        "result": ["😍Юн", "😍Юн", "😍Юн", "Юни"]
      },
      {
        "description": "(string, number/float/gt-minus-one, number/int) -> OK",
        "expression": "[mid(\"😍Юникод😍\", -0.1, 3), mid(\"😍Юникод😍\", -0.5, 3), mid(\"😍Юникод😍\", -0.9, 3)]",
        "result": ["😍Юн", "😍Юн", "😍Юн"]
      },
      {
        "description": "(string, number/float/le-minus-one, number/int) -> EvaluationError",
        "expression": "mid(\"😍Юникод😍\", -1.1, 3)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, string/empty, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", \"\", 3)",
        "result": "😍Юн"
      },
      {
        "description": "(string, string/number, number/int) -> OK",
        "expression": "mid(\"😍Юникод😍\", \"2.1\", 3)",
        "result": "ник"
      },
      {
        "description": "(string, string/non-number, number/int) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", \"str\", 3)",
        "error": "TypeError"
      },
      {
        "description": "(string, array, number/int) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", `[0]`, 3)",
        "error": "TypeError"
      },
      {
        "description": "(string, object, number/int) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", `{}`, 3)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression, number/int) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", &0, 3)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, null) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, `null`)",
        "result": ""
      },
      {
        "description": "(string, number/int, bool/false) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, `false`)",
        "result": ""
      },
      {
        "description": "(string, number/int, bool/true) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, `true`)",
        "result": "Ю"
      },
      {
        "description": "(string, number/int, number/int/zero) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, 0)",
        "result": ""
      },
      {
        "description": "(string, number/int, number/int/negative) -> EvaluationError",
        "expression": "mid(\"😍Юникод😍\", 1, -1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/int, number/float/positive) -> OK",
        "expression": "[mid(\"😍Юникод😍\", 1, 0.1), mid(\"😍Юникод😍\", 1, 0.5), mid(\"😍Юникод😍\", 1, 0.9), mid(\"😍Юникод😍\", 1, 1.1)]",
        "result": ["", "", "", "Ю"]
      },
      {
        "description": "(string, number/int, number/float/gt-minus-one) -> OK",
        "expression": "[mid(\"😍Юникод😍\", 1, -0.1), mid(\"😍Юникод😍\", 1, -0.5), mid(\"😍Юникод😍\", 1, -0.9)]",
        "result": ["", "", ""]
      },
      {
        "description": "(string, number/int, number/float/le-minus-one) -> EvaluationError",
        "expression": "mid(\"😍Юникод😍\", 1, -1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/int, string/empty) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, \"\")",
        "result": ""
      },
      {
        "description": "(string, number/int, string/number) -> OK",
        "expression": "mid(\"😍Юникод😍\", 1, \"2.1\")",
        "result": "Юн"
      },
      {
        "description": "(string, number/int, string/non-number) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", 1, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, array) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", 1, `[0]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, object) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", 1, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, expression) -> TypeError",
        "expression": "mid(\"😍Юникод😍\", 1, &3)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "millisecond",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "millisecond()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "millisecond(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "millisecond(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[millisecond(`false`), millisecond(`true`)]",
        "result": [0, 0]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "millisecond(524.1807150115741)",
        "result": 777
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "millisecond(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "millisecond(\"524.1807150115741\")",
        "result": 777
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "millisecond(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "millisecond(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "millisecond(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "millisecond(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "min",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "min()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "min(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "min(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> OK",
        "expression": "min(13.37)",
        "result": 13.37
      },
      {
        "description": "(string) -> OK",
        "expression": "min(\"str\")",
        "result": "str"
      },
      {
        "description": "(array/empty) -> EvaluationError",
        "expression": "min(`[]`)",
        "error": "EvaluationError"
      },
      {
        "description": "(array/number) -> OK",
        "expression": "min([9, 8, 11, 10])",
        "result": 8
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "min([\"9\", \"8\", \"11\", \"10\"])",
        "result": "10"
      },
      {
        "description": "(array/string/non-number) -> OK",
        "expression": "min([\"B\", \"a\", \"D\", \"c\"])",
        "result": "B"
      },
      {
        "description": "(array/null-first) -> TypeError",
        "expression": "min([`null`, 0, \"a\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/bool-first) -> TypeError",
        "expression": "min([`false`, 0, \"a\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/number-first) -> TypeError",
        "expression": "min([90, 80, \"100\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/string-first) -> TypeError",
        "expression": "min([\"90\", 80, \"str\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/contains-array) -> TypeError",
        "expression": "min([1, 2, `[3]`, 4])",
        "error": "TypeError"
      },
      {
        "description": "(array/contains-object) -> TypeError",
        "expression": "min([1, 2, `{}`, 4])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "min(`{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "min(&[1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(array/number, null) -> TypeError",
        "expression": "min([90, 80, 100], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array/string, null) -> TypeError",
        "expression": "min([\"90\", \"80\", \"str\"], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array/number, bool) -> TypeError",
        "expression": "min([90, 80, 100], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array/string, bool) -> TypeError",
        "expression": "min([\"90\", \"80\", \"a\"], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array/number, number) -> OK",
        "expression": "min([90, 80, 100], 1337)",
        "result": 80
      },
      {
        "description": "(array/string, number) -> TypeError",
        "expression": "min([\"90\", \"80\", \"a\"], 1337)",
        "error": "TypeError"
      },
      {
        "description": "(array/number, array/number) -> OK",
        "expression": "min([90, 80, 100], [20, 30, 40])",
        "result": 20
      },
      {
        "description": "(array/number, array/string) -> TypeError",
        "expression": "min([90, 80, 100], [\"20\", \"30\", \"40\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/string, array/number) -> TypeError",
        "expression": "min([\"90\", \"80\", \"a\"], [20, 30, 40])",
        "error": "TypeError"
      },
      {
        "description": "(array/string, array/string) -> OK",
        "expression": "min([\"90\", \"80\", \"a\"], [\"20\", \"30\", \"40\"])",
        "result": "20"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "min([90, 80, 100], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "min([90, 80, 100], &42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "minute",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "minute()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "minute(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "minute(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[minute(`false`), minute(`true`)]",
        "result": [0, 0]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "minute(524.1807150115741)",
        "result": 20
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "minute(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "minute(\"524.1807150115741\")",
        "result": 20
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "minute(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "minute(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "minute(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "minute(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "mod",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "mod()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, any) -> FunctionError",
        "expression": "mod(2, 3, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number) -> OK",
        "expression": "mod(`null`, 0.6)",
        "result": 0
      },
      {
        "description": "(bool, number) -> OK",
        "expression": "[mod(`false`, 0.6), mod(`true`, 0.6)]",
        "result": [0, 0.4]
      },
      {
        "description": "(string/empty, number) -> OK",
        "expression": "mod(\"\", 0.6)",
        "result": 0
      },
      {
        "description": "(string/number, number) -> OK",
        "expression": "mod(\"7\", 2.25)",
        "result": 0.25
      },
      {
        "description": "(string/non-number, number) -> TypeError",
        "expression": "mod(\"uasdicyb\", 0.6)",
        "error": "TypeError"
      },
      {
        "description": "(array, number) -> TypeError",
        "expression": "mod(`[1]`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "mod(`{\"1\": 2}`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "mod(&1, 2)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> EvaluationError",
        "expression": "mod(2, `null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(number, bool/false) -> EvaluationError",
        "expression": "mod(2, `false`)",
        "error": "EvaluationError"
      },
      {
        "description": "(number, bool/true) -> OK",
        "expression": "mod(13.25, `true`)",
        "result": 0.25
      },
      {
        "description": "(number, string/empty) -> EvaluationError",
        "expression": "mod(2, \"\")",
        "error": "EvaluationError"
      },
      {
        "description": "(number, string/number) -> OK",
        "expression": "mod(14.25, \"4.5\")",
        "result": 0.75
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "mod(2, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "mod(2, `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "mod(2, `{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "mod(2, &1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int/positive, number/int/positive) -> OK",
        "expression": "mod(7, 4)",
        "result": 3
      },
      {
        "description": "(number/int/positive, number/int/zero) -> EvaluationError",
        "expression": "mod(7, 0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/positive, number/int/negative) -> OK",
        "expression": "mod(7, -4)",
        "result": 3
      },
      {
        "description": "(number/int/positive, number/float/positive) -> OK",
        "expression": "mod(7, 2.25)",
        "result": 0.25
      },
      {
        "description": "(number/int/positive, number/float/negative) -> OK",
        "expression": "mod(7, -2.25)",
        "result": 0.25
      },
      {
        "description": "(number/int/zero, number/int/positive) -> OK",
        "expression": "mod(0, 4)",
        "result": 0
      },
      {
        "description": "(number/int/zero, number/int/zero) -> EvaluationError",
        "expression": "mod(0, 0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/zero, number/int/negative) -> OK",
        "expression": "mod(0, -4)",
        "result": 0
      },
      {
        "description": "(number/int/zero, number/float/positive) -> OK",
        "expression": "mod(0, 2.25)",
        "result": 0
      },
      {
        "description": "(number/int/zero, number/float/negative) -> OK",
        "expression": "mod(0, -2.25)",
        "result": 0
      },
      {
        "description": "(number/int/negative, number/int/positive) -> OK",
        "expression": "mod(-7, 4)",
        "result": -3
      },
      {
        "description": "(number/int/negative, number/int/zero) -> EvaluationError",
        "expression": "mod(-7, 0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/negative, number/int/negative) -> OK",
        "expression": "mod(-7, -4)",
        "result": -3
      },
      {
        "description": "(number/int/negative, number/float/positive) -> OK",
        "expression": "mod(-7, 2.25)",
        "result": -0.25
      },
      {
        "description": "(number/int/negative, number/float/negative) -> OK",
        "expression": "mod(-7, -2.25)",
        "result": -0.25
      },
      {
        "description": "(number/float/positive, number/int/positive) -> OK",
        "expression": "mod(7.25, 4)",
        "result": 3.25
      },
      {
        "description": "(number/float/positive, number/int/zero) -> EvaluationError",
        "expression": "mod(7.25, 0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/float/positive, number/int/negative) -> OK",
        "expression": "mod(7.25, -4)",
        "result": 3.25
      },
      {
        "description": "(number/float/positive, number/float/positive) -> OK",
        "expression": "mod(7.25, 2.25)",
        "result": 0.5
      },
      {
        "description": "(number/float/positive, number/float/negative) -> OK",
        "expression": "mod(7.25, -2.25)",
        "result": 0.5
      },
      {
        "description": "(number/float/negative, number/int/positive) -> OK",
        "expression": "mod(-7.25, 4)",
        "result": -3.25
      },
      {
        "description": "(number/float/negative, number/int/zero) -> EvaluationError",
        "expression": "mod(-7.25, 0)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/float/negative, number/int/negative) -> OK",
        "expression": "mod(-7.25, -4)",
        "result": -3.25
      },
      {
        "description": "(number/float/negative, number/float/positive) -> OK",
        "expression": "mod(-7.25, 2.25)",
        "result": -0.5
      },
      {
        "description": "(number/float/negative, number/float/negative) -> OK",
        "expression": "mod(-7.25, -2.25)",
        "result": -0.5
      }
    ]
  },
  {
    "comment": "month",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "month()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "month(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "month(`null`)",
        "result": 1
      },
      {
        "description": "(bool) -> OK",
        "expression": "[month(`false`), month(`true`)]",
        "result": [1, 1]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "month(524.1807150115741)",
        "result": 6
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "month(\"\")",
        "result": 1
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "month(\"524.1807150115741\")",
        "result": 6
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "month(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "month(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "month(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "month(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "not",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "not()",
        "error": "FunctionError"
      },
      {
        "description": "(bool, any) -> FunctionError",
        "expression": "not(false, true)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "not(`null`)",
        "result": true
      },
      {
        "description": "(bool) -> OK",
        "expression": "[not(`false`), not(`true`)]",
        "result": [true, false]
      },
      {
        "description": "(number) -> OK",
        "expression": "[not(-42), not(0), not(42)]",
        "result": [false, true, false]
      },
      {
        "description": "(string) -> OK",
        "expression": "[not(\"\"), not(\"str\")]",
        "result": [true, false]
      },
      {
        "description": "(array) -> OK",
        "expression": "[not(`[]`), not(`[1]`)]",
        "result": [true, false]
      },
      {
        "description": "(object) -> OK",
        "expression": "[not(`{}`), not({a: 1})]",
        "result": [true, false]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "not(&[1, 2, 3])",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "notNull",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "notNull()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "notNull(`null`)",
        "result": null
      },
      {
        "description": "(bool) -> OK",
        "expression": "[notNull(`false`), notNull(`true`)]",
        "result": [false, true]
      },
      {
        "description": "(number) -> OK",
        "expression": "notNull(42)",
        "result": 42
      },
      {
        "description": "(string) -> OK",
        "expression": "notNull(\"str\")",
        "result": "str"
      },
      {
        "description": "(array) -> OK",
        "expression": "[notNull(`[]`), notNull(`[1]`)]",
        "result": [[], [1]]
      },
      {
        "description": "(object) -> OK",
        "expression": "[notNull(`{}`), notNull({a: 1})]",
        "result": [{}, { "a": 1 }]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "notNull(&`{}`)",
        "error": "TypeError"
      },
      {
        "description": "(null, null) -> OK",
        "expression": "notNull(`null`, `null`)",
        "result": null
      },
      {
        "description": "(null, bool) -> OK",
        "expression": "[notNull(`null`, `false`), notNull(`null`, `true`)]",
        "result": [false, true]
      },
      {
        "description": "(null, number) -> OK",
        "expression": "notNull(`null`, 42)",
        "result": 42
      },
      {
        "description": "(null, string) -> OK",
        "expression": "notNull(`null`, \"str\")",
        "result": "str"
      },
      {
        "description": "(null, array) -> OK",
        "expression": "[notNull(`null`, `[]`), notNull(`null`, `[1]`)]",
        "result": [[], [1]]
      },
      {
        "description": "(null, object) -> OK",
        "expression": "[notNull(`null`, `{}`), notNull(`null`, {a: 1})]",
        "result": [{}, { "a": 1 }]
      },
      {
        "description": "(null, expression) -> TypeError",
        "expression": "notNull(`null`, &`{}`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "now",
    "given": {},
    "cases": [
      {
        "description": "(any) -> FunctionError",
        "expression": "now(1)",
        "error": "FunctionError"
      },
      {
        "description": "() -> OK",
        "expression": "[today(), now()] | ((@[0] - 1 <= @[1]) && (@[1] <= @[0] + 1))",
        "result": true
      }
    ]
  },
  {
    "comment": "null",
    "given": {},
    "cases": [
      {
        "description": "(any) -> FunctionError",
        "expression": "null(1)",
        "error": "FunctionError"
      },
      {
        "description": "() -> OK",
        "expression": "null()",
        "result": null
      }
    ]
  },
  {
    "comment": "or",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "or()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "or(`null`)",
        "result": false
      },
      {
        "description": "(null, null) -> OK",
        "expression": "or(`null`, `null`)",
        "result": false
      },
      {
        "description": "(bool) -> OK",
        "expression": "[or(`false`), or(`true`)]",
        "result": [false, true]
      },
      {
        "description": "(bool, bool) -> OK",
        "expression": "[or(`false`, `false`), or(`true`, `false`), or(`false`, `true`), or(`true`, `true`)]",
        "result": [false, true, true, true]
      },
      {
        "description": "(number) -> OK",
        "expression": "[or(-1), or(0), or(1)]",
        "result": [true, false, true]
      },
      {
        "description": "(string) -> OK",
        "expression": "[or(\"\"), or(\"false\"), or(\"true\")]",
        "result": [false, true, true]
      },
      {
        "description": "(array) -> OK",
        "expression": "[or(`[]`), or(`[{}]`)]",
        "result": [false, true]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "[or(`{}`), or(`{\"a\": 1}`)]",
        "result": [false, true]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "or(&false)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "power",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "power()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number, any) -> FunctionError",
        "expression": "power(2, 3, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number) -> OK",
        "expression": "abs(power(`null`, 2.1)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false, number) -> OK",
        "expression": "abs(power(`false`, 2.1)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true, number) -> OK",
        "expression": "abs(power(`true`, 2.1) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number, number) -> OK",
        "expression": "abs(power(\"\", 2)) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number, number) -> OK",
        "expression": "abs(power(\"3\", 2) - 9) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number, number) -> TypeError",
        "expression": "power(\"uasdicyb\", 2)",
        "error": "TypeError"
      },
      {
        "description": "(array, number) -> TypeError",
        "expression": "power(`[1]`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "power(`{\"1\": 2}`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "power(&1, 2)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> OK",
        "expression": "abs(power(2, `null`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number, bool/false) -> OK",
        "expression": "abs(power(2, `false`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number, bool/true) -> OK",
        "expression": "abs(power(2, `true`) - 2) < 1e-12",
        "result": true
      },
      {
        "description": "(number, string/empty) -> OK",
        "expression": "abs(power(2, \"\") - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number, string/number) -> OK",
        "expression": "abs(power(2, \"3\") - 8) < 1e-12",
        "result": true
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "power(2, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "power(2, `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "power(2, `{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "power(2, &1)",
        "error": "TypeError"
      },
      {
        "description": "(number/int/positive, number/int/positive) -> OK",
        "expression": "abs(power(2, 3) - 8) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/positive, number/int/zero) -> OK",
        "expression": "abs(power(2, 0) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/positive, number/int/negative) -> OK",
        "expression": "abs(power(2, -2) - 0.25) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/positive, number/float/positive) -> OK",
        "expression": "abs(power(2, 2.5) - 5.656854249492381) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/positive, number/float/negative) -> OK",
        "expression": "abs(power(2, -2.5) - 0.1767766952966369) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/zero, number/int/positive) -> OK",
        "expression": "abs(power(0, 3)) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/zero, number/int/zero) -> OK",
        "__comments": ["In programming languages this is commonly 1..."],
        "expression": "abs(power(0, 0) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/zero, number/int/negative) -> EvaluationError",
        "expression": "power(0, -2)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/zero, number/float/positive) -> OK",
        "expression": "abs(power(0, 2.5)) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/zero, number/float/negative) -> EvaluationError",
        "expression": "power(0, -2.5)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/negative, number/int/positive) -> OK",
        "expression": "abs(power(-2, 3) + 8) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/negative, number/int/zero) -> OK",
        "expression": "abs(power(-2, 0) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/negative, number/int/negative) -> OK",
        "expression": "abs(power(-2, -3) + 0.125) < 1e-12",
        "result": true
      },
      {
        "description": "(number/int/negative, number/float/positive) -> EvaluationError",
        "expression": "power(-2, 2.5)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/int/negative, number/float/negative) -> EvaluationError",
        "expression": "power(-2, -2.5)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/float/positive, number/int/positive) -> OK",
        "expression": "abs(power(1.5, 3) - 3.375) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/positive, number/int/zero) -> OK",
        "expression": "abs(power(1.5, 0) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/positive, number/int/negative) -> OK",
        "expression": "abs(power(1.5, -3) - 0.2962962962962963) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/positive, number/float/positive) -> OK",
        "expression": "abs(power(1.5, 2.5) - 2.7556759606310752) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/positive, number/float/negative) -> OK",
        "expression": "abs(power(1.5, -2.5) - 0.36288736930121157) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/negative, number/int/positive) -> OK",
        "expression": "abs(power(-1.5, 3) + 3.375) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/negative, number/int/zero) -> OK",
        "expression": "abs(power(-1.5, 0) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/negative, number/int/negative) -> OK",
        "expression": "abs(power(-1.5, -3) + 0.2962962962962963) < 1e-12",
        "result": true
      },
      {
        "description": "(number/float/negative, number/float/positive) -> EvaluationError",
        "expression": "power(-1.5, 2.5)",
        "error": "EvaluationError"
      },
      {
        "description": "(number/float/negative, number/float/negative) -> EvaluationError",
        "expression": "power(-1.5, -2.5)",
        "error": "EvaluationError"
      }
    ]
  },
  {
    "comment": "proper",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "proper()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "proper(\"жЖ\", \"дД\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "proper(`null`)",
        "result": ""
      },
      {
        "description": "(bool) -> OK",
        "expression": "[proper(`false`), proper(`true`)]",
        "result": ["False", "True"]
      },
      {
        "description": "(number) -> OK",
        "expression": "proper(13.37)",
        "result": "13.37"
      },
      {
        "description": "(string) -> OK",
        "expression": "proper(\"жЖ\")",
        "result": "Жж"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "proper(`[\"жЖ\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "proper(`{\"жЖ\": \"дД\"}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "proper(&\"жЖ\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "random",
    "given": {},
    "cases": [
      {
        "description": "(any) -> FunctionError",
        "expression": "random(1)",
        "error": "FunctionError"
      },
      {
        "description": "() -> OK",
        "expression": "random() | ((0 <= @) && (@ < 1))",
        "result": true
      }
    ]
  },
  {
    "comment": "reduce",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "reduce()",
        "error": "FunctionError"
      },
      {
        "description": "(array, expression, any, any) -> FunctionError",
        "expression": "reduce([1, 2, 3], &(accumulated & current & \"/\"), \"path: \", \"-\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, expression, str) -> OK",
        "expression": "reduce(`null`, &(accumulated & current & \"/\"), \"path: \")",
        "result": "path: "
      },
      {
        "description": "(bool/false, expression, str) -> OK",
        "expression": "reduce(`false`, &(accumulated & current & \"/\"), \"path: \")",
        "result": "path: false/"
      },
      {
        "description": "(bool/true, expression, str) -> OK",
        "expression": "reduce(`true`, &(accumulated & current & \"/\"), \"path: \")",
        "result": "path: true/"
      },
      {
        "description": "(number, expression, str) -> OK",
        "expression": "reduce(13.37, &(accumulated & current & \"/\"), \"path: \")",
        "result": "path: 13.37/"
      },
      {
        "description": "(string, expression, str) -> OK",
        "expression": "reduce(\"home\", &(accumulated & current & \"/\"), \"path: \")",
        "result": "path: home/"
      },
      {
        "description": "(array, expression, str) -> OK",
        "expression": "reduce([\"\", \"home\", \"user\"], &(accumulated & current & \"/\"), \"path: \")",
        "result": "path: /home/user/"
      },
      {
        "description": "(object, expression, str) -> TypeError",
        "expression": "reduce(`{}`, &(accumulated & current & \"/\"), \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression, str) -> TypeError",
        "expression": "reduce(&[\"home\"], &(accumulated & current & \"/\"), \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, null, str) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], `null`, \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, bool, str) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], `false`, \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, number, str) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], 13.37, \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, string, str) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], \"toString\", \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, array, str) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], [1, 2, 3], \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, object, str) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], `{}`, \"path: \")",
        "error": "TypeError"
      },
      {
        "description": "(array, expression, null) -> OK",
        "expression": "reduce([\"\", \"home\", \"user\"], &(accumulated & current & \"/\"), `null`)",
        "result": "/home/user/"
      },
      {
        "description": "(array, expression, bool) -> OK",
        "expression": "reduce([\"\", \"home\", \"user\"], &(accumulated & current & \"/\"), `true`)",
        "result": "true/home/user/"
      },
      {
        "description": "(array, expression, number) -> OK",
        "expression": "reduce([\"1\", \"2\", \"3\"], &(accumulated + toNumber(current)), 100)",
        "result": 106
      },
      {
        "description": "(array, expression, array) -> OK",
        "expression": "reduce([\"\", \"home\", \"user\"], &(accumulated ~ upper(current)), [\"PATH\"])",
        "result": ["PATH", "", "HOME", "USER"]
      },
      {
        "description": "(array, expression, object) -> OK",
        "expression": "reduce([\"\", \"home\", \"user\"], &fromEntries(entries(accumulated) ~ [[current, index]]), `{}`)",
        "result": {
          "": 0,
          "home": 1,
          "user": 2
        }
      },
      {
        "description": "(array, expression, expression) -> TypeError",
        "expression": "reduce([\"\", \"home\", \"user\"], &fromEntries(entries(accumulated) ~ [[current, index]]), &`{}`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "register",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "register()",
        "error": "FunctionError"
      },
      {
        "description": "(string, expression, any) -> FunctionError",
        "expression": "register(\"_foo\", &42, 13)",
        "error": "FunctionError"
      },
      {
        "description": "(null, expression) -> FunctionError",
        "expression": "register(`null`, &42)",
        "error": "FunctionError"
      },
      {
        "description": "(bool/false, expression) -> FunctionError",
        "expression": "register(`false`, &\"f\")",
        "error": "FunctionError"
      },
      {
        "description": "(bool/false, expression) -> FunctionError",
        "expression": "register(`true`, &\"t\")",
        "error": "FunctionError"
      },
      {
        "description": "(number, expression) -> FunctionError",
        "expression": "register(42, &42)",
        "error": "FunctionError"
      },
      {
        "description": "(string/valid, expression) -> OK",
        "expression": "register(\"_$abcxyzABCXYZ012789_$\", &42)",
        "result": {}
      },
      {
        "description": "(string/invalid/digit-start, expression) -> FunctionError",
        "expression": "register(\"0foo\", &42)",
        "error": "FunctionError"
      },
      {
        "description": "(string/invalid/letter-start, expression) -> FunctionError",
        "expression": "register(\"foo\", &42)",
        "error": "FunctionError"
      },
      {
        "description": "(string/invalid/dollar-start, expression) -> FunctionError",
        "expression": "register(\"$foo\", &42)",
        "error": "FunctionError"
      },
      {
        "description": "(string/invalid/dash, expression) -> FunctionError",
        "expression": "register(\"_foo-bar\", &42)",
        "error": "FunctionError"
      },
      {
        "description": "(string/invalid/unicode, expression) -> FunctionError",
        "expression": "register(\"_функция\", &42)",
        "error": "FunctionError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "register(`[\"_foo\"]`, &42)",
        "error": "TypeError"
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "register(`{\"_foo\": \"bar\"}`, &42)",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression) -> TypeError",
        "expression": "register(&\"_foo\", &42)",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, null) -> TypeError",
        "expression": "register(\"_foo\", `null`)",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, bool/false) -> TypeError",
        "expression": "register(\"_foo\", `false`)",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, bool/true) -> TypeError",
        "expression": "register(\"_foo\", `true`)",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, number) -> TypeError",
        "expression": "register(\"_foo\", 42)",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, string) -> TypeError",
        "expression": "register(\"_foo\", \"bar\")",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, array) -> TypeError",
        "expression": "register(\"_foo\", [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(string/valid, object) -> TypeError",
        "expression": "register(\"_foo\", {a: 1})",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "replace",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "replace()",
        "error": "FunctionError"
      },
      {
        "description": "(string, number/int, number/int, string, any) -> FunctionError",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, \"Unicode\", 6)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number/int, number/int, string) -> TypeError",
        "expression": "replace(`null`, 0, 0, \"🙂\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, string) -> TypeError",
        "expression": "replace(`false`, 1, 3, \"🙂\")",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, string) -> TypeError",
        "expression": "replace(13.37, 1, 3, \"🙂\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, \"Unicode\")",
        "result": "🙂Unicode🙃"
      },
      {
        "description": "(array, number/int, number/int, string) -> OK",
        "expression": "replace([1, 2, 3], 1, 2, \"🙂\")",
        "result": [1, "🙂"]
      },
      {
        "description": "(object, number/int, number/int, string) -> TypeError",
        "expression": "replace(`{}`, 1, 3, \"🙂\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int, number/int, string) -> TypeError",
        "expression": "replace(&\"string\", 1, 3, \"🙂\")",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int, number/int, array) -> TypeError",
        "expression": "replace(`null`, 0, 0, [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, array) -> TypeError",
        "expression": "replace(`false`, 1, 3, [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, array) -> TypeError",
        "expression": "replace(13.37, 1, 3, [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, number/int, array) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int, number/int, array) -> OK",
        "expression": "replace([1, 2, 3], 1, 1, [4, 5])",
        "result": [1, 4, 5, 3]
      },
      {
        "description": "(object, number/int, number/int, array) -> TypeError",
        "expression": "replace(`{}`, 1, 3, [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int, number/int, array) -> TypeError",
        "expression": "replace(&[4, 5, 6, 7], 1, 3, [1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(string, null, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", `null`, 7, \"Unicode\")",
        "result": "Unicode🙃"
      },
      {
        "description": "(string, bool/false, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", `false`, 7, \"Unicode\")",
        "result": "Unicode🙃"
      },
      {
        "description": "(string, bool/true, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", `true`, 6, \"Unicode\")",
        "result": "🙂Unicode🙃"
      },
      {
        "description": "(string, number/int/zero, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 0, 7, \"Unicode\")",
        "result": "Unicode🙃"
      },
      {
        "description": "(string, number/int/negative, number/int, string) -> EvaluationError",
        "expression": "replace(\"🙂Юникод🙃\", -1, 7, \"Unicode\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/float/positive, number/int, string) -> OK",
        "expression": "[replace(\"🙂Юникод🙃\", 0.1, 7, \"Unicode\"), replace(\"🙂Юникод🙃\", 0.5, 7, \"Unicode\"), replace(\"🙂Юникод🙃\", 0.9, 7, \"Unicode\"), replace(\"🙂Юникод🙃\", 1.1, 7, \"Unicode\")]",
        "result": ["Unicode🙃", "Unicode🙃", "Unicode🙃", "🙂Unicode"]
      },
      {
        "description": "(string, number/float/gt-minus-one, number/int, string) -> OK",
        "expression": "[replace(\"🙂Юникод🙃\", -0.1, 7, \"Unicode\"), replace(\"🙂Юникод🙃\", -0.5, 7, \"Unicode\"), replace(\"🙂Юникод🙃\", -0.9, 7, \"Unicode\")]",
        "result": ["Unicode🙃", "Unicode🙃", "Unicode🙃"]
      },
      {
        "description": "(string, number/float/le-minus-one, number/int, string) -> EvaluationError",
        "expression": "replace(\"🙂Юникод🙃\", -1.1, 7, \"Unicode\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string, string/empty, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", \"\", 7, \"Unicode\")",
        "result": "Unicode🙃"
      },
      {
        "description": "(string, string/number, number/int, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", \"1.1\", 6, \"Unicode\")",
        "result": "🙂Unicode🙃"
      },
      {
        "description": "(string, string/non-number, number/int, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", \"str\", 7, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, array, number/int, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", `[0]`, 7, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, object, number/int, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", `{}`, 7, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, expression, number/int, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", &0, 7, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, null, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 0, `null`, \"Unicode\")",
        "result": "Unicode🙂Юникод🙃"
      },
      {
        "description": "(string, number/int, bool/false, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 0, `false`, \"Unicode\")",
        "result": "Unicode🙂Юникод🙃"
      },
      {
        "description": "(string, number/int, bool/true, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 0, `true`, \"Unicode\")",
        "result": "UnicodeЮникод🙃"
      },
      {
        "description": "(string, number/int, number/int/zero, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 0, 0, \"Unicode\")",
        "result": "Unicode🙂Юникод🙃"
      },
      {
        "description": "(string, number/int, number/int/negative, string) -> EvaluationError",
        "expression": "replace(\"🙂Юникод🙃\", 0, -1, \"Unicode\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/int, number/float/positive, string) -> OK",
        "expression": "[replace(\"🙂Юникод🙃\", 0, 0.1, \"Unicode\"), replace(\"🙂Юникод🙃\", 0, 0.5, \"Unicode\"), replace(\"🙂Юникод🙃\", 0, 0.9, \"Unicode\"), replace(\"🙂Юникод🙃\", 0, 1.1, \"Unicode\")]",
        "result": [
          "Unicode🙂Юникод🙃",
          "Unicode🙂Юникод🙃",
          "Unicode🙂Юникод🙃",
          "UnicodeЮникод🙃"
        ]
      },
      {
        "description": "(string, number/int, number/float/gt-minus-one, string) -> OK",
        "expression": "[replace(\"🙂Юникод🙃\", 0, -0.1, \"Unicode\"), replace(\"🙂Юникод🙃\", 0, -0.5, \"Unicode\"), replace(\"🙂Юникод🙃\", 0, -0.9, \"Unicode\")]",
        "result": [
          "Unicode🙂Юникод🙃",
          "Unicode🙂Юникод🙃",
          "Unicode🙂Юникод🙃"
        ]
      },
      {
        "description": "(string, number/int, number/float/le-minus-one, string) -> EvaluationError",
        "expression": "replace(\"🙂Юникод🙃\", 0, -1.1, \"Unicode\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/int, string/empty, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 0, \"\", \"Unicode\")",
        "result": "Unicode🙂Юникод🙃"
      },
      {
        "description": "(string, number/int, string/number, string) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 1, \"6.1\", \"Unicode\")",
        "result": "🙂Unicode🙃"
      },
      {
        "description": "(string, number/int, string/non-number, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 0, \"str\", \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, array, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 0, `[7]`, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, object, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 0, `{}`, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, expression, string) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 0, &7, \"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, number/int, null) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, `null`)",
        "result": "🙂🙃"
      },
      {
        "description": "(string, number/int, number/int, bool/false) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, `false`)",
        "result": "🙂false🙃"
      },
      {
        "description": "(string, number/int, number/int, bool/true) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, `true`)",
        "result": "🙂true🙃"
      },
      {
        "description": "(string, number/int, number/int, number) -> OK",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, 13.37)",
        "result": "🙂13.37🙃"
      },
      {
        "description": "(string, number/int, number/int, object) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int, number/int, expression) -> TypeError",
        "expression": "replace(\"🙂Юникод🙃\", 1, 6, &\"Unicode\")",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int, number/int, null) -> OK",
        "expression": "replace([0, 1, 2, 3, 4], 1, 3, `null`)",
        "result": [0, null, 4]
      },
      {
        "description": "(array, number/int, number/int, bool/false) -> OK",
        "expression": "replace([0, 1, 2, 3, 4], 1, 3, `false`)",
        "result": [0, false, 4]
      },
      {
        "description": "(array, number/int, number/int, bool/true) -> OK",
        "expression": "replace([0, 1, 2, 3, 4], 1, 3, `true`)",
        "result": [0, true, 4]
      },
      {
        "description": "(array, number/int, number/int, number) -> OK",
        "expression": "replace([0, 1, 2, 3, 4], 1, 3, 13.37)",
        "result": [0, 13.37, 4]
      },
      {
        "description": "(array, number/int, number/int, object) -> OK",
        "expression": "replace([0, 1, 2, 3, 4], 1, 3, {a: 1})",
        "result": [0, { "a": 1 }, 4]
      },
      {
        "description": "(array, number/int, number/int, expression) -> TypeError",
        "expression": "replace([0, 1, 2, 3, 4], 1, 6, &[1, 2, 3])",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int, number/int, null) -> TypeError",
        "expression": "replace(`null`, 0, 0, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int, number/int, bool) -> TypeError",
        "expression": "replace(`null`, 0, 0, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int, number/int, number) -> TypeError",
        "expression": "replace(`null`, 0, 0, 13.37)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int, number/int, object) -> TypeError",
        "expression": "replace(`null`, 0, 0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int, number/int, expression) -> TypeError",
        "expression": "replace(`null`, 0, 0, &\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, null) -> TypeError",
        "expression": "replace(`false`, 0, 3, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, bool) -> TypeError",
        "expression": "replace(`true`, 1, 2, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, number) -> TypeError",
        "expression": "replace(`false`, 1, 3, 13.37)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, object) -> TypeError",
        "expression": "replace(`false`, 0, 0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int, number/int, expression) -> TypeError",
        "expression": "replace(`false`, 0, 0, &\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, null) -> TypeError",
        "expression": "replace(13.37, 1, 3, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, bool) -> TypeError",
        "expression": "replace(13.37, 1, 3, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, number) -> TypeError",
        "expression": "replace(13.37, 1, 3, 42)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, object) -> TypeError",
        "expression": "replace(13.37, 1, 3, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int, number/int, expression) -> TypeError",
        "expression": "replace(13.37, 1, 3, &\"str\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "rept",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "rept()",
        "error": "FunctionError"
      },
      {
        "description": "(string, number/int/positive, any) -> FunctionError",
        "expression": "rept(\"abcd\", 2, 1)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number/int/positive) -> OK",
        "expression": "rept(`null`, 2)",
        "result": ""
      },
      {
        "description": "(bool/false, number/int/positive) -> OK",
        "expression": "rept(`false`, 2)",
        "result": "falsefalse"
      },
      {
        "description": "(bool/true, number/int/positive) -> OK",
        "expression": "rept(`true`, 2)",
        "result": "truetrue"
      },
      {
        "description": "(number, number/int/positive) -> OK",
        "expression": "rept(13.37, 2)",
        "result": "13.3713.37"
      },
      {
        "description": "(string, number/int/positive) -> OK",
        "expression": "[rept(\"😆\", 1), rept(\"😆\", 2)]",
        "result": ["😆", "😆😆"]
      },
      {
        "description": "(array, number/int/positive) -> TypeError",
        "expression": "rept([\"str\"], 2)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int/positive) -> TypeError",
        "expression": "rept({a: \"str\"}, 2)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int/positive) -> TypeError",
        "expression": "rept(&\"str\", 2)",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> OK",
        "expression": "[rept(\"\", `null`), rept(\"😆\", `null`)]",
        "result": ["", ""]
      },
      {
        "description": "(string, bool/false) -> OK",
        "expression": "[rept(\"\", `false`), rept(\"😆\", `false`)]",
        "result": ["", ""]
      },
      {
        "description": "(string, bool/true) -> OK",
        "expression": "[rept(\"\", `true`), rept(\"😆\", `true`)]",
        "result": ["", "😆"]
      },
      {
        "description": "(string, number/int/zero) -> OK",
        "expression": "[rept(\"\", 0), rept(\"😆\", 0)]",
        "result": ["", ""]
      },
      {
        "description": "(string, number/int/negative) -> EvaluationError",
        "expression": "rept(\"😆\", -1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, number/float/positive) -> OK",
        "expression": "[rept(\"😆\", `2.1`), rept(\"😆\", `2.5`), rept(\"😆\", `2.9`), rept(\"😆\", `3.1`)]",
        "result": ["😆😆", "😆😆", "😆😆", "😆😆😆"]
      },
      {
        "description": "(string, number/float/gt-minus-one) -> OK",
        "expression": "[rept(\"😆\", -0.9), rept(\"😆\", -0.5), rept(\"😆\", -0.1)]",
        "result": ["", "", ""]
      },
      {
        "description": "(string, number/float/le-minus-one) -> EvaluationError",
        "expression": "rept(\"😆\", -1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, string/empty) -> OK",
        "expression": "rept(\"😆\", \"\")",
        "result": ""
      },
      {
        "description": "(string, string/number) -> OK",
        "expression": "rept(\"😆\", \"3.1\")",
        "result": "😆😆😆"
      },
      {
        "description": "(string, string/non-number) -> TypeError",
        "expression": "rept(\"😆\", \"sdfrevtre\")",
        "error": "TypeError"
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "rept(\"😆\", `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "rept(\"😆\", {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "rept(\"😆\", &2)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "reverse",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "reverse()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "reverse([1, 2, 3], 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "reverse(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "reverse(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "reverse(-42.1337)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> OK",
        "expression": "reverse(\"😍Юникод😍\")",
        "result": "😍докинЮ😍"
      },
      {
        "description": "(array) -> OK",
        "expression": "reverse([`null`, `false`, 3, \"str\", [0, 1, 2], {a: 1}])",
        "result": [{ "a": 1 }, [0, 1, 2], "str", 3, false, null]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "reverse({a: 1, b: 2})",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "reverse(&[1, 2, 3])",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "right",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "right()",
        "error": "FunctionError"
      },
      {
        "description": "(string, number/int, any) -> FunctionError",
        "expression": "right(\"abcd\", 2, 1)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "right(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "right(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "right(13.37)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> OK",
        "expression": "[right(\"\"), right(\"😍Юникод😍\")]",
        "result": ["", "😍"]
      },
      {
        "description": "(array) -> OK",
        "expression": "[right(`[]`), right([1, 2])]",
        "result": [[], [2]]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "right({a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "right(&[1, 2])",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> OK",
        "expression": "[right(`[]`, `null`), right([1, 2], `null`)]",
        "result": [[], []]
      },
      {
        "description": "(array, bool) -> OK",
        "expression": "[right([1, 2], `false`), right([1, 2], `true`)]",
        "result": [[], [2]]
      },
      {
        "description": "(array, number/int/positive) -> OK",
        "expression": "[right([1, 2], 3), right([1, 2], 2), right([1, 2], 1)]",
        "result": [[1, 2], [1, 2], [2]]
      },
      {
        "description": "(array, number/int/zero) -> OK",
        "expression": "right([1, 2], 0)",
        "result": []
      },
      {
        "description": "(array, number/int/negative) -> EvaluationError",
        "expression": "right([1, 2], -1)",
        "error": "EvaluationError"
      },
      {
        "description": "(array, number/float/positive) -> OK",
        "expression": "[right([1, 2], 0.9), right([1, 2], 1.1), right([1, 2], 1.5), right([1, 2], 1.9), right([1, 2], 2.1)]",
        "result": [[], [2], [2], [2], [1, 2]]
      },
      {
        "description": "(array, number/float/gt-minus-one) -> OK",
        "expression": "[right([1, 2], -0.1), right([1, 2], -0.5), right([1, 2], -0.9)]",
        "result": [[], [], []]
      },
      {
        "description": "(array, number/float/le-minus-one) -> EvaluationError",
        "expression": "right([1, 2], -1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(array, string/empty) -> OK",
        "expression": "right([1, 2, 3], \"\")",
        "result": []
      },
      {
        "description": "(array, string/number) -> OK",
        "expression": "[right([1, 2, 3], \"2\"), right([1, 2, 3], \"2.1\")]",
        "result": [
          [2, 3],
          [2, 3]
        ]
      },
      {
        "description": "(array, string/non-number) -> TypeError",
        "expression": "right([1, 2, 3], \"fwergvert\")",
        "error": "TypeError"
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "right([1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "right([1, 2], {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "right([1, 2], &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "round",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "round()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int, any) -> FunctionError",
        "expression": "round(123.456, 2, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "round(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[round(`false`), round(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "round(123.456)",
        "result": 123
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "round(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "round(\"123.456\")",
        "result": 123
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "round(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "round(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "round(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "round(&42)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int) -> OK",
        "expression": "round(`null`, 2)",
        "result": 0
      },
      {
        "description": "(bool, number/int) -> OK",
        "expression": "[round(`false`, 2), round(`true`, 2)]",
        "result": [0, 1]
      },
      {
        "description": "(number, number/int) -> OK",
        "expression": "[round(123.456, -2), round(123.456, -1), round(123.456, 0), round(123.456, 1), round(123.456, 2)]",
        "result": [100, 120, 123, 123.5, 123.46]
      },
      {
        "description": "(string/empty, number/int) -> OK",
        "expression": "round(\"\", 2)",
        "result": 0
      },
      {
        "description": "(string/number, number/int) -> OK",
        "expression": "round(\"123.456\", 2)",
        "result": 123.46
      },
      {
        "description": "(string/non-number, number/int) -> TypeError",
        "expression": "round(\"uasdicyb\", 2)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int) -> TypeError",
        "expression": "round(`[1]`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int) -> TypeError",
        "expression": "round(`{\"1\": 2}`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int) -> TypeError",
        "expression": "round(&42, 2)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> OK",
        "expression": "round(123.456, `null`)",
        "result": 123
      },
      {
        "description": "(number, bool) -> OK",
        "expression": "[round(123.456, `false`), round(123.456, `true`)]",
        "result": [123, 123.5]
      },
      {
        "description": "(number, number/float) -> OK",
        "expression": "[round(123.456, 2.1), round(123.456, 2.5), round(123.456, 2.9)]",
        "result": [123.46, 123.46, 123.46]
      },
      {
        "description": "(number, string/empty) -> OK",
        "expression": "round(123.456, \"\")",
        "result": 123
      },
      {
        "description": "(number, string/number) -> OK",
        "expression": "[round(123.456, \"2\"), round(123.456, \"2.1\")]",
        "result": [123.46, 123.46]
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "round(123.456, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "round(123.456, `[0]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "round(123.456, {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "round(123.456, &0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "search",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "search()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, number/int, any) -> FunctionError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 2, \"b\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string) -> OK",
        "expression": "search(`null`, \"A🙂Юникод🙃B\")",
        "result": [0, ""]
      },
      {
        "description": "(bool/false, string) -> OK",
        "expression": "search(`false`, \"🙂false🙃\")",
        "result": [1, "false"]
      },
      {
        "description": "(bool/true, string) -> OK",
        "expression": "search(`true`, \"🙂true🙃\")",
        "result": [1, "true"]
      },
      {
        "description": "(number, string) -> OK",
        "expression": "search(13.37, \"🙂13.37🙃\")",
        "result": [1, "13.37"]
      },
      {
        "description": "(string/empty, string) -> OK",
        "expression": "search(\"\", \"A🙂Юникод🙃B\")",
        "result": [0, ""]
      },
      {
        "description": "(string/non-empty, string) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\")",
        "result": [1, "🙂Юникод🙃"]
      },
      {
        "description": "(array, string) -> TypeError",
        "expression": "search([1, 2], \"A🙂Юникод🙃B\")",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "search({a: 1}, \"A🙂Юникод🙃B\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "search(&\"A\", \"A🙂Юникод🙃B\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> OK",
        "expression": "search(\"\", `null`)",
        "result": [0, ""]
      },
      {
        "description": "(string, bool/false) -> OK",
        "expression": "search(\"a*s\", `false`)",
        "result": [1, "als"]
      },
      {
        "description": "(string, bool/true) -> OK",
        "expression": "search(\"t*u?\", `true`)",
        "result": [0, "true"]
      },
      {
        "description": "(string, number) -> OK",
        "expression": "search(\"?.?\", 13.37)",
        "result": [1, "3.3"]
      },
      {
        "description": "(string, string/empty) -> OK",
        "expression": "search(\"*\", \"\")",
        "result": [0, ""]
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "search(\"*\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "search(\"*\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "search(\"*\", &\"ab\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, null) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", `null`)",
        "result": [1, "🙂Юникод🙃"]
      },
      {
        "description": "(string, string, bool/false) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", `false`)",
        "result": [1, "🙂Юникод🙃"]
      },
      {
        "description": "(string, string, bool/true) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", `true`)",
        "result": [1, "🙂Юникод🙃"]
      },
      {
        "description": "(string, string, number/int/positive) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 2)",
        "result": []
      },
      {
        "description": "(string, string, number/int/zero) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 0)",
        "result": [1, "🙂Юникод🙃"]
      },
      {
        "description": "(string, string, number/int/negative) -> FunctionError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", -2)",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, number/float/positive) -> OK",
        "expression": "[search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 1.1), search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 1.5), search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 1.9), search(\"🙂*🙃\", \"A🙂Юникод🙃B\", 2.1)]",
        "result": [[1, "🙂Юникод🙃"], [1, "🙂Юникод🙃"], [1, "🙂Юникод🙃"], []]
      },
      {
        "description": "(string, string, number/float/gt-minus-one) -> OK",
        "expression": "[search(\"🙂*🙃\", \"A🙂Юникод🙃B\", -0.1), search(\"🙂*🙃\", \"A🙂Юникод🙃B\", -0.5), search(\"🙂*🙃\", \"A🙂Юникод🙃B\", -0.9)]",
        "result": [
          [1, "🙂Юникод🙃"],
          [1, "🙂Юникод🙃"],
          [1, "🙂Юникод🙃"]
        ]
      },
      {
        "description": "(string, string, number/float/le-minus-one) -> FunctionError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", -1.1)",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, string/empty) -> OK",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", \"\")",
        "result": [1, "🙂Юникод🙃"]
      },
      {
        "description": "(string, string, string/number) -> OK",
        "expression": "[search(\"🙂*🙃\", \"A🙂Юникод🙃B\", \"1\"), search(\"🙂*🙃\", \"A🙂Юникод🙃B\", \"2\")]",
        "result": [[1, "🙂Юникод🙃"], []]
      },
      {
        "description": "(string, string, string/non-number) -> TypeError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, array) -> TypeError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, object) -> TypeError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, expression) -> TypeError",
        "expression": "search(\"🙂*🙃\", \"A🙂Юникод🙃B\", &0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "second",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "second()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "second(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "second(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[second(`false`), second(`true`)]",
        "result": [0, 0]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "second(524.1807150115741)",
        "result": 13
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "second(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "second(\"524.1807150115741\")",
        "result": 13
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "second(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "second(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "second(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "second(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "sign",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "sign()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "sign(0, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "sign(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[sign(`false`), sign(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "[sign(-10), sign(0), sign(10)]",
        "result": [-1, 0, 1]
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "sign(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "sign(\"-13.37\")",
        "result": -1
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "sign(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "sign(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "sign(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "sign(&0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "sin",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "sin()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "sin(0, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(sin(`null`)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "abs(sin(`false`)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(sin(`true`) - 0.8414709848078965) < 1e-12",
        "result": true
      },
      {
        "description": "(number) -> OK",
        "expression": "abs(sin(-1) + 0.8414709848078965) < 1e-12",
        "result": true
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(sin(\"\")) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(sin(\"0.5\") - 0.479425538604203) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "sin(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "sin(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "sin(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "sin(&0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "sort",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "sort()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "sort(`[1, 2, 3]`, `[4, 5]`)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> TypeError",
        "expression": "sort(`null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "sort(`false`)",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "sort(13.37)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> TypeError",
        "expression": "sort(\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array/null) -> TypeError",
        "expression": "sort([`null`])",
        "error": "TypeError"
      },
      {
        "description": "(array/bool) -> TypeError",
        "expression": "sort([`false`])",
        "error": "TypeError"
      },
      {
        "description": "(array/number) -> OK",
        "expression": "sort([9, 8, 11, 10])",
        "result": [8, 9, 10, 11]
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "sort([\"9\", \"8\", \"11\", \"10\"])",
        "result": ["10", "11", "8", "9"]
      },
      {
        "description": "(array/string/non-number) -> OK",
        "expression": "sort([\"B\", \"a\", \"D\", \"c\"])",
        "result": ["B", "D", "a", "c"]
      },
      {
        "description": "(array/mixed-number-string) -> TypeError",
        "expression": "sort([10, \"20\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/array) -> TypeError",
        "expression": "sort([[1, 2, 3]])",
        "error": "TypeError"
      },
      {
        "description": "(array/object) -> TypeError",
        "expression": "sort([{a: 1}])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "sort(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "sort(&`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "sortBy",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "sortBy()",
        "error": "FunctionError"
      },
      {
        "description": "(array, expression, any) -> FunctionError",
        "expression": "sortBy(`[1, 2, 3]`, &@, 1)",
        "error": "FunctionError"
      },
      {
        "description": "(null, expression/number) -> OK",
        "expression": "sortBy(`null`, &(0 + @))",
        "result": []
      },
      {
        "description": "(null, expression/string) -> OK",
        "expression": "sortBy(`null`, &(\"\" & @))",
        "result": []
      },
      {
        "description": "(null, expression/invalid) -> OK",
        "__comments": [
          "In this case it doesn't matter, that expression returns a wrong ",
          "type, as it is never called."
        ],
        "expression": "sortBy(`null`, &(!!@))",
        "result": []
      },
      {
        "description": "(bool, expression/number) -> OK",
        "expression": "sortBy(`true`, &(0 + @))",
        "result": [true]
      },
      {
        "description": "(bool, expression/string) -> OK",
        "expression": "sortBy(`true`, &(\"\" & @))",
        "result": [true]
      },
      {
        "description": "(bool, expression/invalid) -> TypeError",
        "expression": "sortBy(`true`, &(!!@))",
        "error": "TypeError"
      },
      {
        "description": "(number, expression/number) -> OK",
        "expression": "sortBy(13.37, &(0 + @))",
        "result": [13.37]
      },
      {
        "description": "(number, expression/string) -> OK",
        "expression": "sortBy(13.37, &(\"\" & @))",
        "result": [13.37]
      },
      {
        "description": "(number, expression/invalid) -> TypeError",
        "expression": "sortBy(13.37, &(!!@))",
        "error": "TypeError"
      },
      {
        "description": "(string, expression/number) -> OK",
        "expression": "sortBy(\"13.37\", &(0 + @))",
        "result": ["13.37"]
      },
      {
        "description": "(string, expression/string) -> OK",
        "expression": "sortBy(\"13.37\", &(\"\" & @))",
        "result": ["13.37"]
      },
      {
        "description": "(string, expression/invalid) -> TypeError",
        "expression": "sortBy(\"13.37\", &(!!@))",
        "error": "TypeError"
      },
      {
        "description": "(array, expression/number) -> OK",
        "expression": "sortBy([3, 4, `null`, `true`, \"2\"], &(0 + @))",
        "result": [null, true, "2", 3, 4]
      },
      {
        "description": "(array, expression/string) -> OK",
        "expression": "sortBy([3, 4, `null`, `true`, \"2\"], &(\"\" & @))",
        "result": [null, "2", 3, 4, true]
      },
      {
        "description": "(array, expression/invalid) -> TypeError",
        "expression": "sortBy([3, 4, `null`, `true`, \"2\"], &(!!@))",
        "error": "TypeError"
      },
      {
        "description": "(array, expression/mixed) -> TypeError",
        "expression": "sortBy([3, 4, `null`, `true`, \"2\"], &if(@, \"\" & @, 0 + @))",
        "error": "TypeError"
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "sortBy(`{}`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression) -> TypeError",
        "expression": "sortBy(&[1, 2, 3], &0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "split",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "split()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, any) -> FunctionError",
        "expression": "split(\"a/b/c/d\", \"/\", \"'\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string) -> OK",
        "__comments": [
          "Empty subject with an empty separator returns an empty array to ",
          "match JavaScript behavior."
        ],
        "expression": "[split(`null`, \"\"), split(`null`, \"/\")]",
        "result": [[], [""]]
      },
      {
        "description": "(bool, string) -> OK",
        "expression": "[split(`false`, \"\"), split(`false`, \"l\")]",
        "result": [
          ["f", "a", "l", "s", "e"],
          ["fa", "se"]
        ]
      },
      {
        "description": "(number, string) -> OK",
        "expression": "[split(13.37, \"\"), split(13.37, \"3\")]",
        "result": [
          ["1", "3", ".", "3", "7"],
          ["1", ".", "7"]
        ]
      },
      {
        "description": "(string, string) -> OK",
        "expression": "[split(\"😍Юни😍код😍\", \"\"), split(\"😍Юни😍код😍\", \"😍\")]",
        "result": [
          ["😍", "Ю", "н", "и", "😍", "к", "о", "д", "😍"],
          ["", "Юни", "код", ""]
        ]
      },
      {
        "description": "(array, string) -> TypeError",
        "expression": "split([1, 2], \",\")",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "split({a: 1}, \":\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "split(&\"a/b/c/d\", \"/\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> OK",
        "expression": "split(\"abcd\", `null`)",
        "result": ["a", "b", "c", "d"]
      },
      {
        "description": "(string, bool) -> OK",
        "expression": "[split(\"AfalseBfalseC\", `false`), split(\"AtrueBtrueC\", `true`)]",
        "result": [
          ["A", "B", "C"],
          ["A", "B", "C"]
        ]
      },
      {
        "description": "(string, number) -> OK",
        "expression": "split(\"A42B42C\", 42)",
        "result": ["A", "B", "C"]
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "split(\"abcd\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "split(\"abcd\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "split(\"abcd\", &\"b\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "sqrt",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "sqrt()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "sqrt(16, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "sqrt(`null`) | (0 <= @) && (@ < 1e-12)",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "sqrt(`false`) | (0 <= @) && (@ < 1e-12)",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(sqrt(`true`) - 1) < 1e-12",
        "result": true
      },
      {
        "description": "(number/non-negative) -> OK",
        "expression": "abs(sqrt(16) - 4) < 1e-12",
        "result": true
      },
      {
        "description": "(number/negative) -> EvaluationError",
        "expression": "sqrt(-16)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "sqrt(\"\") | (0 <= @) && (@ < 1e-12)",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(sqrt(\"36\") - 6) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "sqrt(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "sqrt(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "sqrt(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "sqrt(&10)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "startsWith",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "startsWith()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, any) -> FunctionError",
        "expression": "startsWith(\"abcd\", \"ab\", \"a\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string) -> OK",
        "expression": "[startsWith(`null`, \"\"), startsWith(`null`, \"a\")]",
        "result": [true, false]
      },
      {
        "description": "(bool, string) -> OK",
        "expression": "[startsWith(`false`, \"ff\"), startsWith(`false`, \"fals\")]",
        "result": [false, true]
      },
      {
        "description": "(number, string) -> OK",
        "expression": "[startsWith(13.37, \"13.3\"), startsWith(13.37, \"14\")]",
        "result": [true, false]
      },
      {
        "description": "(string, string) -> OK",
        "expression": "[startsWith(\"😍Юникод😍\", \"😍\"), startsWith(\"😍Юникод😍\", \"😀\")]",
        "result": [true, false]
      },
      {
        "description": "(array, string) -> TypeError",
        "expression": "startsWith([1, 2], \"[\")",
        "error": "TypeError"
      },
      {
        "description": "(object, string) -> TypeError",
        "expression": "startsWith({a: 1}, \"{\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "startsWith(&\"abcd\", \"ab\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> OK",
        "expression": "[startsWith(\"\", `null`), startsWith(\"a\", `null`)]",
        "result": [true, true]
      },
      {
        "description": "(string, bool) -> OK",
        "expression": "[startsWith(\"false is true\", `false`), startsWith(\"false is true\", `true`)]",
        "result": [true, false]
      },
      {
        "description": "(string, number) -> OK",
        "expression": "[startsWith(\"42 is the answer\", 42), startsWith(\"42 is the answer\", 4), startsWith(\"42 is the answer\", 41)]",
        "result": [true, true, false]
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "startsWith(\"abcd\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "startsWith(\"abcd\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "startsWith(\"abcd\", &\"ab\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "stdev",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "stdev()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "stdev(`[1, 2, 3]`, `[4, 5]`)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> EvaluationError",
        "expression": "stdev(`null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool/false) -> EvaluationError",
        "expression": "stdev(`false`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool/true) -> EvaluationError",
        "expression": "stdev(`true`)",
        "error": "EvaluationError"
      },
      {
        "description": "(number) -> EvaluationError",
        "expression": "stdev(13.37)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/empty) -> EvaluationError",
        "expression": "stdev(\"\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number) -> EvaluationError",
        "expression": "stdev(\"0\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "stdev(\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array/empty) -> EvaluationError",
        "expression": "stdev(`[]`)",
        "error": "EvaluationError"
      },
      {
        "description": "(array/too-small) -> EvaluationError",
        "expression": "stdev(`[1]`)",
        "error": "EvaluationError"
      },
      {
        "description": "(array/number) -> OK",
        "expression": "stdev([1, 2, 3])",
        "result": 1
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "stdev([\"1\", \"2\", \"3\"])",
        "result": 1
      },
      {
        "description": "(array/with-string-empty) -> OK",
        "expression": "stdev([1, 2, \"\"])",
        "result": 1
      },
      {
        "description": "(array/with-string-non-number) -> TypeError",
        "expression": "stdev([1, 2, \"str\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/mixed) -> OK",
        "expression": "stdev([`null`, `false`, `true`, 2, \"2\"])",
        "result": 1
      },
      {
        "description": "(array/array) -> TypeError",
        "expression": "stdev([1, 2, 3, [1, 2, 3]])",
        "error": "TypeError"
      },
      {
        "description": "(array/object) -> TypeError",
        "expression": "stdev([1, 2, 3, {a: 1}])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "stdev(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "stdev(&`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "stdevp",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "stdevp()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "stdevp(`[1, 2, 3]`, `[4, 5]`)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> EvaluationError",
        "expression": "stdevp(`null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(bool) -> OK",
        "expression": "[stdevp(`false`), stdevp(`true`)]",
        "result": [0, 0]
      },
      {
        "description": "(number) -> OK",
        "expression": "stdevp(13.37)",
        "result": 0
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "stdevp(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "stdevp(\"4.20\")",
        "result": 0
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "stdevp(\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array/empty) -> EvaluationError",
        "expression": "stdevp(`[]`)",
        "error": "EvaluationError"
      },
      {
        "description": "(array/number) -> OK",
        "expression": "stdevp([1, 3])",
        "result": 1
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "stdevp([\"1\", \"3\"])",
        "result": 1
      },
      {
        "description": "(array/with-string-empty) -> OK",
        "expression": "stdevp([1, \"\"])",
        "result": 0.5
      },
      {
        "description": "(array/with-string-non-number) -> TypeError",
        "expression": "stdevp([1, \"str\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/mixed) -> OK",
        "expression": "stdevp([`null`, `false`, `true`, 2, \"2\"])",
        "result": 0.8944271909999159
      },
      {
        "description": "(array/array) -> TypeError",
        "expression": "stdevp([1, 2, 3, [1, 2, 3]])",
        "error": "TypeError"
      },
      {
        "description": "(array/object) -> TypeError",
        "expression": "stdevp([1, 2, 3, {a: 1}])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "stdevp(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "stdevp(&`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "substitute",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "substitute()",
        "error": "FunctionError"
      },
      {
        "description": "(string, string, string, number/int, any) -> FunctionError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 1, \"A\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, string, string) -> OK",
        "expression": "substitute(`null`, \"🤕\", \"😀\")",
        "result": ""
      },
      {
        "description": "(bool/false, string, string) -> OK",
        "expression": "substitute(`false`, \"a\", \"AA\")",
        "result": "fAAlse"
      },
      {
        "description": "(bool/true, string, string) -> OK",
        "expression": "substitute(`true`, \"ue\", \"U\")",
        "result": "trU"
      },
      {
        "description": "(number, string, string) -> OK",
        "expression": "substitute(13.37, \"3\", \"42\")",
        "result": "142.427"
      },
      {
        "description": "(string, string, string) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\")",
        "result": "😀Ю😀н😀и😀к😀о😀д😀"
      },
      {
        "description": "(array, string, string) -> TypeError",
        "expression": "substitute([\"str\"], \"🤕\", \"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(object, string, string) -> TypeError",
        "expression": "substitute(`{}`, \"🤕\", \"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, string, string) -> TypeError",
        "expression": "substitute(&\"str\", \"🤕\", \"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(string, null, string) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", `null`, \"😀\")",
        "result": "🤕Ю🤕н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, bool/false, string) -> OK",
        "expression": "substitute(\"This is false\", `false`, \"😀\")",
        "result": "This is 😀"
      },
      {
        "description": "(string, bool/true, string) -> OK",
        "expression": "substitute(\"This is true\", `true`, \"😀\")",
        "result": "This is 😀"
      },
      {
        "description": "(string, number, string) -> OK",
        "expression": "substitute(\"Answer is 42\", 42, \"😀\")",
        "result": "Answer is 😀"
      },
      {
        "description": "(string, string/empty, string) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"\", \"😀\")",
        "result": "🤕Ю🤕н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, array, string) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", [\"🤕\"], \"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(string, object, string) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", `{}`, \"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(string, expression, string) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", &\"🤕\", \"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, null) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", `null`)",
        "result": "Юникод"
      },
      {
        "description": "(string, string, bool/false) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", `false`)",
        "result": "falseЮfalseнfalseиfalseкfalseоfalseдfalse"
      },
      {
        "description": "(string, string, bool/true) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", `true`)",
        "result": "trueЮtrueнtrueиtrueкtrueоtrueдtrue"
      },
      {
        "description": "(string, string, number) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", 42)",
        "result": "42Ю42н42и42к42о42д42"
      },
      {
        "description": "(string, string, string/empty) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"\")",
        "result": "Юникод"
      },
      {
        "description": "(string, string, array) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", [\"😀\"])",
        "error": "TypeError"
      },
      {
        "description": "(string, string, object) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, expression) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", &\"😀\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string, null) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", `null`)",
        "result": "😀Ю🤕н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, bool/false) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", `false`)",
        "result": "😀Ю🤕н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, bool/true) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", `true`)",
        "result": "🤕Ю😀н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, number/int/positive) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 2)",
        "result": "🤕Ю🤕н😀и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, number/int/zero) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 0)",
        "result": "😀Ю🤕н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, number/float/positive) -> OK",
        "expression": "[substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 0.1), substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 0.5), substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 0.9), substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", 1.1)]",
        "result": [
          "😀Ю🤕н🤕и🤕к🤕о🤕д🤕",
          "😀Ю🤕н🤕и🤕к🤕о🤕д🤕",
          "😀Ю🤕н🤕и🤕к🤕о🤕д🤕",
          "🤕Ю😀н🤕и🤕к🤕о🤕д🤕"
        ]
      },
      {
        "description": "(string, string, string, number/float/gt-minus-one) -> OK",
        "expression": "[substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", -0.1), substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", -0.5), substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", -0.9)]",
        "result": [
          "😀Ю🤕н🤕и🤕к🤕о🤕д🤕",
          "😀Ю🤕н🤕и🤕к🤕о🤕д🤕",
          "😀Ю🤕н🤕и🤕к🤕о🤕д🤕"
        ]
      },
      {
        "description": "(string, string, string, number/float/le-minus-one) -> EvaluationError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", -1.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string, string, string, string/empty) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", \"\")",
        "result": "😀Ю🤕н🤕и🤕к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, string/number) -> OK",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", \"3.5\")",
        "result": "🤕Ю🤕н🤕и😀к🤕о🤕д🤕"
      },
      {
        "description": "(string, string, string, string/non-number) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string, array) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string, object) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, string, string, expression) -> TypeError",
        "expression": "substitute(\"🤕Ю🤕н🤕и🤕к🤕о🤕д🤕\", \"🤕\", \"😀\", &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "sum",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "sum()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "sum(`[1, 2, 3]`, `[4, 5]`)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "sum(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[sum(`false`), sum(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "sum(13.37)",
        "result": 13.37
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "sum(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "sum(\"42\")",
        "result": 42
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "sum(\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array/empty) -> OK",
        "expression": "sum(`[]`)",
        "result": 0
      },
      {
        "description": "(array/number) -> OK",
        "expression": "sum([1, 3])",
        "result": 4
      },
      {
        "description": "(array/string/number) -> OK",
        "expression": "sum([\"1\", \"3\"])",
        "result": 4
      },
      {
        "description": "(array/with-string-empty) -> OK",
        "expression": "sum([\"\", 3])",
        "result": 3
      },
      {
        "description": "(array/with-string-non-number) -> TypeError",
        "expression": "sum([1, \"str\"])",
        "error": "TypeError"
      },
      {
        "description": "(array/mixed) -> OK",
        "expression": "sum([`null`, `false`, `true`, 2, \"2\"])",
        "result": 5
      },
      {
        "description": "(array/array) -> TypeError",
        "expression": "sum([1, 2, 3, [1, 2, 3]])",
        "error": "TypeError"
      },
      {
        "description": "(array/object) -> TypeError",
        "expression": "sum([1, 2, 3, {a: 1}])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "sum(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "sum(&`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "tan",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "tan()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "tan(0, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "abs(tan(`null`)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "abs(tan(`false`)) < 1e-12",
        "result": true
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "abs(tan(`true`) - 1.5574077246549023) < 1e-12",
        "result": true
      },
      {
        "description": "(number) -> OK",
        "expression": "abs(tan(-1) + 1.5574077246549023) < 1e-12",
        "result": true
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "abs(tan(\"\")) < 1e-12",
        "result": true
      },
      {
        "description": "(string/number) -> OK",
        "expression": "abs(tan(\"0.5\") - 0.5463024898437905) < 1e-12",
        "result": true
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "tan(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "tan(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "tan(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "tan(&0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "time",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "time()",
        "error": "FunctionError"
      },
      {
        "description": "(number/int, number/int, number/int, any) -> FunctionError",
        "expression": "time(12, 0, 0, 60)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "time(`null`)",
        "result": 0
      },
      {
        "description": "(bool/false) -> OK",
        "expression": "time(`false`)",
        "result": 0
      },
      {
        "description": "(bool/true) -> OK",
        "expression": "time(`true`) == (1 / 24)",
        "result": true
      },
      {
        "description": "(number/int/positive) -> OK",
        "expression": "time(12)",
        "result": 0.5
      },
      {
        "description": "(number/int/zero) -> OK",
        "expression": "time(0)",
        "result": 0
      },
      {
        "description": "(number/int/negative) -> OK",
        "expression": "time(-12)",
        "result": -0.5
      },
      {
        "description": "(number/float/positive) -> OK",
        "expression": "[time(12.1), time(12.5), time(12.9)]",
        "result": [0.5, 0.5, 0.5]
      },
      {
        "description": "(number/float/negative) -> OK",
        "expression": "[time(-12.1), time(-12.5), time(-12.9)]",
        "result": [-0.5, -0.5, -0.5]
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "time(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "time(\"12.4\")",
        "result": 0.5
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "time(\"str\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "time(`[12]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "time(`{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "time(&12)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, null) -> OK",
        "expression": "time(0, `null`)",
        "result": 0
      },
      {
        "description": "(number/int, bool/false) -> OK",
        "expression": "time(0, `false`)",
        "result": 0
      },
      {
        "description": "(number/int, bool/true) -> OK",
        "expression": "time(0, `true`) == (1 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int/positive) -> OK",
        "expression": "time(0, 30) == (30 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int/zero) -> OK",
        "expression": "time(0, 0)",
        "result": 0
      },
      {
        "description": "(number/int, number/int/negative) -> OK",
        "expression": "time(0, -30) == -(30 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/float/positive) -> OK",
        "expression": "time(0, 30.5) == (30 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/float/negative) -> OK",
        "expression": "time(0, -30.5) == -(30 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, string/empty) -> OK",
        "expression": "time(0, \"\")",
        "result": 0
      },
      {
        "description": "(number/int, string/number) -> OK",
        "expression": "time(0, \"30.9\") == (30 / (24 * 60))",
        "result": true
      },
      {
        "description": "(number/int, string/non-number) -> TypeError",
        "expression": "time(0, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, array) -> TypeError",
        "expression": "time(0, `[0]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, object) -> TypeError",
        "expression": "time(0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, expression) -> TypeError",
        "expression": "time(0, &0)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, null) -> OK",
        "expression": "time(0, 0, `null`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, bool/false) -> OK",
        "expression": "time(0, 0, `false`)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, bool/true) -> OK",
        "expression": "time(0, 0, `true`) == (1 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int/positive) -> OK",
        "expression": "time(0, 0, 30) == (30 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/int/zero) -> OK",
        "expression": "time(0, 0, 0)",
        "result": 0
      },
      {
        "description": "(number/int, number/int, number/int/negative) -> OK",
        "expression": "time(0, 0, -30) == -(30 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/float/positive) -> OK",
        "expression": "time(0, 0, 30.5) == (30 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, number/float/negative) -> OK",
        "expression": "time(0, 0, -30.5) == -(30 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, string/number) -> OK",
        "expression": "time(0, 0, \"30.9\") == (30 / (24 * 60 * 60))",
        "result": true
      },
      {
        "description": "(number/int, number/int, string/empty) -> OK",
        "expression": "time(0, 0, \"\")",
        "result": 0
      },
      {
        "description": "(number/int, number/int, string/non-number) -> TypeError",
        "expression": "time(0, 0, \"str\")",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, array) -> TypeError",
        "expression": "time(0, 0, `[0]`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, object) -> TypeError",
        "expression": "time(0, 0, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number/int, number/int, expression) -> TypeError",
        "expression": "time(0, 0, &0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "toArray",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "toArray()",
        "error": "FunctionError"
      },
      {
        "description": "(any, any) -> FunctionError",
        "expression": "toArray(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "toArray(`null`)",
        "result": [null]
      },
      {
        "description": "(bool) -> OK",
        "expression": "[toArray(`false`), toArray(`true`)]",
        "result": [[false], [true]]
      },
      {
        "description": "(number) -> OK",
        "expression": "toArray(13.37)",
        "result": [13.37]
      },
      {
        "description": "(string) -> OK",
        "expression": "toArray(\"str\")",
        "result": ["str"]
      },
      {
        "description": "(array) -> OK",
        "expression": "toArray([1, 2, 3])",
        "result": [1, 2, 3]
      },
      {
        "description": "(object) -> OK",
        "expression": "toArray({a: 1})",
        "result": [{ "a": 1 }]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "toArray(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "toDate",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "toDate()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "toDate(\"1971-06-09T04:20:13.777Z\", \"UTC\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "toDate(`null`)",
        "result": null
      },
      {
        "description": "(bool) -> OK",
        "expression": "[toDate(`false`), toDate(`true`)]",
        "result": [null, null]
      },
      {
        "description": "(number/date) -> OK",
        "expression": "toDate(19710609)",
        "result": 524
      },
      {
        "description": "(number/non-date) -> OK",
        "expression": "toDate(9751234651234)",
        "result": null
      },
      {
        "description": "(string/date) -> OK",
        "expression": "toDate(\"1971-06-09T04:20:13.777Z\")",
        "result": 524.1807150115741
      },
      {
        "description": "(string/non-date) -> OK",
        "expression": "toDate(\"something random\")",
        "result": null
      },
      {
        "description": "(array) -> TypeError",
        "expression": "toDate(`[\"1971-06-09T04:20:13.777Z\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "toDate({a: \"1971-06-09T04:20:13.777Z\"})",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "toDate(&\"1971-06-09T04:20:13.777Z\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "today",
    "given": {},
    "cases": [
      {
        "description": "(any) -> FunctionError",
        "expression": "today(1)",
        "error": "FunctionError"
      },
      {
        "description": "() -> OK",
        "expression": "today() | ((0 < @) && (@ <= now()))",
        "result": true
      }
    ]
  },
  {
    "comment": "toNumber",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "toNumber()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int/valid, any) -> FunctionError",
        "expression": "toNumber(2, 10, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "toNumber(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[toNumber(`false`), toNumber(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "toNumber(13.37)",
        "result": 13.37
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "toNumber(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "[toNumber(\".37\"), toNumber(\"-13.37\")]",
        "result": [0.37, -13.37]
      },
      {
        "description": "(string/non-number) -> OK",
        "expression": "toNumber(\"uasdicyb\")",
        "result": null
      },
      {
        "description": "(array) -> OK",
        "expression": "toNumber(`[1]`)",
        "result": null
      },
      {
        "description": "(object) -> OK",
        "expression": "toNumber({a: 1})",
        "result": null
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "toNumber(&42)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int/valid) -> OK",
        "expression": "toNumber(`null`, 16)",
        "result": 0
      },
      {
        "description": "(bool, number/int/valid) -> OK",
        "expression": "[toNumber(`false`, 16), toNumber(`true`, 16)]",
        "result": [0, 1]
      },
      {
        "description": "(number, number/int/valid) -> OK",
        "expression": "toNumber(11, 16)",
        "result": 11
      },
      {
        "description": "(string/empty, number/int/valid) -> OK",
        "expression": "toNumber(\"\", 16)",
        "result": 0
      },
      {
        "description": "(string/number, number/int/valid) -> OK",
        "expression": "[toNumber(\"11.1\", 2), toNumber(\"11.1\", 8), toNumber(\"11.1\", 10), toNumber(\"11.1\", 16)]",
        "result": [3.5, 9.125, 11.1, 17.0625]
      },
      {
        "description": "(string/non-number, number/int/valid) -> OK",
        "expression": "toNumber(\"uasdicyb\", 16)",
        "result": null
      },
      {
        "description": "(array, number/int/valid) -> OK",
        "expression": "toNumber(`[1]`, 16)",
        "result": null
      },
      {
        "description": "(object, number/int/valid) -> OK",
        "expression": "toNumber({a: 1}, 16)",
        "result": null
      },
      {
        "description": "(expression, number/int/valid) -> TypeError",
        "expression": "toNumber(&42, 16)",
        "error": "TypeError"
      },
      {
        "description": "(string/number, null) -> EvaluationError",
        "expression": "toNumber(\"11\", `null`)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number, bool/false) -> EvaluationError",
        "expression": "toNumber(\"11\", `false`)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number, bool/true) -> EvaluationError",
        "expression": "toNumber(\"11\", `true`)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number, number/float/valid) -> OK",
        "expression": "[toNumber(\"11\", 2.1), toNumber(\"11\", 2.5), toNumber(\"11\", 2.9)]",
        "result": [3, 3, 3]
      },
      {
        "description": "(string/number, number/float/invalid) -> EvaluationError",
        "expression": "toNumber(\"11\", 5.1)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number, number/int/invalid) -> EvaluationError",
        "expression": "toNumber(\"11\", 4)",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number, string/empty) -> EvaluationError",
        "expression": "toNumber(\"11\", \"\")",
        "error": "EvaluationError"
      },
      {
        "description": "(string/number, string/number/valid) -> OK",
        "expression": "[toNumber(\"11\", \"16\"), toNumber(\"11\", \"16.1\")]",
        "result": [17, 17]
      },
      {
        "description": "(string/number, string/non-number) -> TypeError",
        "expression": "toNumber(\"11\", \"dwvetrwg\")",
        "error": "TypeError"
      },
      {
        "description": "(string/number, array) -> TypeError",
        "expression": "toNumber(\"11\", `[16]`)",
        "error": "TypeError"
      },
      {
        "description": "(string/number, object) -> TypeError",
        "expression": "toNumber(\"11\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string/number, expression) -> TypeError",
        "expression": "toNumber(\"11\", &16)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "toString",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "toString()",
        "error": "FunctionError"
      },
      {
        "description": "(any, number/int/valid, any) -> FunctionError",
        "expression": "toString(2, 2, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "toString(`null`)",
        "result": "null"
      },
      {
        "description": "(bool) -> OK",
        "expression": "[toString(`false`), toString(`true`)]",
        "result": ["false", "true"]
      },
      {
        "description": "(number) -> OK",
        "expression": "toString(-13.37)",
        "result": "-13.37"
      },
      {
        "description": "(string) -> OK",
        "expression": "toString(\"uasdicyb\")",
        "result": "uasdicyb"
      },
      {
        "description": "(array) -> OK",
        "expression": "toString(`[null, false, 13.37, \"str\", [0, 1], {\"a\": 1}]`)",
        "result": "[null,false,13.37,\"str\",[0,1],{\"a\":1}]"
      },
      {
        "description": "(object) -> OK",
        "expression": "toString({a: 1})",
        "result": "{\"a\":1}"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "toString(&42)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int/positive) -> OK",
        "expression": "toString(`null`, 1)",
        "result": "null"
      },
      {
        "description": "(bool, number/int/positive) -> OK",
        "expression": "[toString(`false`, 1), toString(`true`, 1)]",
        "result": ["false", "true"]
      },
      {
        "description": "(number, number/int/positive) -> OK",
        "expression": "toString(-13.37, 1)",
        "result": "-13.37"
      },
      {
        "description": "(string/empty, number/int/positive) -> OK",
        "expression": "toString(\"uasdicyb\", 1)",
        "result": "uasdicyb"
      },
      {
        "description": "(array, number/int/positive) -> OK",
        "expression": "toString(`[null, false, 13.37, \"str\", [0, 1], {\"a\": 1}]`, 1)",
        "result": "[\n null,\n false,\n 13.37,\n \"str\",\n [\n  0,\n  1\n ],\n {\n  \"a\": 1\n }\n]"
      },
      {
        "description": "(object, number/int/positive) -> OK",
        "expression": "toString({a: 1}, 1)",
        "result": "{\n \"a\": 1\n}"
      },
      {
        "description": "(expression, number/int/positive) -> TypeError",
        "expression": "toString(&42, 1)",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> OK",
        "expression": "toString([1, 2], `null`)",
        "result": "[1,2]"
      },
      {
        "description": "(array, bool) -> OK",
        "expression": "[toString([1, 2], `false`), toString([1, 2], `true`)]",
        "result": ["[1,2]", "[\n 1,\n 2\n]"]
      },
      {
        "description": "(array, number/int/zero) -> OK",
        "expression": "toString([1, 2], 0)",
        "result": "[1,2]"
      },
      {
        "description": "(array, number/int/negative) -> OK",
        "__comments": ["This is not mentioned in the spec."],
        "expression": "toString([1, 2], -1)",
        "result": "[1,2]"
      },
      {
        "description": "(array, number/float/positive) -> OK",
        "expression": "[toString([1, 2], 1.1), toString([1, 2], 1.5), toString([1, 2], 1.9)]",
        "result": ["[\n 1,\n 2\n]", "[\n 1,\n 2\n]", "[\n 1,\n 2\n]"]
      },
      {
        "description": "(array, number/float/negative) -> OK",
        "__comments": ["This is not mentioned in the spec."],
        "expression": "[toString([1, 2], -0.1), toString([1, 2], -0.5), toString([1, 2], -0.9)]",
        "result": ["[1,2]", "[1,2]", "[1,2]"]
      },
      {
        "description": "(array, string/empty) -> OK",
        "expression": "toString([1, 2], \"\")",
        "result": "[1,2]"
      },
      {
        "description": "(array, string/number) -> OK",
        "expression": "[toString([1, 2], \"1\"), toString([1, 2], \"1.1\")]",
        "result": ["[\n 1,\n 2\n]", "[\n 1,\n 2\n]"]
      },
      {
        "description": "(array, string/non-number) -> TypeError",
        "expression": "toString([1, 2], \"sghergf\")",
        "error": "TypeError"
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "toString([1, 2], `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "toString([1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "toString([1, 2], &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "trim",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "trim()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "trim(\"  Ж  ж  \", \"Дд\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "trim(`null`)",
        "result": ""
      },
      {
        "description": "(bool) -> OK",
        "expression": "[trim(`false`), trim(`true`)]",
        "result": ["false", "true"]
      },
      {
        "description": "(number) -> OK",
        "expression": "trim(13.37)",
        "result": "13.37"
      },
      {
        "description": "(string) -> OK",
        "expression": "trim(\"  Ж  ж  \")",
        "result": "Ж ж"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "trim(`[\"  Ж  ж  \"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "trim(`{\"  Ж  ж  \": \"  Д  д  \"}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "trim(&\"  Ж  ж  \")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "true",
    "given": {},
    "cases": [
      {
        "description": "(any) -> FunctionError",
        "expression": "true(1)",
        "error": "FunctionError"
      },
      {
        "description": "() -> OK",
        "expression": "true()",
        "result": true
      }
    ]
  },
  {
    "comment": "trunc",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "trunc()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int, any) -> FunctionError",
        "expression": "trunc(123.456, 2, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "trunc(`null`)",
        "result": 0
      },
      {
        "description": "(bool) -> OK",
        "expression": "[trunc(`false`), trunc(`true`)]",
        "result": [0, 1]
      },
      {
        "description": "(number) -> OK",
        "expression": "trunc(123.456)",
        "result": 123
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "trunc(\"\")",
        "result": 0
      },
      {
        "description": "(string/number) -> OK",
        "expression": "trunc(\"123.456\")",
        "result": 123
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "trunc(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "trunc(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "trunc(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "trunc(&42)",
        "error": "TypeError"
      },
      {
        "description": "(null, number/int) -> OK",
        "expression": "trunc(`null`, 2)",
        "result": 0
      },
      {
        "description": "(bool, number/int) -> OK",
        "expression": "[trunc(`false`, 2), trunc(`true`, 2)]",
        "result": [0, 1]
      },
      {
        "description": "(number, number/int) -> OK",
        "expression": "[trunc(123.456, -2), trunc(123.456, -1), trunc(123.456, 0), trunc(123.456, 1), trunc(123.456, 2)]",
        "result": [100, 120, 123, 123.4, 123.45]
      },
      {
        "description": "(string/empty, number/int) -> OK",
        "expression": "trunc(\"\", 2)",
        "result": 0
      },
      {
        "description": "(string/number, number/int) -> OK",
        "expression": "trunc(\"123.456\", 2)",
        "result": 123.45
      },
      {
        "description": "(string/non-number, number/int) -> TypeError",
        "expression": "trunc(\"uasdicyb\", 2)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int) -> TypeError",
        "expression": "trunc(`[1]`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int) -> TypeError",
        "expression": "trunc(`{\"1\": 2}`, 2)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int) -> TypeError",
        "expression": "trunc(&42, 2)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> OK",
        "expression": "trunc(123.456, `null`)",
        "result": 123
      },
      {
        "description": "(number, bool) -> OK",
        "expression": "[trunc(123.456, `false`), trunc(123.456, `true`)]",
        "result": [123, 123.4]
      },
      {
        "description": "(number, number/float) -> OK",
        "expression": "[trunc(123.456, 2.1), trunc(123.456, 2.5), trunc(123.456, 2.9)]",
        "result": [123.45, 123.45, 123.45]
      },
      {
        "description": "(number, string/empty) -> OK",
        "expression": "trunc(123.456, \"\")",
        "result": 123
      },
      {
        "description": "(number, string/number) -> OK",
        "expression": "[trunc(123.456, \"2\"), trunc(123.456, \"2.1\")]",
        "result": [123.45, 123.45]
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "trunc(123.456, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "trunc(123.456, `[0]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "trunc(123.456, {a: 1})",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "trunc(123.456, &0)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "type",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "type()",
        "error": "FunctionError"
      },
      {
        "description": "(any, any) -> FunctionError",
        "expression": "type(13.37, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "type(`null`)",
        "result": "null"
      },
      {
        "description": "(bool) -> OK",
        "expression": "[type(`false`), type(`true`)]",
        "result": ["boolean", "boolean"]
      },
      {
        "description": "(number) -> OK",
        "expression": "type(13.37)",
        "result": "number"
      },
      {
        "description": "(string) -> OK",
        "expression": "type(\"str\")",
        "result": "string"
      },
      {
        "description": "(array) -> OK",
        "expression": "type([1, 2, 3])",
        "result": "array"
      },
      {
        "description": "(object) -> OK",
        "expression": "type({a: 1})",
        "result": "object"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "type(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "unique",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "unique()",
        "error": "FunctionError"
      },
      {
        "description": "(array, any) -> FunctionError",
        "expression": "unique(`[1, 2, 3]`, `[4, 5]`)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "unique(`null`)",
        "result": []
      },
      {
        "description": "(bool) -> OK",
        "expression": "[unique(`false`), unique(`true`)]",
        "result": [[false], [true]]
      },
      {
        "description": "(number) -> OK",
        "expression": "unique(13.37)",
        "result": [13.37]
      },
      {
        "description": "(string) -> OK",
        "expression": "unique(\"str\")",
        "result": ["str"]
      },
      {
        "description": "(array) -> OK",
        "expression": "unique([`null`, `false`, `true`, 1, \"1\", [1, 2, 3], {a: 1}, `null`, `false`, `true`, 1, \"1\", [1, 2, 3], {a: 1}])",
        "result": [null, false, true, 1, "1", [1, 2, 3], { "a": 1 }]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "unique(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "unique(&`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "upper",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "upper()",
        "error": "FunctionError"
      },
      {
        "description": "(string, any) -> FunctionError",
        "expression": "upper(\"Жж\", \"Дд\")",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "upper(`null`)",
        "result": ""
      },
      {
        "description": "(bool) -> OK",
        "expression": "[upper(`false`), upper(`true`)]",
        "result": ["FALSE", "TRUE"]
      },
      {
        "description": "(number) -> OK",
        "expression": "upper(13.37)",
        "result": "13.37"
      },
      {
        "description": "(string) -> OK",
        "expression": "upper(\"Жж\")",
        "result": "ЖЖ"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "upper(`[\"Жж\"]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "upper(`{\"Жж\": \"Дд\"}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "upper(&\"Жж\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "value",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "value()",
        "error": "FunctionError"
      },
      {
        "description": "(object, string, any) -> FunctionError",
        "expression": "value({a: 1}, \"a\", \"b\")",
        "error": "FunctionError"
      },
      {
        "description": "(null, null) -> TypeError",
        "expression": "value(`null`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(null, bool) -> TypeError",
        "expression": "value(`null`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(null, number) -> TypeError",
        "expression": "value(`null`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(null, string) -> TypeError",
        "expression": "value(`null`, \"key\")",
        "error": "TypeError"
      },
      {
        "description": "(null, array) -> TypeError",
        "expression": "value(`null`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(null, object) -> TypeError",
        "expression": "value(`null`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(null, expression) -> TypeError",
        "expression": "value(`null`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, null) -> TypeError",
        "expression": "value(`false`, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, bool) -> TypeError",
        "expression": "value(`false`, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/int) -> TypeError",
        "expression": "value(`false`, 0)",
        "error": "TypeError"
      },
      {
        "description": "(bool, number/float) -> TypeError",
        "expression": "value(`false`, 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/empty) -> TypeError",
        "expression": "value(`false`, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/number) -> TypeError",
        "expression": "value(`false`, \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, string/non-number) -> TypeError",
        "expression": "value(`false`, \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(bool, array) -> TypeError",
        "expression": "value(`false`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, object) -> TypeError",
        "expression": "value(`false`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(bool, expression) -> TypeError",
        "expression": "value(`false`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> TypeError",
        "expression": "value(42, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(number, bool) -> TypeError",
        "expression": "value(42, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/int) -> TypeError",
        "expression": "value(42, 0)",
        "error": "TypeError"
      },
      {
        "description": "(number, number/float) -> TypeError",
        "expression": "value(42, 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(number, string/empty) -> TypeError",
        "expression": "value(42, \"\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/number) -> TypeError",
        "expression": "value(42, \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "expression": "value(42, \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "expression": "value(42, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "expression": "value(42, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "expression": "value(42, &0)",
        "error": "TypeError"
      },
      {
        "description": "(string, null) -> TypeError",
        "expression": "value(\"abc\", `null`)",
        "error": "TypeError"
      },
      {
        "description": "(string, bool) -> TypeError",
        "expression": "value(\"abc\", `false`)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/int) -> TypeError",
        "expression": "value(\"abc\", 0)",
        "error": "TypeError"
      },
      {
        "description": "(string, number/float) -> TypeError",
        "expression": "value(\"abc\", 0.5)",
        "error": "TypeError"
      },
      {
        "description": "(string, string/empty) -> TypeError",
        "expression": "value(\"abc\", \"\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string/number) -> TypeError",
        "expression": "value(\"abc\", \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(string, string/non-number) -> TypeError",
        "expression": "value(\"abc\", \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(string, array) -> TypeError",
        "expression": "value(\"abc\", `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(string, object) -> TypeError",
        "expression": "value(\"abc\", `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(string, expression) -> TypeError",
        "expression": "value(\"abc\", &0)",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> TypeError",
        "expression": "value([1, 2, 3], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(array, bool) -> TypeError",
        "expression": "value([1, 2, 3], `false`)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int) -> OK",
        "expression": "[value([1, 2], -1), value([1, 2], 0), value([1, 2], 1), value([1, 2], 2)]",
        "result": [null, 1, 2, null]
      },
      {
        "description": "(array, number/float/positive) -> OK",
        "expression": "[value([1, 2], 1.1), value([1, 2], 1.5), value([1, 2], 1.9)]",
        "result": [2, 2, 2]
      },
      {
        "description": "(array, number/float/negative) -> OK",
        "expression": "[value([1, 2], -0.1), value([1, 2], -0.5), value([1, 2], -0.9), value([1, 2], -1.1)]",
        "result": [1, 1, 1, null]
      },
      {
        "description": "(array, string/empty) -> TypeError",
        "expression": "value([1, 2], \"\")",
        "error": "TypeError"
      },
      {
        "description": "(array, string/number) -> TypeError",
        "expression": "value([1, 2], \"0.5\")",
        "error": "TypeError"
      },
      {
        "description": "(array, string/non-number) -> TypeError",
        "expression": "value([1, 2], \"sdfgesrg\")",
        "error": "TypeError"
      },
      {
        "description": "(array, array) -> TypeError",
        "expression": "value([1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "value([1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "value(`[1, 2]`, &0)",
        "error": "TypeError"
      },
      {
        "description": "(object, null) -> TypeError",
        "expression": "value({'': 42}, `null`)",
        "error": "TypeError"
      },
      {
        "description": "(object, bool) -> TypeError",
        "expression": "value({false: 42}, `false`)",
        "error": "TypeError"
      },
      {
        "description": "(object, number) -> TypeError",
        "expression": "value(`{\"1\": 11}`, 1)",
        "error": "TypeError"
      },
      {
        "description": "(object, string/number) -> OK",
        "expression": "[value(`{\"1\": 11}`, \"1\"), value(`{\"1\": 11}`, \"1.1\"), value(`{\"1\": 11}`, \"2\")]",
        "result": [11, null, null]
      },
      {
        "description": "(object, string/non-number) -> OK",
        "expression": "[value(`{\"foo\": \"bar\"}`, \"foo\"), value(`{\"foo\": \"bar\"}`, \"bar\")]",
        "result": ["bar", null]
      },
      {
        "description": "(object, array) -> TypeError",
        "expression": "value(`{}`, `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(object, object) -> TypeError",
        "expression": "value(`{}`, `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(object, expression) -> TypeError",
        "expression": "value(`{}`, &\"key\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, null) -> TypeError",
        "expression": "value(&[1, 2], `null`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, bool) -> TypeError",
        "expression": "value(&[1, 2], `true`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number) -> TypeError",
        "expression": "value(&[1, 2], 1)",
        "error": "TypeError"
      },
      {
        "description": "(expression, string) -> TypeError",
        "expression": "value(&[1, 2], \"a\")",
        "error": "TypeError"
      },
      {
        "description": "(expression, array) -> TypeError",
        "expression": "value(&[1, 2], `[]`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, object) -> TypeError",
        "expression": "value(&[1, 2], `{}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression, expression) -> TypeError",
        "expression": "value(&[1, 2], &\"a\")",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "values",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "values()",
        "error": "FunctionError"
      },
      {
        "description": "(object, any) -> FunctionError",
        "expression": "values({a: 1}, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "values(`null`)",
        "result": []
      },
      {
        "description": "(bool) -> TypeError",
        "expression": "[values(`false`), values(`true`)]",
        "error": "TypeError"
      },
      {
        "description": "(number) -> TypeError",
        "expression": "values(-42)",
        "error": "TypeError"
      },
      {
        "description": "(string) -> TypeError",
        "expression": "values(\"something-random\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "values([0, 1, 2])",
        "error": "TypeError"
      },
      {
        "description": "(object) -> OK",
        "expression": "values({key: \"value\"})",
        "result": ["value"]
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "values(&{a: 1})",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "weekday",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "weekday()",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int/valid, any) -> FunctionError",
        "expression": "weekday(2, 3, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(null, number/int/valid) -> OK",
        "expression": "weekday(`null`, 3)",
        "result": 3
      },
      {
        "description": "(bool, number/int/valid) -> OK",
        "expression": "[weekday(`false`, 3), weekday(`true`, 3)]",
        "result": [3, 4]
      },
      {
        "description": "(number, number/int/valid) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, 3)",
        "result": 2
      },
      {
        "description": "(string/empty, number/int/valid) -> OK",
        "expression": "weekday(\"\", 3)",
        "result": 3
      },
      {
        "description": "(string/number, number/int/valid) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(\"524.1807150115741\", 3)",
        "result": 2
      },
      {
        "description": "(string/non-number, number/int/valid) -> TypeError",
        "expression": "weekday(\"uasdicyb\", 3)",
        "error": "TypeError"
      },
      {
        "description": "(array, number/int/valid) -> TypeError",
        "expression": "weekday(`[1]`, 3)",
        "error": "TypeError"
      },
      {
        "description": "(object, number/int/valid) -> TypeError",
        "expression": "weekday(`{\"1\": 2}`, 3)",
        "error": "TypeError"
      },
      {
        "description": "(expression, number/int/valid) -> TypeError",
        "expression": "weekday(&42, 3)",
        "error": "TypeError"
      },
      {
        "description": "(number, null) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, `null`)",
        "error": "FunctionError"
      },
      {
        "description": "(number, bool/false) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, `false`)",
        "error": "FunctionError"
      },
      {
        "description": "(number, bool/true) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, `true`)",
        "result": 4
      },
      {
        "description": "(number, number/float/valid) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "[weekday(524.1807150115741, 1.9), weekday(524.1807150115741, 2.5), weekday(524.1807150115741, 3.1)]",
        "result": [4, 3, 2]
      },
      {
        "description": "(number, number/float/lt) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, 0.9)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/float/gt) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, 4.1)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int/lt) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, 0)",
        "error": "FunctionError"
      },
      {
        "description": "(number, number/int/gt) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, 4)",
        "error": "FunctionError"
      },
      {
        "description": "(number, string/number/valid) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "[weekday(524.1807150115741, \"3\"), weekday(524.1807150115741, \"3.1\")]",
        "result": [2, 2]
      },
      {
        "description": "(number, string/empty) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, \"\")",
        "error": "FunctionError"
      },
      {
        "description": "(number, string/number/lt) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, \"0.9\")",
        "error": "FunctionError"
      },
      {
        "description": "(number, string/number/gt) -> FunctionError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, \"4.1\")",
        "error": "FunctionError"
      },
      {
        "description": "(number, string/non-number) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, \"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(number, array) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, `[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(number, object) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, `{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(number, expression) -> TypeError",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "weekday(524.1807150115741, &1)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "year",
    "tz": "UTC",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "year()",
        "error": "FunctionError"
      },
      {
        "description": "(number, any) -> FunctionError",
        "expression": "year(2, 42)",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "year(`null`)",
        "result": 1970
      },
      {
        "description": "(bool) -> OK",
        "expression": "[year(`false`), year(`true`)]",
        "result": [1970, 1970]
      },
      {
        "description": "(number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "year(524.1807150115741)",
        "result": 1971
      },
      {
        "description": "(string/empty) -> OK",
        "expression": "year(\"\")",
        "result": 1970
      },
      {
        "description": "(string/number) -> OK",
        "__comments": ["1971-06-09T04:20:13.777Z"],
        "expression": "year(\"524.1807150115741\")",
        "result": 1971
      },
      {
        "description": "(string/non-number) -> TypeError",
        "expression": "year(\"uasdicyb\")",
        "error": "TypeError"
      },
      {
        "description": "(array) -> TypeError",
        "expression": "year(`[1]`)",
        "error": "TypeError"
      },
      {
        "description": "(object) -> TypeError",
        "expression": "year(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "year(&42)",
        "error": "TypeError"
      }
    ]
  },
  {
    "comment": "zip",
    "given": {},
    "cases": [
      {
        "description": "() -> FunctionError",
        "expression": "zip()",
        "error": "FunctionError"
      },
      {
        "description": "(null) -> OK",
        "expression": "zip(`null`)",
        "result": []
      },
      {
        "description": "(bool) -> OK",
        "expression": "[zip(`false`), zip(`true`)]",
        "result": [[[false]], [[true]]]
      },
      {
        "description": "(number) -> OK",
        "expression": "zip(13.37)",
        "result": [[13.37]]
      },
      {
        "description": "(string/number) -> OK",
        "expression": "zip(\"42\")",
        "result": [["42"]]
      },
      {
        "description": "(string/non-number) -> OK",
        "expression": "zip(\"uasdicyb\")",
        "result": [["uasdicyb"]]
      },
      {
        "description": "(array) -> OK",
        "expression": "zip([`null`, `true`, 13.37, \"str\", [1, 2, 3], {a: 1}])",
        "result": [[null], [true], [13.37], ["str"], [[1, 2, 3]], [{ "a": 1 }]]
      },
      {
        "description": "(object) -> TypeError",
        "expression": "zip(`{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(expression) -> TypeError",
        "expression": "zip(&`[1, 2]`)",
        "error": "TypeError"
      },
      {
        "description": "(array, null) -> OK",
        "expression": "zip([1, 2, 3], `null`)",
        "result": []
      },
      {
        "description": "(array, bool) -> OK",
        "expression": "[zip([1, 2, 3], `false`), zip([1, 2, 3], `true`)]",
        "result": [[[1, false]], [[1, true]]]
      },
      {
        "description": "(array, number) -> OK",
        "expression": "zip([1, 2, 3], 13.37)",
        "result": [[1, 13.37]]
      },
      {
        "description": "(array, string/number) -> OK",
        "expression": "zip([1, 2, 3], \"42\")",
        "result": [[1, "42"]]
      },
      {
        "description": "(array, string/non-number) -> OK",
        "expression": "zip([1, 2, 3], \"uasdicyb\")",
        "result": [[1, "uasdicyb"]]
      },
      {
        "description": "(array, array) -> OK",
        "expression": "zip([`null`, `true`, 13.37, \"str\", [1, 2, 3], {a: 1}], [1, 2, 3, \"4\"])",
        "result": [
          [null, 1],
          [true, 2],
          [13.37, 3],
          ["str", "4"]
        ]
      },
      {
        "description": "(array, object) -> TypeError",
        "expression": "zip([1, 2, 3], `{\"1\": 2}`)",
        "error": "TypeError"
      },
      {
        "description": "(array, expression) -> TypeError",
        "expression": "zip([1, 2, 3], &`[1, 2]`)",
        "error": "TypeError"
      }
    ]
  }
]
